import { DateTime } from "../datetime";
import Intl from "../types/intl-2020";
import { StringUnitLength, UnitLength, WeekUnitLengths } from "../types/common";
import { LocaleOptions, NumberingSystem, CalendarSystem } from "../types/locale";
/**
 * @private
 */
interface NumberFormatterOptions {
    padTo?: number;
    floor?: boolean;
}
declare class PolyNumberFormatter {
    private readonly _padTo;
    private readonly _floor;
    private _inf?;
    constructor(intl: string, forceSimple: boolean, options: NumberFormatterOptions);
    format(i: number): string;
}
/**
 * @private
 */
declare class PolyDateFormatter {
    private _opts;
    private _dt;
    private _dtf?;
    private _hasIntl;
    constructor(dt: DateTime, intl: string, opts: Intl.DateTimeFormatOptions);
    format(): string;
    formatToParts(): Intl.DateTimeFormatPart[];
    resolvedOptions(): Intl.ResolvedDateTimeFormatOptions;
}
/**
 * @private
 */
declare class PolyRelFormatter {
    private _options;
    private _rtf?;
    constructor(locale: Intl.BCP47LanguageTag, isEnglish: boolean, options: Intl.RelativeTimeFormatOptions);
    format(count: number, unit: Intl.RelativeTimeFormatUnit): string;
    formatToParts(count: number, unit: Intl.RelativeTimeFormatUnit): string[];
}
/**
 * @private
 */
export declare class Locale {
    private constructor();
    get fastNumbers(): boolean;
    readonly locale: string;
    numberingSystem?: Readonly<NumberingSystem>;
    outputCalendar?: Readonly<CalendarSystem>;
    private readonly _intl;
    private _weekdaysCache;
    private _monthsCache;
    private _meridiemCache?;
    private _eraCache;
    private readonly _specifiedLocale?;
    private _fastNumbersCached?;
    static fromOpts(opts: LocaleOptions): Locale;
    static create(locale?: string, numberingSystem?: NumberingSystem, outputCalendar?: CalendarSystem, defaultToEN?: boolean): Locale;
    static resetCache(): void;
    static fromObject({ locale, numberingSystem, outputCalendar }?: LocaleOptions): Locale;
    listingMode(defaultOK?: boolean): "error" | "en" | "intl";
    clone(alts: LocaleOptions): Locale;
    redefaultToEN(alts?: LocaleOptions): Locale;
    redefaultToSystem(alts?: LocaleOptions): Locale;
    months(length: UnitLength, format?: boolean, defaultOK?: boolean): string[];
    weekdays(length: WeekUnitLengths, format?: boolean, defaultOK?: boolean): string[];
    meridiems(defaultOK?: boolean): string[];
    eras(length: StringUnitLength, defaultOK?: boolean): string[];
    extract(dt: DateTime, intlOptions: Intl.DateTimeFormatOptions, field: Intl.DateTimeFormatPartTypes): string;
    numberFormatter(options?: NumberFormatterOptions): PolyNumberFormatter;
    dtFormatter(dt: DateTime, intlOptions?: Intl.DateTimeFormatOptions): PolyDateFormatter;
    relFormatter(options?: Intl.RelativeTimeFormatOptions): PolyRelFormatter;
    isEnglish(): boolean;
    equals(other: Locale): boolean;
    private _supportsFastNumbers;
}
export {};

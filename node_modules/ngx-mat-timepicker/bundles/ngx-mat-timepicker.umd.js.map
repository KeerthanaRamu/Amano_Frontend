{"version":3,"file":"ngx-mat-timepicker.umd.js","sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-mat-timepicker/lib/models/ngx-mat-timepicker-periods.enum.ts","ng://ngx-mat-timepicker/lib/models/ngx-mat-timepicker-format.enum.ts","ng://ngx-mat-timepicker/lib/services/ngx-mat-timepicker-adapter.ts","ng://ngx-mat-timepicker/lib/services/ngx-mat-timepicker.service.ts","ng://ngx-mat-timepicker/lib/models/ngx-mat-timepicker-units.enum.ts","ng://ngx-mat-timepicker/lib/tokens/ngx-mat-timepicker-time-locale.token.ts","ng://ngx-mat-timepicker/lib/utils/ngx-mat-timepicker.utils.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component.ts","ng://ngx-mat-timepicker/lib/directives/ngx-mat-timepicker-toggle-icon.directive.ts","ng://ngx-mat-timepicker/lib/services/ngx-mat-timepicker-event.service.ts","ng://ngx-mat-timepicker/lib/tokens/ngx-mat-timepicker-config.token.ts","ng://ngx-mat-timepicker/lib/directives/ngx-mat-timepicker-base.directive.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker/ngx-mat-timepicker.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component.ts","ng://ngx-mat-timepicker/lib/directives/ngx-mat-timepicker.directive.ts","ng://ngx-mat-timepicker/lib/directives/ngx-mat-timepicker-theme.directive.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-24-hours-face/ngx-mat-timepicker-24-hours-face.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-12-hours-face/ngx-mat-timepicker-12-hours-face.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-face/ngx-mat-timepicker-face.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component.ts","ng://ngx-mat-timepicker/lib/models/ngx-mat-timepicker-measures.enum.ts","ng://ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-parser.pipe.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-period/ngx-mat-timepicker-period.component.ts","ng://ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-time-formatter.pipe.ts","ng://ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-minutes-formatter.pipe.ts","ng://ngx-mat-timepicker/lib/directives/ngx-mat-timepicker-autofocus.directive.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component.ts","ng://ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-time-localizer.pipe.ts","ng://ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-active-hour.pipe.ts","ng://ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-active-minute.pipe.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-content/ngx-mat-timepicker-content.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-standalone/ngx-mat-timepicker-standalone.component.ts","ng://ngx-mat-timepicker/lib/ngx-mat-timepicker.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","export enum NgxMatTimepickerPeriods {\n    AM = \"AM\",\n    PM = \"PM\"\n}\n","export enum NgxMatTimepickerFormat {\n    TWELVE = \"hh:mm a\",\n    TWELVE_SHORT = \"h:m a\",\n    TWENTY_FOUR = \"HH:mm\",\n    TWENTY_FOUR_SHORT = \"H:m\"\n}\n","import {NgxMatTimepickerFormat} from \"../models/ngx-mat-timepicker-format.enum\";\nimport {NgxMatTimepickerPeriods} from \"../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerOptions} from \"../models/ngx-mat-timepicker-options.interface\";\n//\nimport {DateTime, LocaleOptions, NumberingSystem} from \"ts-luxon\";\n\n// @dynamic\nexport class NgxMatTimepickerAdapter {\n\n    static defaultFormat = 12;\n    static defaultLocale = \"en-US\";\n    static defaultNumberingSistem: NumberingSystem = \"latn\";\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: NgxMatTimepickerPeriods): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        const hour = period === NgxMatTimepickerPeriods.AM ? currentHour : currentHour + 12;\n\n        if (period === NgxMatTimepickerPeriods.AM && hour === 12) {\n            return 0;\n        }\n        else if (period === NgxMatTimepickerPeriods.PM && hour === 24) {\n            return 12;\n        }\n\n        return hour;\n    }\n\n    static formatTime(time: string, opts: NgxMatTimepickerOptions): string {\n        if (!time) {\n            return \"Invalid Time\";\n        }\n        const {format} = opts;\n        const parsedTime = NgxMatTimepickerAdapter.parseTime(time, opts).setLocale(NgxMatTimepickerAdapter.defaultLocale);\n\n        if (format !== 24) {\n            return parsedTime.toLocaleString({\n                ...DateTime.TIME_SIMPLE,\n                hour12: format !== 24\n            }).replace(/\\u200E/g, \"\");\n        }\n\n        return parsedTime.toISOTime({\n            includeOffset: false,\n            suppressMilliseconds: true,\n            suppressSeconds: true\n        }).replace(/\\u200E/g, \"\");\n    }\n\n    static fromDateTimeToString(time: DateTime, format: number): string {\n        const timeFormat = format === 24 ? NgxMatTimepickerFormat.TWENTY_FOUR : NgxMatTimepickerFormat.TWELVE;\n\n        return time.reconfigure({\n            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,\n            locale: NgxMatTimepickerAdapter.defaultLocale\n        }).toFormat(timeFormat);\n    }\n\n    static isBetween(time: DateTime, before: DateTime, after: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\n        if (unit === \"hours\") {\n            return this.isSameOrBefore(time, after, unit) && this.isSameOrAfter(time, before, unit);\n        }\n        if (unit === \"minutes\") {\n            return this.isSameOrBefore(time, after) && this.isSameOrAfter(time, before);\n        }\n    }\n\n    static isSameOrAfter(time: DateTime, compareWith: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\n        if (unit === \"hours\") {\n            return time.hour >= compareWith.hour;\n        }\n        if (unit === \"minutes\") {\n            return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n        }\n    }\n\n    static isSameOrBefore(time: DateTime, compareWith: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\n        if (unit === \"hours\") {\n            return time.hour <= compareWith.hour;\n        }\n        if (unit === \"minutes\") {\n            return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n        }\n    }\n\n    static isTimeAvailable(time: string,\n                           min?: DateTime,\n                           max?: DateTime,\n                           granularity?: \"hours\" | \"minutes\",\n                           minutesGap?: number | null,\n                           format?: number): boolean {\n        if (!time) {\n            return;\n        }\n\n        const convertedTime = this.parseTime(time, {format});\n        const minutes = convertedTime.minute;\n\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && this.isSameOrAfter(convertedTime, min, granularity);\n        const isBefore = (max && !min)\n            && this.isSameOrBefore(convertedTime, max, granularity);\n        const between = (min && max)\n            && this.isBetween(convertedTime, min, max, granularity);\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || between || isAvailable;\n    }\n\n    static parseTime(time: string, opts: NgxMatTimepickerOptions): DateTime {\n        const {numberingSystem, locale} = NgxMatTimepickerAdapter._getLocaleOptionsByTime(time, opts);\n        const isPeriodExist = time.split(\" \").length === 2;\n        const timeMask = isPeriodExist ? NgxMatTimepickerFormat.TWELVE_SHORT : NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;\n\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\n    }\n\n    static toLocaleTimeString(time: string, opts: NgxMatTimepickerOptions = {}): string {\n        const {format = NgxMatTimepickerAdapter.defaultFormat, locale = NgxMatTimepickerAdapter.defaultLocale} = opts;\n        const hourCycle = format === 24 ? \"h23\" : \"h12\";\n        const timeFormat = {...DateTime.TIME_SIMPLE, hourCycle};\n        const timeMask = (format === 24) ? NgxMatTimepickerFormat.TWENTY_FOUR_SHORT : NgxMatTimepickerFormat.TWELVE_SHORT;\n\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\n    }\n\n    private static _getLocaleOptionsByTime(time: string, opts: NgxMatTimepickerOptions): LocaleOptions {\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\n        const localeConfig: LocaleOptions = {\n            numberingSystem: numberingSystem as NumberingSystem,\n            locale\n        };\n        const defaultConfig: LocaleOptions = {\n            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,\n            locale: NgxMatTimepickerAdapter.defaultLocale\n        };\n\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {NgxMatTimepickerClockFace} from \"../models/ngx-mat-timepicker-clock-face.interface\";\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {NgxMatTimepickerPeriods} from \"../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerAdapter} from \"./ngx-mat-timepicker-adapter\";\nimport {DateTime} from \"ts-luxon\";\n\nconst DEFAULT_HOUR: NgxMatTimepickerClockFace = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: NgxMatTimepickerClockFace = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class NgxMatTimepickerService {\n\n\n    set hour(hour: NgxMatTimepickerClockFace) {\n        this._hour$.next(hour);\n    }\n\n    set minute(minute: NgxMatTimepickerClockFace) {\n        this._minute$.next(minute);\n    }\n\n    set period(period: NgxMatTimepickerPeriods) {\n        const isPeriodValid = (period === NgxMatTimepickerPeriods.AM) || (period === NgxMatTimepickerPeriods.PM);\n\n        if (isPeriodValid) {\n            this._period$.next(period);\n        }\n    }\n\n    get selectedHour(): Observable<NgxMatTimepickerClockFace> {\n        return this._hour$.asObservable();\n    }\n\n    get selectedMinute(): Observable<NgxMatTimepickerClockFace> {\n        return this._minute$.asObservable();\n    }\n\n    get selectedPeriod(): Observable<NgxMatTimepickerPeriods> {\n        return this._period$.asObservable();\n    }\n\n    private _hour$ = new BehaviorSubject<NgxMatTimepickerClockFace>(DEFAULT_HOUR);\n    private _minute$ = new BehaviorSubject<NgxMatTimepickerClockFace>(DEFAULT_MINUTE);\n    private _period$ = new BehaviorSubject<NgxMatTimepickerPeriods>(NgxMatTimepickerPeriods.AM);\n\n    getFullTime(format: number): string {\n        const selectedHour = this._hour$.getValue().time;\n        const selectedMinute = this._minute$.getValue().time;\n        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\n        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\n        const period = format === 12 ? this._period$.getValue() : \"\";\n        const time = `${hour}:${minute} ${period}`.trim();\n\n        return NgxMatTimepickerAdapter.formatTime(time, {format});\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\n        /* Workaround to double error message*/\n        try {\n            if (NgxMatTimepickerAdapter.isTimeAvailable(time, min, max, \"minutes\", minutesGap)) {\n                this._setDefaultTime(time, format);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    private _resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = NgxMatTimepickerPeriods.AM;\n    }\n\n    private _setDefaultTime(time: string, format: number) {\n        const defaultTime = NgxMatTimepickerAdapter.parseTime(time, {format}).toJSDate();\n\n        // Check on null, because invalid date will be null\n        if (DateTime.fromJSDate(defaultTime) !== null) {\n            const period = time.substr(time.length - 2).toUpperCase();\n            const hour = defaultTime.getHours();\n\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as NgxMatTimepickerPeriods)};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = period as NgxMatTimepickerPeriods;\n\n        }\n        else {\n            this._resetTime();\n        }\n    }\n}\n\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\nfunction formatHourByPeriod(hour: number, period: NgxMatTimepickerPeriods): number {\n    switch (period) {\n        case NgxMatTimepickerPeriods.AM:\n            return hour === 0 ? 12 : hour;\n        case NgxMatTimepickerPeriods.PM:\n            return hour === 12 ? 12 : hour - 12;\n        default:\n            return hour;\n    }\n}\n","export enum NgxMatTimepickerUnits {\n    HOUR,\n    MINUTE\n}\n","import { InjectionToken } from \"@angular/core\";\n//\nimport { NgxMatTimepickerAdapter } from \"../services/ngx-mat-timepicker-adapter\";\n\nexport const NGX_MAT_TIMEPICKER_LOCALE = new InjectionToken<string>(\"TimeLocale\", {\n    providedIn: \"root\",\n    factory: () => NgxMatTimepickerAdapter.defaultLocale\n});\n","import {NgxMatTimepickerClockFace} from \"../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerAdapter} from \"../services/ngx-mat-timepicker-adapter\";\nimport {NgxMatTimepickerFormat} from \"../models/ngx-mat-timepicker-format.enum\";\nimport {NgxMatTimepickerDisabledConfig} from \"../models/ngx-mat-timepicker-disabled-config.interface\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n// @dynamic\nexport class NgxMatTimepickerUtils {\n\n    static disableHours(hours: NgxMatTimepickerClockFace[], config: NgxMatTimepickerDisabledConfig): NgxMatTimepickerClockFace[] {\n        if (config.min || config.max) {\n\n            return hours.map(value => {\n                const hour = config.format === 24 ? value.time : NgxMatTimepickerAdapter.formatHour(value.time, config.format, config.period);\n                const currentTime = DateTime.fromObject({hour}).toFormat(NgxMatTimepickerFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"hours\")\n                };\n            });\n        }\n\n        return hours;\n    }\n\n    static disableMinutes(minutes: NgxMatTimepickerClockFace[], selectedHour: number, config: NgxMatTimepickerDisabledConfig) {\n        if (config.min || config.max) {\n\n            const hour = NgxMatTimepickerAdapter.formatHour(selectedHour, config.format, config.period);\n\n            return minutes.map(value => {\n                const currentTime = DateTime.fromObject({\n                    hour,\n                    minute: value.time\n                }).toFormat(NgxMatTimepickerFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"minutes\")\n                };\n            });\n        }\n\n        return minutes;\n    }\n\n    static getHours(format: number): NgxMatTimepickerClockFace[] {\n        return Array(format).fill(1).map((v, i) => {\n            const angleStep = 30;\n            const time = v + i;\n            const angle = angleStep * time;\n\n            return {time: time === 24 ? 0 : time, angle};\n        });\n    }\n\n    static getMinutes(gap = 1): NgxMatTimepickerClockFace[] {\n        const minutesCount = 60;\n        const angleStep = 360 / minutesCount;\n        const minutes = [];\n\n        for (let i = 0; i < minutesCount; i++) {\n            const angle = angleStep * i;\n            if (i % gap === 0) {\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n            }\n        }\n\n        return minutes;\n    }\n\n    static isDigit(e: KeyboardEvent) {\n        // Allow: backspace, delete, tab, escape, enter\n        if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n            // Allow: Ctrl/cmd+A\n            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n            // Allow: Ctrl/cmd+C\n            (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n            // Allow: Ctrl/cmd+X\n            (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n            // Allow: home, end, left, right, up, down\n            (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n            return true;\n        }\n        return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n    }\n\n\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewEncapsulation\n} from \"@angular/core\";\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\nimport {MatSelectChange} from \"@angular/material/select\";\nimport {ThemePalette} from \"@angular/material/core\";\nimport {FloatLabelType} from \"@angular/material/form-field\";\n//\nimport {NgxMatTimepickerService} from \"../../services/ngx-mat-timepicker.service\";\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerTheme} from \"../../models/ngx-mat-timepicker-theme.interface\";\nimport {NgxMatTimepickerAdapter} from \"../../services/ngx-mat-timepicker-adapter\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime} from \"ts-luxon\";\nimport {Observable, Subject} from \"rxjs\";\nimport {distinctUntilChanged, map, takeUntil, tap} from \"rxjs/operators\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-field\",\n    templateUrl: \"./ngx-mat-timepicker-field.component.html\",\n    styleUrls: [\"./ngx-mat-timepicker-field.component.scss\"],\n    providers: [\n        NgxMatTimepickerService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: NgxMatTimepickerFieldComponent,\n            multi: true\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxMatTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    @Input()\n    set defaultTime(val: string) {\n        this._defaultTime = val;\n        this._isDefaultTime = !!val;\n    }\n\n    get floatLabel(): FloatLabelType {\n        return this._floatLabel;\n    }\n\n    @Input()\n    set floatLabel(newValue: FloatLabelType) {\n        this._floatLabel = newValue;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        this.minHour = this._format === 12 ? 1 : 0;\n        this.maxHour = this._format === 12 ? 12 : 23;\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this._updateTime(this.timepickerTime);\n        }\n        this._previousFormat = this._format;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === \"string\") {\n            this._max = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\n\n            return;\n        }\n        this._max = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === \"string\") {\n            this._min = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\n\n            return;\n        }\n        this._min = value;\n    }\n\n    @Input()\n    cancelBtnTmpl: TemplateRef<Node>;\n\n    @Input()\n    clockTheme: NgxMatTimepickerTheme;\n\n    @Input()\n    confirmBtnTmpl: TemplateRef<Node>;\n\n    @Input()\n    controlOnly: boolean;\n\n    @Input() disabled: boolean;\n    hour$: Observable<NgxMatTimepickerClockFace>;\n\n    hoursList: NgxMatTimepickerClockFace[];\n    isChangePeriodDisabled: boolean;\n    isTimeRangeSet: boolean;\n    maxHour = 12;\n    minHour = 1;\n    minute$: Observable<NgxMatTimepickerClockFace>;\n    minutesList: NgxMatTimepickerClockFace[];\n    period: NgxMatTimepickerPeriods = NgxMatTimepickerPeriods.AM;\n    periods: NgxMatTimepickerPeriods[] = [\n        NgxMatTimepickerPeriods.AM,\n        NgxMatTimepickerPeriods.PM\n    ];\n\n    @Output() timeChanged = new EventEmitter<string>();\n    timepickerTime: string;\n\n    timeUnit = NgxMatTimepickerUnits;\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\n\n    private _color: ThemePalette = \"primary\";\n    private _defaultTime: string;\n    private _floatLabel: FloatLabelType = \"never\";\n    private _format = 12;\n    private _isDefaultTime: boolean;\n    private _isFirstTimeChange: boolean = true;\n    private _max: string | DateTime;\n    private _min: string | DateTime;\n    private _previousFormat: number;\n    private _selectedHour: number;\n    private _subsCtrl$ = new Subject();\n\n    constructor(private _timepickerService: NgxMatTimepickerService,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n    }\n\n    changeHour(hour: number): void {\n        this._timepickerService.hour = this.hoursList.find(h => h.time === hour);\n        this._changeTime();\n    }\n\n    changeMinute(minute: number): void {\n        this._timepickerService.minute = this.minutesList.find(m => m.time === minute);\n        this._changeTime();\n    }\n\n    changePeriod(event: MatSelectChange): void {\n        this._timepickerService.period = event.value as NgxMatTimepickerPeriods;\n        this._changeTime();\n    }\n\n    ngOnDestroy(): void {\n        this._subsCtrl$.next();\n        this._subsCtrl$.complete();\n    }\n\n    ngOnInit() {\n        this._initTime(this.defaultTime);\n\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n        this.minutesList = NgxMatTimepickerUtils.getMinutes();\n        this.isTimeRangeSet = !!(this.min || this.max);\n\n        this.hour$ = this._timepickerService.selectedHour.pipe(\n            tap((clockTime: NgxMatTimepickerClockFace) => this._selectedHour = clockTime.time),\n            map(this._changeDefaultTimeValue.bind(this)),\n            tap(() => this.isTimeRangeSet && this._updateAvailableMinutes())\n        ) as Observable<NgxMatTimepickerClockFace>;\n        this.minute$ = this._timepickerService.selectedMinute.pipe(\n            map(this._changeDefaultTimeValue.bind(this)),\n            tap(() => this._isFirstTimeChange = false)\n        ) as Observable<NgxMatTimepickerClockFace>;\n\n        if (this.format === 12) {\n            this._timepickerService.selectedPeriod.pipe(\n                distinctUntilChanged<NgxMatTimepickerPeriods>(),\n                tap((period: NgxMatTimepickerPeriods) => this.period = period),\n                tap(period => this.isChangePeriodDisabled = this._isPeriodDisabled(period)),\n                takeUntil(this._subsCtrl$)\n            ).subscribe(() => this.isTimeRangeSet && this._updateAvailableTime());\n        }\n\n    }\n\n    onTimeSet(time: string): void {\n        this._updateTime(time);\n        this._emitLocalTimeChange(time);\n    }\n\n    registerOnChange(fn: any): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(_fn_: any): void {\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    writeValue(val: string): void {\n        if (val) {\n            this._initTime(val);\n        }\n        else {\n            this._resetTime();\n        }\n    }\n\n    private _changeDefaultTimeValue(clockFaceTime: NgxMatTimepickerClockFace): NgxMatTimepickerClockFace {\n        if (!this._isDefaultTime && this._isFirstTimeChange) {\n            return {...clockFaceTime, time: null};\n        }\n\n        return clockFaceTime;\n    }\n\n    private _changeTime(): void {\n        const time = this._timepickerService.getFullTime(this.format);\n        this.timepickerTime = time;\n\n        this._emitLocalTimeChange(time);\n    }\n\n    private _emitLocalTimeChange(time: string): void {\n        const localTime = NgxMatTimepickerAdapter.toLocaleTimeString(time, {format: this.format, locale: this._locale});\n\n        this._onChange(localTime);\n        this.timeChanged.emit(localTime);\n    }\n\n    private _initTime(time): void {\n        const isDefaultTimeAvailable = NgxMatTimepickerAdapter\n        .isTimeAvailable(time, this.min as DateTime, this.max as DateTime, \"minutes\", null, this.format);\n        if (!isDefaultTimeAvailable) {\n            if (this.min) {\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.min as DateTime, this.format));\n\n                return;\n            }\n            if (this.max) {\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.max as DateTime, this.format));\n\n                return;\n            }\n        }\n        this._updateTime(time);\n    }\n\n    private _isPeriodDisabled(period): boolean {\n        return NgxMatTimepickerUtils.disableHours(NgxMatTimepickerUtils.getHours(12), {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: 12,\n            period: period === NgxMatTimepickerPeriods.AM ? NgxMatTimepickerPeriods.PM : NgxMatTimepickerPeriods.AM\n        }).every(time => time.disabled);\n    }\n\n    private _onChange: (value: string) => void = () => {\n    }\n\n    private _resetTime(): void {\n        this._timepickerService.hour = {angle: 0, time: null};\n        this._timepickerService.minute = {angle: 0, time: null};\n    }\n\n    private _updateAvailableHours(): void {\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private _updateAvailableMinutes(): void {\n        this.minutesList = NgxMatTimepickerUtils.disableMinutes(this.minutesList, this._selectedHour, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private _updateAvailableTime(): void {\n        this._updateAvailableHours();\n        if (this._selectedHour) {\n            this._updateAvailableMinutes();\n        }\n    }\n\n    private _updateTime(time: string): void {\n        if (time) {\n            const formattedTime = NgxMatTimepickerAdapter.formatTime(time, {locale: this._locale, format: this.format});\n            this._timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min as DateTime, this.max as DateTime, this.format);\n            this.timepickerTime = formattedTime;\n        }\n    }\n\n}\n","import {Directive} from \"@angular/core\";\n\n/* To override a default toggle icon */\n@Directive({selector: \"[ngxMatTimepickerToggleIcon]\"})\n\nexport class NgxMatTimepickerToggleIconDirective {\n}\n","import {Injectable} from \"@angular/core\";\n//\nimport {Observable, Subject} from \"rxjs\";\nimport {shareReplay} from \"rxjs/operators\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class NgxMatTimepickerEventService {\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this._backdropClick$.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this._keydownEvent$.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    private _backdropClick$: Subject<MouseEvent> = new Subject();\n    private _keydownEvent$: Subject<KeyboardEvent> = new Subject();\n\n    constructor() {\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case \"click\":\n                this._backdropClick$.next(event as MouseEvent);\n                break;\n            case \"keydown\":\n                this._keydownEvent$.next(event as KeyboardEvent);\n                break;\n            default:\n                throw new Error(\"no such event type\");\n        }\n    }\n\n}\n","import {InjectionToken, Provider} from \"@angular/core\";\n//\nimport {NgxMatTimepickerConfig} from \"../models/ngx-mat-timepicker-config.interface\";\n\nexport const NGX_MAT_TIMEPICKER_CONFIG = new InjectionToken<NgxMatTimepickerConfig>(\"NGX_MAT_TIMEPICKER_CONFIG\");\n\nexport function provideNgxMatTimepickerOptions(config: NgxMatTimepickerConfig): Provider[] {\n    return [\n        {provide: NGX_MAT_TIMEPICKER_CONFIG, useValue: config},\n    ];\n}\n","import {Directive, HostListener, Inject, Input, OnDestroy, OnInit, Optional} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerEventService} from \"../services/ngx-mat-timepicker-event.service\";\nimport {NgxMatTimepickerService} from \"../services/ngx-mat-timepicker.service\";\nimport {NgxMatTimepickerAdapter} from \"../services/ngx-mat-timepicker-adapter\";\n//\nimport {NgxMatTimepickerUnits} from \"../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerClockFace} from \"../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerPeriods} from \"../models/ngx-mat-timepicker-periods.enum\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NGX_MAT_TIMEPICKER_CONFIG} from \"../tokens/ngx-mat-timepicker-config.token\";\n//\nimport {Observable, Subject} from \"rxjs\";\nimport {shareReplay, takeUntil} from \"rxjs/operators\";\n\n@Directive({\n    selector: \"[ngxMatTimepickerBase]\"\n})\nexport class NgxMatTimepickerBaseDirective implements OnInit, OnDestroy {\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    @Input()\n    set defaultTime(time: string) {\n        this._defaultTime = time;\n        this._setDefaultTime(time);\n    }\n\n    activeTimeUnit: NgxMatTimepickerUnits = NgxMatTimepickerUnits.HOUR;\n    selectedHour: Observable<NgxMatTimepickerClockFace>;\n    selectedMinute: Observable<NgxMatTimepickerClockFace>;\n    selectedPeriod: Observable<NgxMatTimepickerPeriods>;\n    timeUnit: typeof NgxMatTimepickerUnits = NgxMatTimepickerUnits;\n\n    protected _color: ThemePalette = \"primary\";\n    protected _defaultTime: string;\n    protected _subsCtrl$ = new Subject();\n\n    constructor(protected _timepickerSrv: NgxMatTimepickerService,\n                protected _eventSrv: NgxMatTimepickerEventService,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) protected _locale: string,\n                @Inject(NGX_MAT_TIMEPICKER_CONFIG) @Optional() public data) {\n\n        this.color = data.color;\n        this.defaultTime = data.defaultTime;\n    }\n\n    changePeriod(period: NgxMatTimepickerPeriods): void {\n        this._timepickerSrv.period = period;\n        this._onTimeChange();\n    }\n\n    changeTimeUnit(unit: NgxMatTimepickerUnits): void {\n        this.activeTimeUnit = unit;\n    }\n\n    close(): void {\n        this.data.timepickerBaseRef.close();\n    }\n\n    ngOnDestroy(): void {\n        this._subsCtrl$.next();\n        this._subsCtrl$.complete();\n    }\n\n    ngOnInit(): void {\n        this._defineTime();\n        this.selectedHour = this._timepickerSrv.selectedHour\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n        this.selectedMinute = this._timepickerSrv.selectedMinute\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n        this.selectedPeriod = this._timepickerSrv.selectedPeriod\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n        this.data.timepickerBaseRef.timeUpdated.pipe(takeUntil(this._subsCtrl$))\n            .subscribe(this._setDefaultTime.bind(this));\n    }\n\n    onHourChange(hour: NgxMatTimepickerClockFace): void {\n        this._timepickerSrv.hour = hour;\n        this._onTimeChange();\n    }\n\n    onHourSelected(hour: number): void {\n        if (!this.data.hoursOnly) {\n            this.changeTimeUnit(NgxMatTimepickerUnits.MINUTE);\n        }\n        this.data.timepickerBaseRef.hourSelected.next(hour);\n    }\n\n    @HostListener(\"keydown\", [\"$event\"])\n    onKeydown(e: any): void {\n        this._eventSrv.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    onMinuteChange(minute: NgxMatTimepickerClockFace): void {\n        this._timepickerSrv.minute = minute;\n        this._onTimeChange();\n    }\n\n    setTime(): void {\n        this.data.timepickerBaseRef.timeSet.next(this._timepickerSrv.getFullTime(this.data.format));\n        this.close();\n    }\n\n    protected _defineTime(): void {\n        const minTime = this.data.minTime;\n\n        if (minTime && (!this.data.time && !this.data.defaultTime)) {\n            const time = NgxMatTimepickerAdapter.fromDateTimeToString(minTime, this.data.format);\n\n            this._setDefaultTime(time);\n        }\n    }\n\n    protected _onTimeChange(): void {\n        const time = NgxMatTimepickerAdapter.toLocaleTimeString(this._timepickerSrv.getFullTime(this.data.format), {\n            locale: this._locale,\n            format: this.data.format\n        });\n\n        this.data.timepickerBaseRef.timeChanged.emit(time);\n    }\n\n    protected _setDefaultTime(time: string): void {\n        this._timepickerSrv.setDefaultTimeIfAvailable(\n            time, this.data.minTime, this.data.maxTime, this.data.format, this.data.minutesGap);\n    }\n}\n","import {Component, Inject, OnDestroy, OnInit, ViewEncapsulation} from \"@angular/core\";\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\n//\nimport {NgxMatTimepickerBaseDirective} from \"../../directives/ngx-mat-timepicker-base.directive\";\nimport {NgxMatTimepickerConfig} from \"../../models/ngx-mat-timepicker-config.interface\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerService} from \"../../services/ngx-mat-timepicker.service\";\nimport {NgxMatTimepickerEventService} from \"../../services/ngx-mat-timepicker-event.service\";\n\n//\n\n@Component({\n    selector: \"ngx-mat-timepicker-dialog\",\n    styleUrls: [\"./ngx-mat-timepicker-dialog.component.scss\"],\n    templateUrl: \"./ngx-mat-timepicker-dialog.component.html\",\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxMatTimepickerDialogComponent extends NgxMatTimepickerBaseDirective {\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: NgxMatTimepickerConfig,\n                protected _dialogRef: MatDialogRef<NgxMatTimepickerDialogComponent>,\n                timepickerSrv: NgxMatTimepickerService,\n                eventSrv: NgxMatTimepickerEventService,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) locale: string) {\n\n        super(timepickerSrv, eventSrv, locale, data);\n    }\n\n    close(): void {\n        this._dialogRef.close();\n    }\n\n}\n","import {Component, EventEmitter, HostBinding, Input, Output, TemplateRef, ViewContainerRef} from \"@angular/core\";\nimport {CdkOverlayOrigin, ConnectedPosition, Overlay, OverlayRef} from \"@angular/cdk/overlay\";\nimport {MatDialog, MatDialogRef} from \"@angular/material/dialog\";\nimport {ThemePalette} from \"@angular/material/core\";\nimport {SmpDomService} from \"smp-core-utils\";\n//\nimport {NgxMatTimepickerEventService} from \"../../services/ngx-mat-timepicker-event.service\";\nimport {NgxMatTimepickerDirective} from \"../../directives/ngx-mat-timepicker.directive\";\nimport {NgxMatTimepickerRef} from \"../../models/ngx-mat-timepicker-ref.interface\";\nimport {NgxMatTimepickerTheme} from \"../../models/ngx-mat-timepicker-theme.interface\";\nimport {NgxMatTimepickerDialogComponent} from \"../ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component\";\nimport {NGX_MAT_TIMEPICKER_CONFIG} from \"../../tokens/ngx-mat-timepicker-config.token\";\n//\nimport {DateTime} from \"ts-luxon\";\nimport {Subject} from \"rxjs\";\n\nlet config;\n\n@Component({\n    selector: \"ngx-mat-timepicker\",\n    template: `\n\t\t<ng-template\n\t\t\t\tcdkConnectedOverlay\n\t\t\t\t[cdkConnectedOverlayPositions]=\"overlayPositions\"\n\t\t\t\t[cdkConnectedOverlayHasBackdrop]=\"!0\"\n\t\t\t\tcdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n\t\t\t\t(backdropClick)=\"close()\"\n\t\t\t\t[cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n\t\t\t\t[cdkConnectedOverlayOpen]=\"showPicker\">\n\t\t\t<ngx-mat-timepicker-standalone></ngx-mat-timepicker-standalone>\n\t\t</ng-template>`,\n    providers: [\n        {\n            provide: NGX_MAT_TIMEPICKER_CONFIG, useFactory() {\n                return config;\n            }\n        }\n    ]\n})\nexport class NgxMatTimepickerComponent implements NgxMatTimepickerRef {\n\n    static nextId: number = 0;\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    get disabled(): boolean {\n        return this._timepickerInput && this._timepickerInput.disabled;\n    }\n\n    get format(): number {\n        return this._timepickerInput ? this._timepickerInput.format : this._format;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get inputElement(): HTMLElement {\n        return this._timepickerInput && this._timepickerInput.element;\n    }\n\n    get maxTime(): DateTime {\n        return this._timepickerInput ? (this._timepickerInput.max as DateTime) : this.max;\n    }\n\n    get minTime(): DateTime {\n        return this._timepickerInput ? (this._timepickerInput.min as DateTime) : this.min;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Input()\n    set minutesGap(gap: number) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get overlayOrigin(): CdkOverlayOrigin {\n        return this._timepickerInput ? this._timepickerInput.cdkOverlayOrigin : void 0;\n    }\n\n    get time(): string {\n        return this._timepickerInput && this._timepickerInput.value;\n    }\n\n    set ngxMatTimepickerTheme(newValue: NgxMatTimepickerTheme) {\n        this._ngxMatTimepickerTheme = newValue;\n    }\n\n    @Input() appendToInput: boolean;\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Output() closed = new EventEmitter<void>();\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input() defaultTime: string;\n    @Input() disableAnimation: boolean;\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() enableKeyboardInput: boolean;\n    @Output() hourSelected = new EventEmitter<number>();\n    @Input() hoursOnly = false;\n    @HostBinding(\"id\") id: string = `ngx_mat_timepicker_${++NgxMatTimepickerComponent.nextId}`;\n    @Input() isEsc = !0;\n    @Input() max: DateTime;\n    @Input() min: DateTime;\n    @Output() opened = new EventEmitter<void>();\n    overlayPositions: ConnectedPosition[] = [\n        {\n            originX: \"center\",\n            originY: \"bottom\",\n            overlayX: \"center\",\n            overlayY: \"top\",\n            offsetY: 0\n        },\n        {\n            originX: \"center\",\n            originY: \"top\",\n            overlayX: \"center\",\n            overlayY: \"bottom\",\n            offsetY: 0\n        }\n    ];\n    @Input() preventOverlayClick: boolean;\n    showPicker: boolean = !1;\n    @Input() theme: NgxMatTimepickerTheme;\n    @Output() timeChanged = new EventEmitter<string>();\n    @Input() timepickerClass: string;\n    @Output() timeSet = new EventEmitter<string>();\n    timeUpdated = new Subject<string>(); // used in the dialog, check if a better approach can be used\n\n    private _color: ThemePalette = \"primary\";\n    private _dialogRef: MatDialogRef<NgxMatTimepickerDialogComponent, void>;\n    private _format: number;\n    private _minutesGap: number;\n    private _ngxMatTimepickerTheme: NgxMatTimepickerTheme;\n    private _overlayRef: OverlayRef;\n    private _timepickerInput: NgxMatTimepickerDirective;\n\n    constructor(\n        private _vcr: ViewContainerRef,\n        private _eventService: NgxMatTimepickerEventService,\n        private _dialog: MatDialog,\n        private _overlay: Overlay,\n        private _domService: SmpDomService) {\n    }\n\n    close(): void {\n        if (this.appendToInput) {\n            this._overlayRef && this._overlayRef.dispose();\n        }\n        else {\n            this._dialogRef && this._dialogRef.close();\n        }\n        this.showPicker = !1;\n        this.closed.emit();\n    }\n\n    open(): void {\n        config = {\n            timepickerBaseRef: this,\n            time: this.time,\n            defaultTime: this.defaultTime,\n            maxTime: this.maxTime,\n            minTime: this.minTime,\n            format: this.format,\n            minutesGap: this.minutesGap,\n            disableAnimation: this.disableAnimation,\n            cancelBtnTmpl: this.cancelBtnTmpl,\n            confirmBtnTmpl: this.confirmBtnTmpl,\n            editableHintTmpl: this.editableHintTmpl,\n            disabled: this.disabled,\n            enableKeyboardInput: this.enableKeyboardInput,\n            preventOverlayClick: this.preventOverlayClick,\n            appendToInput: this.appendToInput,\n            hoursOnly: this.hoursOnly,\n            theme: this.theme || this._ngxMatTimepickerTheme,\n            timepickerClass: this.timepickerClass,\n            inputElement: this.inputElement,\n            color: this.color\n        };\n\n        if (this.appendToInput) {\n            this.showPicker = !0;\n        }\n        else {\n            this._dialogRef = this._dialog.open(NgxMatTimepickerDialogComponent, {\n                panelClass: \"ngx-mat-timepicker-dialog\",\n                data: {\n                    ...config\n                }\n            });\n            this._dialogRef\n                .afterClosed()\n                .subscribe(() => {\n                    this.closed.emit();\n                });\n        }\n        this.opened.emit();\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: NgxMatTimepickerDirective): void {\n        if (this._timepickerInput) {\n            throw Error(\"A Timepicker can only be associated with a single input.\");\n        }\n        this._timepickerInput = input;\n    }\n\n    unregisterInput(): void {\n        this._timepickerInput = void 0;\n    }\n\n    updateTime(time: string): void {\n        this.timeUpdated.next(time);\n    }\n}\n","import {Component, ContentChild, Input} from \"@angular/core\";\nimport {NgxMatTimepickerToggleIconDirective} from \"../../directives/ngx-mat-timepicker-toggle-icon.directive\";\nimport {NgxMatTimepickerComponent} from \"../ngx-mat-timepicker/ngx-mat-timepicker.component\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-toggle\",\n    templateUrl: \"ngx-mat-timepicker-toggle.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-toggle.component.scss\"]\n})\n\nexport class NgxMatTimepickerToggleComponent {\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    @ContentChild(NgxMatTimepickerToggleIconDirective, {static: true}) customIcon: NgxMatTimepickerToggleIconDirective;\n\n    @Input(\"for\") timepicker: NgxMatTimepickerComponent;\n\n    private _disabled: boolean;\n\n    open(event): void {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    HostListener,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges, Optional\n} from \"@angular/core\";\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\n//\nimport {NgxMatTimepickerComponent} from \"../components/ngx-mat-timepicker/ngx-mat-timepicker.component\";\nimport {NgxMatTimepickerAdapter} from \"../services/ngx-mat-timepicker-adapter\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\n//\nimport {DateTime} from \"ts-luxon\";\nimport {Subject} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\nimport {CdkOverlayOrigin} from \"@angular/cdk/overlay\";\nimport {MatFormField} from \"@angular/material/form-field\";\n\n@Directive({\n    selector: \"[ngxMatTimepicker]\",\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: NgxMatTimepickerDirective,\n            multi: true\n        }\n    ],\n    // tslint:disable-next-line:no-host-metadata-property\n    host: {\n        \"[disabled]\": \"disabled\",\n        \"(blur)\": \"onTouched()\",\n    },\n})\nexport class NgxMatTimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    get element(): HTMLElement {\n        return this._elementRef && this._elementRef.nativeElement;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = +value === 24 ? 24 : 12;\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.value = this._value;\n            this._timepicker.updateTime(this._value);\n        }\n        this._previousFormat = this._format;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === \"string\") {\n            this._max = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\n\n            return;\n        }\n        this._max = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === \"string\") {\n            this._min = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\n\n            return;\n        }\n        this._min = value;\n    }\n\n    @Input(\"ngxMatTimepicker\")\n    set timepicker(picker: NgxMatTimepickerComponent) {\n        this._registerTimepicker(picker);\n    }\n\n    get value(): string {\n        if (!this._value) {\n            return \"\";\n        }\n\n        return NgxMatTimepickerAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this._locale});\n    }\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = \"\";\n            this._updateInputValue();\n\n            return;\n        }\n        const time = NgxMatTimepickerAdapter.formatTime(value, {locale: this._locale, format: this.format});\n        const isAvailable = NgxMatTimepickerAdapter.isTimeAvailable(\n            time,\n            this._min as DateTime,\n            this._max as DateTime,\n            \"minutes\",\n            this._timepicker.minutesGap,\n            this._format\n        );\n\n        if (isAvailable) {\n            this._value = time;\n            this._updateInputValue();\n\n            return;\n        }\n        console.warn(\"Selected time doesn't match min or max value\");\n    }\n\n    private set _defaultTime(time: string) {\n        this._timepicker.defaultTime = NgxMatTimepickerAdapter.formatTime(time, {\n            locale: this._locale,\n            format: this.format\n        });\n    }\n\n    // TODO: IMPROVE DETECTING (INJECT) MAT-FORM-FIELD IF PRESENT\n    @HostBinding(\"attr.cdkOverlayOrigin\") cdkOverlayOrigin: CdkOverlayOrigin =\n        new CdkOverlayOrigin(this._matFormField ? this._matFormField.getConnectedOverlayOrigin() : this._elementRef);\n    @Input() disableClick: boolean;\n    @Input() disabled: boolean;\n\n    private _format = 12;\n    private _max: string | DateTime;\n    private _min: string | DateTime;\n    private _previousFormat: number;\n    private _subsCtrl$: Subject<void> = new Subject<void>();\n    private _timepicker: NgxMatTimepickerComponent;\n    private _value: string = \"\";\n\n    constructor(private _elementRef: ElementRef,\n                @Optional() @Inject(MatFormField) private _matFormField: MatFormField,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && changes.value.currentValue) {\n            this._defaultTime = changes.value.currentValue;\n        }\n    }\n\n    ngOnDestroy() {\n        this._unregisterTimepicker();\n        this._subsCtrl$.next();\n        this._subsCtrl$.complete();\n    }\n\n    @HostListener(\"click\", [\"$event\"])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    onTouched = () => {\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    @HostListener(\"change\", [\"$event\"])\n    updateValue(value: string) {\n        this.value = value;\n        this._onChange(value);\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        if (value) {\n            this._defaultTime = value;\n        }\n    }\n\n    private _onChange: (value: any) => void = () => {\n    }\n\n    private _registerTimepicker(picker: NgxMatTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this._timepicker.timeSet\n                .pipe(takeUntil(this._subsCtrl$))\n                .subscribe((time: string) => {\n                    this.value = time;\n                    this._onChange(this.value);\n                    this.onTouched();\n                    this._defaultTime = this._value;\n                });\n        }\n        else {\n            throw new Error(\"NgxMatTimepickerComponent is not defined.\" +\n                \" Please make sure you passed the timepicker to ngxMatTimepicker directive\");\n        }\n    }\n\n    private _unregisterTimepicker(): void {\n        if (this._timepicker) {\n            this._timepicker.unregisterInput();\n        }\n    }\n\n    private _updateInputValue(): void {\n        this._elementRef.nativeElement.value = this.value;\n    }\n\n}\n\n","import {AfterViewInit, Directive, ElementRef, Input} from \"@angular/core\";\nimport {NgxMatTimepickerTheme} from \"../models/ngx-mat-timepicker-theme.interface\";\n\n@Directive({selector: \"[ngxMatTimepickerTheme]\"})\nexport class NgxMatTimepickerThemeDirective implements AfterViewInit {\n\n    @Input(\"ngxMatTimepickerTheme\")\n    theme: NgxMatTimepickerTheme;\n\n    private _element: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        this._element = elementRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n        if (this.theme) {\n            this.setTheme(this.theme);\n        }\n    }\n\n    private setTheme(theme): void {\n        for (const val in theme) {\n            if (theme.hasOwnProperty(val)) {\n                if (typeof theme[val] === \"string\") {\n                    for (const prop in theme) {\n                        if (theme.hasOwnProperty(prop)) {\n                            this._element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n                        }\n                    }\n\n                    return;\n                }\n                this.setTheme(theme[val]);\n            }\n\n        }\n    }\n}\n\nfunction camelCaseToDash(myStr) {\n    return myStr.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n","import {Directive, EventEmitter, Input, Optional, Output} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n@Directive({\n    selector: \"[ngxMatTimepickerHoursFace]\"\n})\nexport class NgxMatTimepickerHoursFaceDirective {\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input()\n    set format(newValue: 12 | 24) {\n        this._format = newValue;\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n    }\n\n    get format(): 12 | 24 {\n        return this._format;\n    }\n\n    @Output() hourChange = new EventEmitter<NgxMatTimepickerClockFace>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    hoursList: NgxMatTimepickerClockFace[] = [];\n    @Input() maxTime: DateTime;\n    @Input() minTime: DateTime;\n    @Input() selectedHour: NgxMatTimepickerClockFace;\n\n    protected _color: ThemePalette = \"primary\";\n    protected _format: 12 | 24 = 24;\n\n    constructor() {\n    }\n\n    onTimeSelected(time: number): void {\n        this.hourSelected.next(time);\n    }\n}\n","import {AfterContentInit, ChangeDetectionStrategy, Component} from \"@angular/core\";\n//\nimport {NgxMatTimepickerHoursFaceDirective} from \"../ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-24-hours-face\",\n    templateUrl: \"ngx-mat-timepicker-24-hours-face.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMatTimepicker24HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective implements AfterContentInit {\n\n    constructor() {\n        super();\n        this.format = 24;\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import {ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges} from \"@angular/core\";\n//\nimport {NgxMatTimepickerHoursFaceDirective} from \"../ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive\";\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-12-hours-face\",\n    templateUrl: \"ngx-mat-timepicker-12-hours-face.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMatTimepicker12HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective implements OnChanges {\n\n    @Input() period: NgxMatTimepickerPeriods;\n\n    constructor() {\n        super();\n        this.format = 12;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.period && changes.period.currentValue) {\n            this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-minutes-face\",\n    templateUrl: \"./ngx-mat-timepicker-minutes-face.component.html\"\n})\nexport class NgxMatTimepickerMinutesFaceComponent implements OnChanges {\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input() format: number;\n    @Input() maxTime: DateTime;\n    @Input() minTime: DateTime;\n\n    @Output() minuteChange = new EventEmitter<NgxMatTimepickerClockFace>();\n    @Input() minutesGap: number;\n\n    minutesList: NgxMatTimepickerClockFace[] = [];\n    @Input() period: NgxMatTimepickerPeriods;\n    @Input() selectedHour: number;\n\n    @Input() selectedMinute: NgxMatTimepickerClockFace;\n    timeUnit = NgxMatTimepickerUnits;\n\n    private _color: ThemePalette = \"primary\";\n\n    constructor() {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.period && changes.period.currentValue) {\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\n            this.minutesList = NgxMatTimepickerUtils.disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\n\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    }\n    else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    }\n    else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    }\n    else {// I quarter\n        return currentAngle;\n    }\n}\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: \"75px\",\n        top: \"calc(50% - 75px)\"\n    },\n    large: {\n        height: \"103px\",\n        top: \"calc(50% - 103px)\"\n    }\n};\n\n@Component({\n    selector: \"ngx-mat-timepicker-face\",\n    templateUrl: \"./ngx-mat-timepicker-face.component.html\",\n    styleUrls: [\"./ngx-mat-timepicker-face.component.scss\"],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMatTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    @ViewChild(\"clockFace\", {static: true}) clockFace: ElementRef;\n    @ViewChild(\"clockHand\", {static: true, read: ElementRef}) clockHand: ElementRef;\n\n    @Input()\n    color: ThemePalette = \"primary\";\n\n    @Input()\n    faceTime: NgxMatTimepickerClockFace[];\n\n    @Input()\n    format: number;\n\n    innerClockFaceSize = 85;\n    isClockFaceDisabled: boolean;\n\n    @Input()\n    minutesGap: number;\n\n    @Input()\n    selectedTime: NgxMatTimepickerClockFace;\n\n\n    @Output()\n    timeChange = new EventEmitter<NgxMatTimepickerClockFace>();\n\n    @Output()\n    timeSelected = new EventEmitter<number>();\n\n    timeUnit = NgxMatTimepickerUnits;\n\n    @Input()\n    unit: NgxMatTimepickerUnits;\n\n    private _isStarted: boolean;\n    private _touchEndHandler: () => any;\n    private _touchStartHandler: () => any;\n\n    ngAfterViewInit() {\n        this._setClockHandPosition();\n        this._addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes.faceTime;\n        const selectedTimeChanges = changes.selectedTime;\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this._setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this._selectAvailableTime());\n        }\n    }\n\n    ngOnDestroy() {\n        this._removeTouchEvents();\n    }\n\n    @HostListener(\"mousedown\", [\"$event\"])\n    onMousedown(e: any) {\n        e.preventDefault();\n        this._isStarted = true;\n    }\n\n    @HostListener(\"mouseup\", [\"$event\"])\n    onMouseup(e: any) {\n        e.preventDefault();\n        this._isStarted = false;\n    }\n\n    @HostListener(\"click\", [\"$event\"])\n    @HostListener(\"touchmove\", [\"$event.changedTouches[0]\"])\n    @HostListener(\"touchend\", [\"$event.changedTouches[0]\"])\n    @HostListener(\"mousemove\", [\"$event\"])\n    selectTime(e: any): void {\n\n        if (!this._isStarted && (e instanceof MouseEvent && e.type !== \"click\")) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this._isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === NgxMatTimepickerUnits.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\n        const roundedAngle = roundAngle(circleAngle, angleStep);\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this._isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n\n    }\n\n\n    trackByTime(_item_, time: NgxMatTimepickerClockFace): string | number {\n        return time.time;\n    }\n\n    private _addTouchEvents(): void {\n        this._touchStartHandler = this.onMousedown.bind(this);\n        this._touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener(\"touchstart\", this._touchStartHandler);\n        this.clockFace.nativeElement.addEventListener(\"touchend\", this._touchEndHandler);\n    }\n\n    private _decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private _increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n\n    private _isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private _removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener(\"touchstart\", this._touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener(\"touchend\", this._touchEndHandler);\n    }\n\n    private _selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private _setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this._decreaseClockHand();\n            }\n            else {\n                this._increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    TemplateRef\n} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime, Info} from \"ts-luxon\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-dial\",\n    templateUrl: \"ngx-mat-timepicker-dial.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-dial.component.scss\"],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMatTimepickerDialComponent implements OnChanges {\n\n    @Input() activeTimeUnit: NgxMatTimepickerUnits;\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() format: number;\n    @Input() hour: number | string;\n    @Output() hourChanged = new EventEmitter<NgxMatTimepickerClockFace>();\n\n    hours: NgxMatTimepickerClockFace[];\n    @Input() hoursOnly: boolean;\n    @Input() isEditable: boolean;\n\n    isHintVisible: boolean;\n    @Input() maxTime: DateTime;\n    meridiems = Info.meridiems({locale: this._locale});\n    @Input() minTime: DateTime;\n    @Input() minute: number | string;\n    @Output() minuteChanged = new EventEmitter<NgxMatTimepickerClockFace>();\n    minutes: NgxMatTimepickerClockFace[];\n    @Input() minutesGap: number;\n    @Input() period: NgxMatTimepickerPeriods;\n\n    @Output() periodChanged = new EventEmitter<NgxMatTimepickerPeriods>();\n\n    timeUnit = NgxMatTimepickerUnits;\n    @Output() timeUnitChanged = new EventEmitter<NgxMatTimepickerUnits>();\n\n    private _color: ThemePalette = \"primary\";\n\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n    }\n\n    changeHour(hour: NgxMatTimepickerClockFace): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: NgxMatTimepickerClockFace): void {\n        this.minuteChanged.next(minute);\n    }\n\n    changePeriod(period: NgxMatTimepickerPeriods): void {\n        this.periodChanged.next(period);\n    }\n\n    changeTimeUnit(unit: NgxMatTimepickerUnits): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    hideHint(): void {\n        this.isHintVisible = false;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const periodChanged = changes.period && changes.period.currentValue;\n        if (periodChanged || changes.format && changes.format.currentValue) {\n            const hours = NgxMatTimepickerUtils.getHours(this.format);\n\n            this.hours = NgxMatTimepickerUtils.disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (periodChanged || changes.hour && changes.hour.currentValue) {\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\n\n            this.minutes = NgxMatTimepickerUtils.disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    showHint(): void {\n        this.isHintVisible = true;\n    }\n}\n","export enum NgxMatTimepickerMeasure {\n    hour = \"hour\",\n    minute = \"minute\"\n}\n","import {Inject, Injectable, Pipe, PipeTransform} from \"@angular/core\";\n//\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerUnits} from \"../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerMeasure} from \"../models/ngx-mat-timepicker-measures.enum\";\n//\nimport {DateTime, NumberingSystem} from \"ts-luxon\";\n\n@Pipe({\n    name: \"ngxMatTimepickerParser\"\n})\n@Injectable()\nexport class NgxMatTimepickerParserPipe implements PipeTransform {\n\n    private readonly _numberingSystem: NumberingSystem;\n\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n        this._numberingSystem = DateTime.local().setLocale(this._locale).resolvedLocaleOpts().numberingSystem as NumberingSystem;\n    }\n\n    transform(time: string | number, timeUnit = NgxMatTimepickerUnits.HOUR): string {\n        if (time == null || time === \"\") {\n            return \"\";\n        }\n\n        if (!isNaN(+time)) {\n            return `${time}`;\n        }\n\n        if (timeUnit === NgxMatTimepickerUnits.MINUTE) {\n            return this._parseTime(time, \"mm\", NgxMatTimepickerMeasure.minute).toString();\n        }\n\n        return this._parseTime(time, \"HH\", NgxMatTimepickerMeasure.hour).toString();\n    }\n\n    private _parseTime(time: string | number, format: string, timeMeasure: NgxMatTimepickerMeasure): number {\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this._numberingSystem})[timeMeasure];\n        if (!isNaN(parsedTime)) {\n            return parsedTime;\n        }\n\n        throw new Error(`Cannot parse time - ${time}`);\n    }\n\n}\n","import {Component, EventEmitter, OnDestroy, Input, Output, ElementRef, AfterViewInit} from \"@angular/core\";\n//\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerParserPipe} from \"../../pipes/ngx-mat-timepicker-parser.pipe\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n\nfunction retainSelection() {\n    this.selectionStart = this.selectionEnd;\n}\n\n@Component({\n    selector: \"ngx-mat-timepicker-dial-control\",\n    templateUrl: \"ngx-mat-timepicker-dial-control.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-dial-control.component.scss\"],\n    providers: [NgxMatTimepickerParserPipe]\n})\nexport class NgxMatTimepickerDialControlComponent implements AfterViewInit, OnDestroy {\n\n    private get _selectedTime(): NgxMatTimepickerClockFace {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    @Input()\n    disabled: boolean;\n\n    @Output()\n    focused = new EventEmitter<void>();\n\n    @Input()\n    isActive: boolean;\n\n    @Input()\n    isEditable: boolean;\n\n    @Input()\n    minutesGap: number;\n\n    previousTime: number | string;\n\n    @Input()\n    time: string;\n\n    @Output()\n    timeChanged = new EventEmitter<NgxMatTimepickerClockFace>();\n\n    @Input()\n    timeList: NgxMatTimepickerClockFace[];\n\n    @Input()\n    timeUnit: NgxMatTimepickerUnits;\n\n    @Output()\n    timeUnitChanged = new EventEmitter<NgxMatTimepickerUnits>();\n\n    @Output()\n    unfocused = new EventEmitter<void>();\n\n    constructor(private _elRef: ElementRef, private _timeParserPipe: NgxMatTimepickerParserPipe) {\n    }\n\n    changeTimeByKeyboard(e: any): void {\n        const char = String.fromCharCode(e.keyCode);\n\n        if (isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        this._elRef.nativeElement.querySelector(\"input\").addEventListener(\"select\", retainSelection, false);\n    }\n\n    ngOnDestroy(): void {\n        this._elRef.nativeElement.querySelector(\"input\").removeEventListener(\"select\", retainSelection);\n    }\n\n    onKeydown(e: any): void {\n        if (!NgxMatTimepickerUtils.isDigit(e)) {\n            e.preventDefault();\n        }\n        else {\n            this._changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = this._timeParserPipe.transform(value, this.timeUnit);\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: NgxMatTimepickerUnits): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n\n    updateTime(): void {\n        if (this._selectedTime) {\n            this.timeChanged.next(this._selectedTime);\n            this.previousTime = this._selectedTime.time;\n        }\n    }\n\n    private _addTime(amount: number): string {\n        return `0${+this.time + amount}`.substr(-2);\n    }\n\n    private _changeTimeByArrow(keyCode: number): void {\n        let time: string;\n\n        // arrow up\n        if (keyCode === 38) {\n            time = this._addTime(this.minutesGap || 1);\n        }\n        // arrow down\n        else if (keyCode === 40) {\n            time = this._addTime(-1 * (this.minutesGap || 1));\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: NgxMatTimepickerClockFace[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: NgxMatTimepickerClockFace[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {animate, sequence, style, transition, trigger} from \"@angular/animations\";\n//\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-period\",\n    templateUrl: \"ngx-mat-timepicker-period.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-period.component.scss\"],\n    animations: [\n        trigger(\"scaleInOut\", [\n            transition(\":enter\", [\n                style({transform: \"scale(0)\"}),\n                animate(\".2s\", style({transform: \"scale(1)\"})),\n                sequence([\n                    animate(\"3s\", style({opacity: 1})),\n                    animate(\".3s\", style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMatTimepickerPeriodComponent {\n\n    @Input() activeTimeUnit: NgxMatTimepickerUnits;\n    @Input() format: number;\n    @Input() hours: NgxMatTimepickerClockFace[];\n    isPeriodAvailable = true;\n    @Input() maxTime: DateTime;\n    @Input() meridiems: string[];\n    @Input() minTime: DateTime;\n    @Input() minutes: NgxMatTimepickerClockFace[];\n    @Output() periodChanged = new EventEmitter<NgxMatTimepickerPeriods>();\n    @Input() selectedHour: number | string;\n    @Input() selectedPeriod: NgxMatTimepickerPeriods;\n    timePeriod = NgxMatTimepickerPeriods;\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    changePeriod(period: NgxMatTimepickerPeriods): void {\n        this.isPeriodAvailable = this._isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    private _getDisabledTimeByPeriod(period: NgxMatTimepickerPeriods): NgxMatTimepickerClockFace[] {\n        switch (this.activeTimeUnit) {\n            case NgxMatTimepickerUnits.HOUR:\n                return NgxMatTimepickerUtils.disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case NgxMatTimepickerUnits.MINUTE:\n                return NgxMatTimepickerUtils.disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error(\"no such NgxMatTimepickerUnits\");\n        }\n    }\n\n    private _isSwitchPeriodAvailable(period: NgxMatTimepickerPeriods): boolean {\n        const time = this._getDisabledTimeByPeriod(period);\n\n        return !time.every(t => t.disabled);\n    }\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\n//\nimport { NgxMatTimepickerUnits } from \"../models/ngx-mat-timepicker-units.enum\";\n//\nimport { DateTime } from \"ts-luxon\";\n\n@Pipe({\n    name: \"timeFormatter\"\n})\nexport class NgxMatTimepickerTimeFormatterPipe implements PipeTransform {\n\n    transform(time: number | string, timeUnit: NgxMatTimepickerUnits): any {\n        if (time == null || time === '') {\n            return time;\n        }\n        switch (timeUnit) {\n            case NgxMatTimepickerUnits.HOUR:\n                return DateTime.fromObject({hour: +time}).toFormat(\"HH\");\n            case NgxMatTimepickerUnits.MINUTE:\n                return DateTime.fromObject({minute: +time}).toFormat(\"mm\");\n            default:\n                throw new Error(\"no such time unit\");\n        }\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class NgxMatTimepickerMinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from \"@angular/core\";\nimport {DOCUMENT} from \"@angular/common\";\n\n@Directive({\n    selector: \"[ngxMatTimepickerAutofocus]\"\n})\nexport class NgxMatTimepickerAutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input(\"ngxMatTimepickerAutofocus\") isFocusActive: boolean;\n\n    private _activeElement: HTMLElement;\n\n    constructor(private _element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this._activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this._element.nativeElement.focus({ preventScroll: true }));\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this._activeElement.focus({ preventScroll: true }));\n    }\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\nimport {FloatLabelType} from \"@angular/material/form-field\";\n//\nimport {NgxMatTimepickerUnits} from \"../../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerParserPipe} from \"../../../pipes/ngx-mat-timepicker-parser.pipe\";\nimport {NgxMatTimepickerClockFace} from \"../../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUtils} from \"../../../utils/ngx-mat-timepicker.utils\";\n\nfunction concatTime(currentTime: string, nextTime: string): number {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n\n        return +time;\n    }\n}\n\n@Component({\n    selector: \"ngx-mat-timepicker-time-control\",\n    templateUrl: \"./ngx-mat-timepicker-control.component.html\",\n    styleUrls: [\"./ngx-mat-timepicker-control.component.scss\"],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [NgxMatTimepickerParserPipe]\n})\n\nexport class NgxMatTimepickerControlComponent implements OnChanges {\n\n    static nextId: number = 0;\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input() disabled: boolean;\n\n    @Input()\n    set floatLabel(newValue: FloatLabelType) {\n        this._floatLabel = newValue;\n    }\n\n    get floatLabel(): FloatLabelType {\n        return this._floatLabel;\n    }\n\n    id: number = NgxMatTimepickerControlComponent.nextId++;\n    isFocused: boolean;\n    @Input() max: number;\n    @Input() min: number;\n    @Input() placeholder: string;\n    @Input() preventTyping: boolean;\n\n    @Input() time: number;\n\n    @Output() timeChanged = new EventEmitter<number>();\n    @Input() timeList: NgxMatTimepickerClockFace[];\n    @Input() timeUnit: NgxMatTimepickerUnits;\n\n    private _color: ThemePalette = \"primary\";\n    private _floatLabel: FloatLabelType = \"never\";\n    private _previousTime: number;\n\n    constructor(private _timeParser: NgxMatTimepickerParserPipe) {\n    }\n\n    changeTime(event: any): void {\n        event.stopPropagation();\n\n        const char = String.fromCharCode(event.keyCode);\n        const time = concatTime(String(this.time), char);\n\n        this._changeTimeIfValid(time);\n    }\n\n    decrease(): void {\n        if (!this.disabled) {\n            let previousTime = +this.time - 1;\n\n            if (previousTime < this.min) {\n                previousTime = this.max;\n            }\n\n            if (this._isSelectedTimeDisabled(previousTime)) {\n                previousTime = this._getAvailableTime(previousTime, this._getPrevAvailableTime.bind(this));\n            }\n\n            if (previousTime !== this.time) {\n                this.timeChanged.emit(previousTime);\n            }\n        }\n    }\n\n    increase(): void {\n        if (!this.disabled) {\n            let nextTime = +this.time + 1;\n\n            if (nextTime > this.max) {\n                nextTime = this.min;\n            }\n\n            if (this._isSelectedTimeDisabled(nextTime)) {\n                nextTime = this._getAvailableTime(nextTime, this._getNextAvailableTime.bind(this));\n            }\n\n            if (nextTime !== this.time) {\n                this.timeChanged.emit(nextTime);\n            }\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.timeList && this.time != null) {\n            if (this._isSelectedTimeDisabled(this.time)) {\n                this._setAvailableTime();\n            }\n        }\n    }\n\n    onBlur(): void {\n        this.isFocused = false;\n\n        if (this._previousTime !== this.time) {\n            this._changeTimeIfValid(+this.time);\n        }\n    }\n\n    onFocus(): void {\n        this.isFocused = true;\n        this._previousTime = this.time;\n    }\n\n    onKeydown(event: any): void {\n        event.stopPropagation();\n\n        if (!NgxMatTimepickerUtils.isDigit(event)) {\n            event.preventDefault();\n        }\n\n        switch (event.key) {\n            case \"ArrowUp\":\n                this.increase();\n                break;\n            case \"ArrowDown\":\n                this.decrease();\n                break;\n        }\n\n        if (this.preventTyping && event.key !== \"Tab\") {\n            event.preventDefault();\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = +this._timeParser.transform(value, this.timeUnit);\n    }\n\n    private _changeTimeIfValid(value: number | undefined) {\n        if (!isNaN(value)) {\n            this.time = value;\n\n            if (this.time > this.max) {\n                const timeString = String(value);\n                this.time = +timeString[timeString.length - 1];\n            }\n\n            if (this.time < this.min) {\n                this.time = this.min;\n            }\n\n            this.timeChanged.emit(this.time);\n        }\n    }\n\n    private _getAvailableTime(currentTime: number, fn: (index: number) => number | undefined): number | undefined {\n        const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\n        const availableTime = fn(currentTimeIndex);\n\n        return availableTime != null ? availableTime : this.time;\n    }\n\n    private _getNextAvailableTime(index: number): number | undefined {\n        const timeCollection = this.timeList;\n        const maxValue = timeCollection.length;\n        for (let i = index + 1; i < maxValue; i++) {\n            const time = timeCollection[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private _getPrevAvailableTime(index: number): number | undefined {\n        for (let i = index; i >= 0; i--) {\n            const time = this.timeList[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private _isSelectedTimeDisabled(time: number): boolean {\n        return this.timeList.find((faceTime: NgxMatTimepickerClockFace) => faceTime.time === time).disabled;\n    }\n\n    private _setAvailableTime(): void {\n        this.time = this.timeList.find(t => !t.disabled).time;\n        this.timeChanged.emit(this.time);\n    }\n}\n\n","import {Inject, Pipe, PipeTransform} from \"@angular/core\";\n//\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerUnits} from \"../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerMeasure} from \"../models/ngx-mat-timepicker-measures.enum\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n@Pipe({\n    name: \"timeLocalizer\"\n})\nexport class NgxMatTimepickerTimeLocalizerPipe implements PipeTransform {\n\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n    }\n\n    transform(time: number | string, timeUnit: NgxMatTimepickerUnits, isKeyboardEnabled = false): string {\n        if (time == null || time === \"\") {\n            return \"\";\n        }\n\n        switch (timeUnit) {\n            case NgxMatTimepickerUnits.HOUR: {\n                const format = (time === 0 || isKeyboardEnabled) ? \"HH\" : \"H\";\n\n                return this._formatTime(NgxMatTimepickerMeasure.hour, time, format);\n            }\n            case NgxMatTimepickerUnits.MINUTE:\n                return this._formatTime(NgxMatTimepickerMeasure.minute, time, \"mm\");\n            default:\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\n        }\n    }\n\n    private _formatTime(timeMeasure: NgxMatTimepickerMeasure, time: string | number, format: string): string {\n        try {\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this._locale).toFormat(format);\n        } catch {\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this._locale}`);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeHour'\n})\nexport class NgxMatTimepickerActiveHourPipe implements PipeTransform {\n\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\n        if (hour == null || isClockFaceDisabled) {\n            return false;\n        }\n\n        return hour === currentHour;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeMinute'\n})\nexport class NgxMatTimepickerActiveMinutePipe implements PipeTransform {\n\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\n        if (minute == null || isClockFaceDisabled) {\n            return false;\n        }\n        const defaultGap = 5;\n\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\n    }\n\n}\n","import {Component, Input} from \"@angular/core\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-content\",\n    templateUrl: \"./ngx-mat-timepicker-content.component.html\",\n})\nexport class NgxMatTimepickerContentComponent {\n\n    @Input() appendToInput: boolean;\n    @Input() inputElement: any;\n\n}\n","import {Component, Inject, ViewEncapsulation} from \"@angular/core\";\n//\nimport {NgxMatTimepickerService} from \"../../services/ngx-mat-timepicker.service\";\nimport {NgxMatTimepickerEventService} from \"../../services/ngx-mat-timepicker-event.service\";\nimport {NgxMatTimepickerConfig} from \"../../models/ngx-mat-timepicker-config.interface\";\nimport {NgxMatTimepickerBaseDirective} from \"../../directives/ngx-mat-timepicker-base.directive\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NGX_MAT_TIMEPICKER_CONFIG} from \"../../tokens/ngx-mat-timepicker-config.token\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-standalone\",\n    templateUrl: \"ngx-mat-timepicker-standalone.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-standalone.component.scss\"],\n    // tslint:disable-next-line:no-host-metadata-property\n    host: {\n      \"[class.mat-app-background]\": \"true\"\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxMatTimepickerStandaloneComponent extends NgxMatTimepickerBaseDirective {\n\n    constructor(@Inject(NGX_MAT_TIMEPICKER_CONFIG) public data: NgxMatTimepickerConfig,\n                timepickerSrv: NgxMatTimepickerService,\n                eventSrv: NgxMatTimepickerEventService,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) locale: string) {\n\n        super(timepickerSrv, eventSrv, locale, data);\n    }\n\n    close(): void {\n        this.data.timepickerBaseRef.close();\n    }\n}\n","import {ModuleWithProviders, NgModule} from \"@angular/core\";\nimport {OverlayModule} from \"@angular/cdk/overlay\";\nimport {PortalModule} from \"@angular/cdk/portal\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {A11yModule} from \"@angular/cdk/a11y\";\nimport {SmpCoreUtilsModule} from \"smp-core-utils\";\n// MATERIAL\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\n// NGX-MAT-TIMEPICKER\n// DIRECTIVES\nimport {NgxMatTimepickerDirective} from \"./directives/ngx-mat-timepicker.directive\";\nimport {NgxMatTimepickerToggleIconDirective} from \"./directives/ngx-mat-timepicker-toggle-icon.directive\";\nimport {NgxMatTimepickerThemeDirective} from \"./directives/ngx-mat-timepicker-theme.directive\";\nimport {NgxMatTimepickerBaseDirective} from \"./directives/ngx-mat-timepicker-base.directive\";\n// COMPONENTS\nimport {NgxMatTimepickerComponent} from \"./components/ngx-mat-timepicker/ngx-mat-timepicker.component\";\nimport {NgxMatTimepickerToggleComponent} from \"./components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component\";\nimport {\n    NgxMatTimepicker24HoursFaceComponent\n} from \"./components/ngx-mat-timepicker-24-hours-face/ngx-mat-timepicker-24-hours-face.component\";\nimport {\n    NgxMatTimepicker12HoursFaceComponent\n} from \"./components/ngx-mat-timepicker-12-hours-face/ngx-mat-timepicker-12-hours-face.component\";\nimport {\n    NgxMatTimepickerMinutesFaceComponent\n} from \"./components/ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component\";\nimport {NgxMatTimepickerFaceComponent} from \"./components/ngx-mat-timepicker-face/ngx-mat-timepicker-face.component\";\nimport {NgxMatTimepickerDialComponent} from \"./components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component\";\nimport {\n    NgxMatTimepickerDialControlComponent\n} from \"./components/ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component\";\nimport {NgxMatTimepickerPeriodComponent} from \"./components/ngx-mat-timepicker-period/ngx-mat-timepicker-period.component\";\nimport {NgxMatTimepickerTimeFormatterPipe} from \"./pipes/ngx-mat-timepicker-time-formatter.pipe\";\nimport {NgxMatTimepickerMinutesFormatterPipe} from \"./pipes/ngx-mat-timepicker-minutes-formatter.pipe\";\nimport {NgxMatTimepickerAutofocusDirective} from \"./directives/ngx-mat-timepicker-autofocus.directive\";\nimport {NgxMatTimepickerFieldComponent} from \"./components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component\";\nimport {\n    NgxMatTimepickerControlComponent\n} from \"./components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component\";\nimport {NgxMatTimepickerTimeLocalizerPipe} from \"./pipes/ngx-mat-timepicker-time-localizer.pipe\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"./tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerParserPipe} from \"./pipes/ngx-mat-timepicker-parser.pipe\";\nimport {NgxMatTimepickerActiveHourPipe} from \"./pipes/ngx-mat-timepicker-active-hour.pipe\";\nimport {NgxMatTimepickerActiveMinutePipe} from \"./pipes/ngx-mat-timepicker-active-minute.pipe\";\nimport {\n    NgxMatTimepickerContentComponent\n} from \"./components/ngx-mat-timepicker-content/ngx-mat-timepicker-content.component\";\nimport {NgxMatTimepickerDialogComponent} from \"./components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component\";\nimport {NgxMatTimepickerHoursFaceDirective} from \"./components/ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive\";\nimport {NgxMatTimepickerStandaloneComponent} from \"./components/ngx-mat-timepicker-standalone/ngx-mat-timepicker-standalone.component\";\nimport {NGX_MAT_TIMEPICKER_CONFIG} from \"./tokens/ngx-mat-timepicker-config.token\";\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        FormsModule,\n        MatButtonModule,\n        MatFormFieldModule,\n        MatDialogModule,\n        MatInputModule,\n        MatSelectModule,\n        MatToolbarModule,\n        MatIconModule,\n        OverlayModule,\n        PortalModule,\n        SmpCoreUtilsModule.forRoot()\n    ],\n    exports: [\n        NgxMatTimepickerComponent,\n        NgxMatTimepickerToggleComponent,\n        NgxMatTimepickerFieldComponent,\n        NgxMatTimepickerDirective,\n        NgxMatTimepickerToggleIconDirective\n    ],\n    declarations: [\n        // Not really used, but needed to use it as abstract class\n        NgxMatTimepickerBaseDirective,\n        NgxMatTimepickerHoursFaceDirective,\n        //\n        NgxMatTimepickerActiveHourPipe,\n        NgxMatTimepickerActiveMinutePipe,\n        NgxMatTimepickerComponent,\n        NgxMatTimepickerDialComponent,\n        NgxMatTimepickerDialControlComponent,\n        NgxMatTimepickerDialogComponent,\n        NgxMatTimepickerDirective,\n        NgxMatTimepickerFaceComponent,\n        NgxMatTimepickerMinutesFaceComponent,\n        NgxMatTimepickerPeriodComponent,\n        NgxMatTimepickerStandaloneComponent,\n        NgxMatTimepickerToggleComponent,\n        NgxMatTimepicker12HoursFaceComponent,\n        NgxMatTimepicker24HoursFaceComponent,\n        NgxMatTimepickerToggleIconDirective,\n        NgxMatTimepickerAutofocusDirective,\n        NgxMatTimepickerMinutesFormatterPipe,\n        NgxMatTimepickerThemeDirective,\n        NgxMatTimepickerFieldComponent,\n        NgxMatTimepickerControlComponent,\n        NgxMatTimepickerParserPipe,\n        NgxMatTimepickerContentComponent,\n        NgxMatTimepickerTimeFormatterPipe,\n        NgxMatTimepickerTimeLocalizerPipe\n    ],\n    entryComponents: [\n        NgxMatTimepickerDialogComponent,\n        NgxMatTimepickerStandaloneComponent\n    ]\n})\nexport class NgxMatTimepickerModule {\n\n    static setLocale(locale: string): ModuleWithProviders<NgxMatTimepickerModule> {\n        return {\n            ngModule: NgxMatTimepickerModule,\n            providers: [\n                {provide: NGX_MAT_TIMEPICKER_LOCALE, useValue: locale},\n                {provide: NGX_MAT_TIMEPICKER_CONFIG, useValue: undefined},\n            ]\n        };\n    }\n}\n"],"names":["DateTime","BehaviorSubject","Injectable","InjectionToken","EventEmitter","Subject","tap","map","distinctUntilChanged","takeUntil","Component","NG_VALUE_ACCESSOR","ChangeDetectionStrategy","ViewEncapsulation","Inject","Input","Output","Directive","shareReplay","Optional","HostListener","MAT_DIALOG_DATA","MatDialogRef","ViewContainerRef","MatDialog","Overlay","SmpDomService","HostBinding","ContentChild","CdkOverlayOrigin","ElementRef","MatFormField","ViewChild","Info","Pipe","trigger","transition","style","animate","sequence","DOCUMENT","NgModule","CommonModule","A11yModule","FormsModule","MatButtonModule","MatFormFieldModule","MatDialogModule","MatInputModule","MatSelectModule","MatToolbarModule","MatIconModule","OverlayModule","PortalModule","SmpCoreUtilsModule"],"mappings":"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"}
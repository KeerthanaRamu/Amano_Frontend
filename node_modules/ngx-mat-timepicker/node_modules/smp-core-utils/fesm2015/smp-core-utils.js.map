{"version":3,"file":"smp-core-utils.js","sources":["../../../projects/smp-core-utils/src/lib/services/smp-date-locale.service.ts","../../../projects/smp-core-utils/src/lib/services/smp-dom.service.ts","../../../projects/smp-core-utils/src/lib/smp-core-utils.module.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {NativeDateAdapter} from \"@angular/material/core\";\nimport {MatDateFormats} from \"@angular/material/core/datetime/date-formats\";\n//\nimport {SmpDateDisplay} from \"../models/smp-date-display.model\";\n//\nimport {includes} from \"lodash\";\n\nconst smpSep: string = \"/\";\nconst smpDay: string = \"d\";\nconst smpDayDoubled: string = \"dd\";\nconst smpMonth: string = \"M\";\nconst smpMonthDoubled: string = \"MM\";\nconst smpYear: string = \"yyyy\";\nconst smpCurrentYear: number = new Date().getFullYear();\nconst smpCentury: number = Math.round(smpCurrentYear / 100);\n\nexport const SMP_LOCALE_IT_IT: string = \"it-IT\";\nexport const SMP_LOCALE_EN_GB: string = \"en-GB\";\nexport const SMP_LOCALE_EN_US: string = \"en-US\";\n\nexport const SMP_FORMATS = {\n    \"it-IT\": `${smpDayDoubled}${smpSep}${smpMonthDoubled}${smpSep}${smpYear}`,\n    \"en-GB\": `${smpDayDoubled}${smpSep}${smpMonthDoubled}${smpSep}${smpYear}`,\n    \"en-US\": `${smpMonth}${smpSep}${smpDay}${smpSep}${smpYear}`,\n};\n\nexport const SMP_DATE_FORMATS_IT: MatDateFormats = {\n    parse: {\n        dateInput: {month: \"numeric\", year: \"numeric\", day: \"numeric\"}\n    },\n    display: {\n        dateInput: SMP_FORMATS[SMP_LOCALE_IT_IT],\n        monthYearLabel: `${smpMonthDoubled}${smpSep}${smpYear}`,\n        dateA11yLabel: SMP_FORMATS[SMP_LOCALE_IT_IT],\n        monthYearA11yLabel: `${smpMonthDoubled}${smpSep}${smpYear}`\n    }\n};\n\nexport const SMP_DATE_FORMATS_EN_GB: MatDateFormats = {\n    parse: {\n        dateInput: {month: \"numeric\", year: \"numeric\", day: \"numeric\"}\n    },\n    display: {\n        dateInput: SMP_FORMATS[SMP_LOCALE_EN_GB],\n        monthYearLabel: `${smpMonthDoubled}${smpSep}${smpYear}`,\n        dateA11yLabel: SMP_FORMATS[SMP_LOCALE_EN_GB],\n        monthYearA11yLabel: `${smpMonthDoubled}${smpSep}${smpYear}`\n    }\n};\n\nexport const SMP_DATE_FORMATS_EN_US: MatDateFormats = {\n    parse: {\n        dateInput: {month: \"numeric\", year: \"numeric\", day: \"numeric\"}\n    },\n    display: {\n        dateInput: SMP_FORMATS[SMP_LOCALE_EN_US],\n        monthYearLabel: `${smpMonth}${smpSep}${smpYear}`,\n        dateA11yLabel: SMP_FORMATS[SMP_LOCALE_EN_US],\n        monthYearA11yLabel: `${smpMonth}${smpSep}${smpYear}`\n    }\n};\n\n@Injectable()\nexport class SmpMatDateLocale extends NativeDateAdapter {\n\n    get currentLocale(): string {\n        return this.locale;\n    }\n\n    display: SmpDateDisplay = SMP_DATE_FORMATS_EN_GB.display;\n\n    format(date: Date, _displayFormat_: string): string {\n        const day = date.getDate();\n        const month = date.getMonth() + 1;\n        const year = date.getFullYear();\n        switch (this.display.dateInput) {\n            case SMP_DATE_FORMATS_IT.display.dateInput:\n                return this._addLeadingZeroes(day) + smpSep + this._addLeadingZeroes(month) + smpSep + year;\n            case SMP_DATE_FORMATS_EN_GB.display.dateInput:\n                return this._addLeadingZeroes(day) + smpSep + this._addLeadingZeroes(month) + smpSep + year;\n            case SMP_DATE_FORMATS_EN_US.display.dateInput:\n                return month + smpSep + day + smpSep + year;\n            default:\n                let formattedDate = \"\";\n                try {\n                    formattedDate = date.toLocaleDateString(SMP_LOCALE_EN_GB);\n                } catch (e) {\n                    console.warn(\"Catched error while printing \", e);\n                    formattedDate = date.toDateString();\n                }\n\n                return formattedDate;\n        }\n    }\n\n    parse(value: any): Date | null {\n        // dd/MM/yyyy\n        if (includes([SMP_DATE_FORMATS_IT.display.dateInput, SMP_DATE_FORMATS_EN_GB.display.dateInput], this.display.dateInput)) {\n            if (typeof value === typeof \"\" && value.length > 0) {\n                const str = value.split(smpSep);\n                if (str.length < 3) {\n                    return new Date(\"smp\");\n                }\n                if (str[2].length < 4) {\n                    str[2] = smpCentury + str[2];\n                }\n                if (str[2].length !== 4) {\n                    return new Date(\"smp\");\n                }\n                const year = +str[2];\n                const month = +str[1] - 1;\n                const day = +str[0];\n\n                return new Date(year, month, day);\n            }\n\n            return null;\n        }\n        // M/d/yyyy\n        else if (this.display.dateInput === SMP_DATE_FORMATS_EN_US.display.dateInput) {\n            if (typeof value === typeof \"\" && value.length > 0) {\n                const str = value.split(smpSep);\n                if (str.length < 3) {\n                    return new Date(\"smp\");\n                }\n                if (str[2].length < 4) {\n                    str[2] = smpCentury + str[2];\n                }\n                if (str[2].length !== 4) {\n                    return new Date(\"smp\");\n                }\n                const year = +str[2];\n                const month = +str[0] - 1;\n                const day = +str[1];\n\n                return new Date(year, month, day);\n            }\n\n            return null;\n        }\n        else {\n            console.warn(\"Date input format not valid.\" +\n                \" Be sure to use SMP_DATE_FORMATS\" +\n                \" or extend this class with your own 'parser' and format 'methods'\");\n            console.info(\"For a complete guide visit github.com/tonysamperi/ngx-mat-lib\");\n\n            return null;\n        }\n    }\n\n    setLocale(locale: any) {\n        switch (locale) {\n            case SMP_LOCALE_IT_IT:\n                this.display = SMP_DATE_FORMATS_IT.display;\n                break;\n            case SMP_LOCALE_EN_GB:\n                this.display = SMP_DATE_FORMATS_EN_GB.display;\n                break;\n            case SMP_LOCALE_EN_US:\n                this.display = SMP_DATE_FORMATS_EN_US.display;\n                break;\n            default:\n                this.display = SMP_DATE_FORMATS_EN_GB.display;\n                break;\n        }\n        super.setLocale(locale);\n    }\n\n    private _addLeadingZeroes(n: number) {\n        return (\"0\" + n).slice(-2);\n    }\n}\n","import {\n    ComponentRef,\n    ElementRef,\n    Injectable,\n    InjectionToken,\n    StaticProvider,\n    Type,\n    ViewContainerRef\n} from \"@angular/core\";\nimport {ComponentFactoryResolver} from \"@angular/core\";\nimport {ApplicationRef} from \"@angular/core\";\nimport {Injector} from \"@angular/core\";\nimport {EmbeddedViewRef} from \"@angular/core\";\n//\nimport {SmpCompRefs, SmpCompData} from \"../models/public\";\n//\nimport {Observable, timer} from \"rxjs\";\n\n@Injectable()\nexport class SmpDomService {\n\n    private _refs: SmpCompRefs = {};\n\n    constructor(private _componentFactoryResolver: ComponentFactoryResolver,\n                private _appRef: ApplicationRef,\n                private _injector: Injector) {\n    }\n\n    appendComp<T = any>(component: Type<T>, key?: string,\n                        target: SmpCompData[\"target\"] = \"body\",\n                        injector: Injector = this._injector,\n                        waiter: Observable<void | number> = timer()): ComponentRef<T> {\n        // 1. Create a component reference from the component\n        const componentRef = this._componentFactoryResolver\n        .resolveComponentFactory(component as Type<T>)\n        .create(injector);\n\n        // 2. Attach component to the appRef so that it's inside the ng component tree\n        this._appRef.attachView(componentRef.hostView);\n\n        // 3. Get DOM element from component\n        const domElem = (componentRef.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n\n        if (!!key) {\n            !!this._refs[key] && console.warn(\"A ref with this key already exists and will be overwritten\");\n            this._refs[key] = componentRef;\n        }\n        else {\n            console.warn(\"Component appended, but key wasn't provided. It won't be possible to remove it from the DOM automagically\");\n        }\n\n        waiter.subscribe(() => {\n            // 4. Append DOM element to the body\n            const targetEl = (typeof target === typeof \"\"\n                ? document.querySelector(target as string)\n                : target instanceof ElementRef ? target.nativeElement : target) || document.body;\n            targetEl.appendChild(domElem);\n        });\n\n        return componentRef as ComponentRef<T>;\n    }\n\n    appendComps(compsData: SmpCompData[], injector?: Injector, waiter?: Observable<void | number>): void {\n        compsData.forEach((compData) => this.appendComp(compData.comp, compData.key, compData.target, injector, waiter));\n    }\n\n    createInjector<T = any>(token: InjectionToken<T>, value: T, viewContainerRef?: ViewContainerRef): Injector {\n        const providers: StaticProvider[] = [\n            {provide: token, useValue: value}\n        ];\n\n        return Injector.create({\n            parent: viewContainerRef ? viewContainerRef.injector : this._injector,\n            providers\n        });\n    }\n\n    removeComp(key: string): boolean {\n        if (!!this._refs[key]) {\n            const componentRef = this._refs[key];\n            this._appRef.detachView(componentRef.hostView);\n            componentRef.destroy();\n\n            return !0;\n        }\n        else {\n            console.warn(`No ref found with key ${key}`);\n\n            return !1;\n        }\n    }\n\n}\n","import {ModuleWithProviders, NgModule} from \"@angular/core\";\n//\nimport {SmpDomService} from \"./services/public\";\n\n@NgModule({})\nexport class SmpCoreUtilsModule {\n\n    static forRoot(): ModuleWithProviders<SmpCoreUtilsModule> {\n        return {\n            ngModule: SmpCoreUtilsModule,\n            providers: [\n                SmpDomService\n            ]\n        };\n    }\n}\n"],"names":[],"mappings":"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"}
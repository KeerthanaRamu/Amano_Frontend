import { ElementRef, Injectable } from "@angular/core";
import { ComponentFactoryResolver } from "@angular/core";
import { ApplicationRef } from "@angular/core";
import { Injector } from "@angular/core";
import { timer } from "rxjs";
export class SmpDomService {
    constructor(_componentFactoryResolver, _appRef, _injector) {
        this._componentFactoryResolver = _componentFactoryResolver;
        this._appRef = _appRef;
        this._injector = _injector;
        this._refs = {};
    }
    appendComp(component, key, target = "body", injector = this._injector, waiter = timer()) {
        const componentRef = this._componentFactoryResolver
            .resolveComponentFactory(component)
            .create(injector);
        this._appRef.attachView(componentRef.hostView);
        const domElem = componentRef.hostView
            .rootNodes[0];
        if (!!key) {
            !!this._refs[key] && console.warn("A ref with this key already exists and will be overwritten");
            this._refs[key] = componentRef;
        }
        else {
            console.warn("Component appended, but key wasn't provided. It won't be possible to remove it from the DOM automagically");
        }
        waiter.subscribe(() => {
            const targetEl = (typeof target === typeof ""
                ? document.querySelector(target)
                : target instanceof ElementRef ? target.nativeElement : target) || document.body;
            targetEl.appendChild(domElem);
        });
        return componentRef;
    }
    appendComps(compsData, injector, waiter) {
        compsData.forEach((compData) => this.appendComp(compData.comp, compData.key, compData.target, injector, waiter));
    }
    createInjector(token, value, viewContainerRef) {
        const providers = [
            { provide: token, useValue: value }
        ];
        return Injector.create({
            parent: viewContainerRef ? viewContainerRef.injector : this._injector,
            providers
        });
    }
    removeComp(key) {
        if (!!this._refs[key]) {
            const componentRef = this._refs[key];
            this._appRef.detachView(componentRef.hostView);
            componentRef.destroy();
            return !0;
        }
        else {
            console.warn(`No ref found with key ${key}`);
            return !1;
        }
    }
}
SmpDomService.decorators = [
    { type: Injectable }
];
SmpDomService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21wLWRvbS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc21wLWNvcmUtdXRpbHMvc3JjL2xpYi9zZXJ2aWNlcy9zbXAtZG9tLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVILFVBQVUsRUFDVixVQUFVLEVBS2IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUt2QyxPQUFPLEVBQWEsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBR3ZDLE1BQU0sT0FBTyxhQUFhO0lBSXRCLFlBQW9CLHlCQUFtRCxFQUNuRCxPQUF1QixFQUN2QixTQUFtQjtRQUZuQiw4QkFBeUIsR0FBekIseUJBQXlCLENBQTBCO1FBQ25ELFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBQ3ZCLGNBQVMsR0FBVCxTQUFTLENBQVU7UUFKL0IsVUFBSyxHQUFnQixFQUFFLENBQUM7SUFLaEMsQ0FBQztJQUVELFVBQVUsQ0FBVSxTQUFrQixFQUFFLEdBQVksRUFDaEMsU0FBZ0MsTUFBTSxFQUN0QyxXQUFxQixJQUFJLENBQUMsU0FBUyxFQUNuQyxTQUFvQyxLQUFLLEVBQUU7UUFFM0QsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHlCQUF5QjthQUNsRCx1QkFBdUIsQ0FBQyxTQUFvQixDQUFDO2FBQzdDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUdsQixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFHL0MsTUFBTSxPQUFPLEdBQUksWUFBWSxDQUFDLFFBQWlDO2FBQzFELFNBQVMsQ0FBQyxDQUFDLENBQWdCLENBQUM7UUFFakMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFO1lBQ1AsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1lBQ2hHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsWUFBWSxDQUFDO1NBQ2xDO2FBQ0k7WUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLDJHQUEyRyxDQUFDLENBQUM7U0FDN0g7UUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUVsQixNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQU8sTUFBTSxLQUFLLE9BQU8sRUFBRTtnQkFDekMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBZ0IsQ0FBQztnQkFDMUMsQ0FBQyxDQUFDLE1BQU0sWUFBWSxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDckYsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sWUFBK0IsQ0FBQztJQUMzQyxDQUFDO0lBRUQsV0FBVyxDQUFDLFNBQXdCLEVBQUUsUUFBbUIsRUFBRSxNQUFrQztRQUN6RixTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3JILENBQUM7SUFFRCxjQUFjLENBQVUsS0FBd0IsRUFBRSxLQUFRLEVBQUUsZ0JBQW1DO1FBQzNGLE1BQU0sU0FBUyxHQUFxQjtZQUNoQyxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBQztTQUNwQyxDQUFDO1FBRUYsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ25CLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUztZQUNyRSxTQUFTO1NBQ1osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFVBQVUsQ0FBQyxHQUFXO1FBQ2xCLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbkIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDL0MsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRXZCLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDYjthQUNJO1lBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUU3QyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ2I7SUFDTCxDQUFDOzs7WUF6RUosVUFBVTs7O1lBVEgsd0JBQXdCO1lBQ3hCLGNBQWM7WUFDZCxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnRSZWYsXG4gICAgRWxlbWVudFJlZixcbiAgICBJbmplY3RhYmxlLFxuICAgIEluamVjdGlvblRva2VuLFxuICAgIFN0YXRpY1Byb3ZpZGVyLFxuICAgIFR5cGUsXG4gICAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJ9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge0FwcGxpY2F0aW9uUmVmfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtJbmplY3Rvcn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7RW1iZWRkZWRWaWV3UmVmfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuLy9cbmltcG9ydCB7U21wQ29tcFJlZnMsIFNtcENvbXBEYXRhfSBmcm9tIFwiLi4vbW9kZWxzL3B1YmxpY1wiO1xuLy9cbmltcG9ydCB7T2JzZXJ2YWJsZSwgdGltZXJ9IGZyb20gXCJyeGpzXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTbXBEb21TZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgX3JlZnM6IFNtcENvbXBSZWZzID0ge307XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICAgICAgICAgICAgICBwcml2YXRlIF9hcHBSZWY6IEFwcGxpY2F0aW9uUmVmLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgX2luamVjdG9yOiBJbmplY3Rvcikge1xuICAgIH1cblxuICAgIGFwcGVuZENvbXA8VCA9IGFueT4oY29tcG9uZW50OiBUeXBlPFQ+LCBrZXk/OiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFNtcENvbXBEYXRhW1widGFyZ2V0XCJdID0gXCJib2R5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmplY3RvcjogSW5qZWN0b3IgPSB0aGlzLl9pbmplY3RvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhaXRlcjogT2JzZXJ2YWJsZTx2b2lkIHwgbnVtYmVyPiA9IHRpbWVyKCkpOiBDb21wb25lbnRSZWY8VD4ge1xuICAgICAgICAvLyAxLiBDcmVhdGUgYSBjb21wb25lbnQgcmVmZXJlbmNlIGZyb20gdGhlIGNvbXBvbmVudFxuICAgICAgICBjb25zdCBjb21wb25lbnRSZWYgPSB0aGlzLl9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcbiAgICAgICAgLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudCBhcyBUeXBlPFQ+KVxuICAgICAgICAuY3JlYXRlKGluamVjdG9yKTtcblxuICAgICAgICAvLyAyLiBBdHRhY2ggY29tcG9uZW50IHRvIHRoZSBhcHBSZWYgc28gdGhhdCBpdCdzIGluc2lkZSB0aGUgbmcgY29tcG9uZW50IHRyZWVcbiAgICAgICAgdGhpcy5fYXBwUmVmLmF0dGFjaFZpZXcoY29tcG9uZW50UmVmLmhvc3RWaWV3KTtcblxuICAgICAgICAvLyAzLiBHZXQgRE9NIGVsZW1lbnQgZnJvbSBjb21wb25lbnRcbiAgICAgICAgY29uc3QgZG9tRWxlbSA9IChjb21wb25lbnRSZWYuaG9zdFZpZXcgYXMgRW1iZWRkZWRWaWV3UmVmPGFueT4pXG4gICAgICAgICAgICAucm9vdE5vZGVzWzBdIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgICAgIGlmICghIWtleSkge1xuICAgICAgICAgICAgISF0aGlzLl9yZWZzW2tleV0gJiYgY29uc29sZS53YXJuKFwiQSByZWYgd2l0aCB0aGlzIGtleSBhbHJlYWR5IGV4aXN0cyBhbmQgd2lsbCBiZSBvdmVyd3JpdHRlblwiKTtcbiAgICAgICAgICAgIHRoaXMuX3JlZnNba2V5XSA9IGNvbXBvbmVudFJlZjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNvbXBvbmVudCBhcHBlbmRlZCwgYnV0IGtleSB3YXNuJ3QgcHJvdmlkZWQuIEl0IHdvbid0IGJlIHBvc3NpYmxlIHRvIHJlbW92ZSBpdCBmcm9tIHRoZSBET00gYXV0b21hZ2ljYWxseVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdhaXRlci5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgLy8gNC4gQXBwZW5kIERPTSBlbGVtZW50IHRvIHRoZSBib2R5XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRFbCA9ICh0eXBlb2YgdGFyZ2V0ID09PSB0eXBlb2YgXCJcIlxuICAgICAgICAgICAgICAgID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQgYXMgc3RyaW5nKVxuICAgICAgICAgICAgICAgIDogdGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudFJlZiA/IHRhcmdldC5uYXRpdmVFbGVtZW50IDogdGFyZ2V0KSB8fCBkb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgdGFyZ2V0RWwuYXBwZW5kQ2hpbGQoZG9tRWxlbSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjb21wb25lbnRSZWYgYXMgQ29tcG9uZW50UmVmPFQ+O1xuICAgIH1cblxuICAgIGFwcGVuZENvbXBzKGNvbXBzRGF0YTogU21wQ29tcERhdGFbXSwgaW5qZWN0b3I/OiBJbmplY3Rvciwgd2FpdGVyPzogT2JzZXJ2YWJsZTx2b2lkIHwgbnVtYmVyPik6IHZvaWQge1xuICAgICAgICBjb21wc0RhdGEuZm9yRWFjaCgoY29tcERhdGEpID0+IHRoaXMuYXBwZW5kQ29tcChjb21wRGF0YS5jb21wLCBjb21wRGF0YS5rZXksIGNvbXBEYXRhLnRhcmdldCwgaW5qZWN0b3IsIHdhaXRlcikpO1xuICAgIH1cblxuICAgIGNyZWF0ZUluamVjdG9yPFQgPSBhbnk+KHRva2VuOiBJbmplY3Rpb25Ub2tlbjxUPiwgdmFsdWU6IFQsIHZpZXdDb250YWluZXJSZWY/OiBWaWV3Q29udGFpbmVyUmVmKTogSW5qZWN0b3Ige1xuICAgICAgICBjb25zdCBwcm92aWRlcnM6IFN0YXRpY1Byb3ZpZGVyW10gPSBbXG4gICAgICAgICAgICB7cHJvdmlkZTogdG9rZW4sIHVzZVZhbHVlOiB2YWx1ZX1cbiAgICAgICAgXTtcblxuICAgICAgICByZXR1cm4gSW5qZWN0b3IuY3JlYXRlKHtcbiAgICAgICAgICAgIHBhcmVudDogdmlld0NvbnRhaW5lclJlZiA/IHZpZXdDb250YWluZXJSZWYuaW5qZWN0b3IgOiB0aGlzLl9pbmplY3RvcixcbiAgICAgICAgICAgIHByb3ZpZGVyc1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW1vdmVDb21wKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghIXRoaXMuX3JlZnNba2V5XSkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50UmVmID0gdGhpcy5fcmVmc1trZXldO1xuICAgICAgICAgICAgdGhpcy5fYXBwUmVmLmRldGFjaFZpZXcoY29tcG9uZW50UmVmLmhvc3RWaWV3KTtcbiAgICAgICAgICAgIGNvbXBvbmVudFJlZi5kZXN0cm95KCk7XG5cbiAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgTm8gcmVmIGZvdW5kIHdpdGgga2V5ICR7a2V5fWApO1xuXG4gICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==
import { Injectable } from "@angular/core";
import { NativeDateAdapter } from "@angular/material/core";
import { includes } from "lodash";
const smpSep = "/";
const smpDay = "d";
const smpDayDoubled = "dd";
const smpMonth = "M";
const smpMonthDoubled = "MM";
const smpYear = "yyyy";
const smpCurrentYear = new Date().getFullYear();
const smpCentury = Math.round(smpCurrentYear / 100);
export const SMP_LOCALE_IT_IT = "it-IT";
export const SMP_LOCALE_EN_GB = "en-GB";
export const SMP_LOCALE_EN_US = "en-US";
export const SMP_FORMATS = {
    "it-IT": `${smpDayDoubled}${smpSep}${smpMonthDoubled}${smpSep}${smpYear}`,
    "en-GB": `${smpDayDoubled}${smpSep}${smpMonthDoubled}${smpSep}${smpYear}`,
    "en-US": `${smpMonth}${smpSep}${smpDay}${smpSep}${smpYear}`,
};
export const SMP_DATE_FORMATS_IT = {
    parse: {
        dateInput: { month: "numeric", year: "numeric", day: "numeric" }
    },
    display: {
        dateInput: SMP_FORMATS[SMP_LOCALE_IT_IT],
        monthYearLabel: `${smpMonthDoubled}${smpSep}${smpYear}`,
        dateA11yLabel: SMP_FORMATS[SMP_LOCALE_IT_IT],
        monthYearA11yLabel: `${smpMonthDoubled}${smpSep}${smpYear}`
    }
};
export const SMP_DATE_FORMATS_EN_GB = {
    parse: {
        dateInput: { month: "numeric", year: "numeric", day: "numeric" }
    },
    display: {
        dateInput: SMP_FORMATS[SMP_LOCALE_EN_GB],
        monthYearLabel: `${smpMonthDoubled}${smpSep}${smpYear}`,
        dateA11yLabel: SMP_FORMATS[SMP_LOCALE_EN_GB],
        monthYearA11yLabel: `${smpMonthDoubled}${smpSep}${smpYear}`
    }
};
export const SMP_DATE_FORMATS_EN_US = {
    parse: {
        dateInput: { month: "numeric", year: "numeric", day: "numeric" }
    },
    display: {
        dateInput: SMP_FORMATS[SMP_LOCALE_EN_US],
        monthYearLabel: `${smpMonth}${smpSep}${smpYear}`,
        dateA11yLabel: SMP_FORMATS[SMP_LOCALE_EN_US],
        monthYearA11yLabel: `${smpMonth}${smpSep}${smpYear}`
    }
};
export class SmpMatDateLocale extends NativeDateAdapter {
    constructor() {
        super(...arguments);
        this.display = SMP_DATE_FORMATS_EN_GB.display;
    }
    get currentLocale() {
        return this.locale;
    }
    format(date, _displayFormat_) {
        const day = date.getDate();
        const month = date.getMonth() + 1;
        const year = date.getFullYear();
        switch (this.display.dateInput) {
            case SMP_DATE_FORMATS_IT.display.dateInput:
                return this._addLeadingZeroes(day) + smpSep + this._addLeadingZeroes(month) + smpSep + year;
            case SMP_DATE_FORMATS_EN_GB.display.dateInput:
                return this._addLeadingZeroes(day) + smpSep + this._addLeadingZeroes(month) + smpSep + year;
            case SMP_DATE_FORMATS_EN_US.display.dateInput:
                return month + smpSep + day + smpSep + year;
            default:
                let formattedDate = "";
                try {
                    formattedDate = date.toLocaleDateString(SMP_LOCALE_EN_GB);
                }
                catch (e) {
                    console.warn("Catched error while printing ", e);
                    formattedDate = date.toDateString();
                }
                return formattedDate;
        }
    }
    parse(value) {
        if (includes([SMP_DATE_FORMATS_IT.display.dateInput, SMP_DATE_FORMATS_EN_GB.display.dateInput], this.display.dateInput)) {
            if (typeof value === typeof "" && value.length > 0) {
                const str = value.split(smpSep);
                if (str.length < 3) {
                    return new Date("smp");
                }
                if (str[2].length < 4) {
                    str[2] = smpCentury + str[2];
                }
                if (str[2].length !== 4) {
                    return new Date("smp");
                }
                const year = +str[2];
                const month = +str[1] - 1;
                const day = +str[0];
                return new Date(year, month, day);
            }
            return null;
        }
        else if (this.display.dateInput === SMP_DATE_FORMATS_EN_US.display.dateInput) {
            if (typeof value === typeof "" && value.length > 0) {
                const str = value.split(smpSep);
                if (str.length < 3) {
                    return new Date("smp");
                }
                if (str[2].length < 4) {
                    str[2] = smpCentury + str[2];
                }
                if (str[2].length !== 4) {
                    return new Date("smp");
                }
                const year = +str[2];
                const month = +str[0] - 1;
                const day = +str[1];
                return new Date(year, month, day);
            }
            return null;
        }
        else {
            console.warn("Date input format not valid." +
                " Be sure to use SMP_DATE_FORMATS" +
                " or extend this class with your own 'parser' and format 'methods'");
            console.info("For a complete guide visit github.com/tonysamperi/ngx-mat-lib");
            return null;
        }
    }
    setLocale(locale) {
        switch (locale) {
            case SMP_LOCALE_IT_IT:
                this.display = SMP_DATE_FORMATS_IT.display;
                break;
            case SMP_LOCALE_EN_GB:
                this.display = SMP_DATE_FORMATS_EN_GB.display;
                break;
            case SMP_LOCALE_EN_US:
                this.display = SMP_DATE_FORMATS_EN_US.display;
                break;
            default:
                this.display = SMP_DATE_FORMATS_EN_GB.display;
                break;
        }
        super.setLocale(locale);
    }
    _addLeadingZeroes(n) {
        return ("0" + n).slice(-2);
    }
}
SmpMatDateLocale.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,
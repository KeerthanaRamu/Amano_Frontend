{"version":3,"file":"ngx-mat-timepicker.js","sources":["ngx-mat-timepicker/lib/models/ngx-mat-timepicker-periods.enum.ts","ngx-mat-timepicker/lib/models/ngx-mat-timepicker-format.enum.ts","ngx-mat-timepicker/lib/services/ngx-mat-timepicker-adapter.ts","ngx-mat-timepicker/lib/services/ngx-mat-timepicker.service.ts","ngx-mat-timepicker/lib/models/ngx-mat-timepicker-units.enum.ts","ngx-mat-timepicker/lib/tokens/ngx-mat-timepicker-time-locale.token.ts","ngx-mat-timepicker/lib/utils/ngx-mat-timepicker.utils.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component.ts","ngx-mat-timepicker/lib/directives/ngx-mat-timepicker-toggle-icon.directive.ts","ngx-mat-timepicker/lib/services/ngx-mat-timepicker-event.service.ts","ngx-mat-timepicker/lib/tokens/ngx-mat-timepicker-config.token.ts","ngx-mat-timepicker/lib/directives/ngx-mat-timepicker-base.directive.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker/ngx-mat-timepicker.component.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component.ts","ngx-mat-timepicker/lib/directives/ngx-mat-timepicker.directive.ts","ngx-mat-timepicker/lib/directives/ngx-mat-timepicker-theme.directive.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-24-hours-face/ngx-mat-timepicker-24-hours-face.component.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-12-hours-face/ngx-mat-timepicker-12-hours-face.component.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-face/ngx-mat-timepicker-face.component.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component.ts","ngx-mat-timepicker/lib/models/ngx-mat-timepicker-measures.enum.ts","ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-parser.pipe.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-period/ngx-mat-timepicker-period.component.ts","ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-time-formatter.pipe.ts","ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-minutes-formatter.pipe.ts","ngx-mat-timepicker/lib/directives/ngx-mat-timepicker-autofocus.directive.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component.ts","ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-time-localizer.pipe.ts","ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-active-hour.pipe.ts","ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-active-minute.pipe.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-content/ngx-mat-timepicker-content.component.ts","ngx-mat-timepicker/lib/components/ngx-mat-timepicker-standalone/ngx-mat-timepicker-standalone.component.ts","ngx-mat-timepicker/lib/ngx-mat-timepicker.module.ts"],"names":[],"mappings":"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","sourcesContent":["export enum NgxMatTimepickerPeriods {\n    AM = \"AM\",\n    PM = \"PM\"\n}\n","export enum NgxMatTimepickerFormat {\n    TWELVE = \"hh:mm a\",\n    TWELVE_SHORT = \"h:m a\",\n    TWENTY_FOUR = \"HH:mm\",\n    TWENTY_FOUR_SHORT = \"H:m\"\n}\n","import {NgxMatTimepickerFormat} from \"../models/ngx-mat-timepicker-format.enum\";\nimport {NgxMatTimepickerPeriods} from \"../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerOptions} from \"../models/ngx-mat-timepicker-options.interface\";\n//\nimport {DateTime, LocaleOptions, NumberingSystem} from \"ts-luxon\";\n\n// @dynamic\nexport class NgxMatTimepickerAdapter {\n\n    static defaultFormat = 12;\n    static defaultLocale = \"en-US\";\n    static defaultNumberingSistem: NumberingSystem = \"latn\";\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: NgxMatTimepickerPeriods): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        const hour = period === NgxMatTimepickerPeriods.AM ? currentHour : currentHour + 12;\n\n        if (period === NgxMatTimepickerPeriods.AM && hour === 12) {\n            return 0;\n        }\n        else if (period === NgxMatTimepickerPeriods.PM && hour === 24) {\n            return 12;\n        }\n\n        return hour;\n    }\n\n    static formatTime(time: string, opts: NgxMatTimepickerOptions): string {\n        if (!time) {\n            return \"Invalid Time\";\n        }\n        const {format} = opts;\n        const parsedTime = NgxMatTimepickerAdapter.parseTime(time, opts).setLocale(NgxMatTimepickerAdapter.defaultLocale);\n\n        if (format !== 24) {\n            return parsedTime.toLocaleString({\n                ...DateTime.TIME_SIMPLE,\n                hour12: format !== 24\n            }).replace(/\\u200E/g, \"\");\n        }\n\n        return parsedTime.toISOTime({\n            includeOffset: false,\n            suppressMilliseconds: true,\n            suppressSeconds: true\n        }).replace(/\\u200E/g, \"\");\n    }\n\n    static fromDateTimeToString(time: DateTime, format: number): string {\n        const timeFormat = format === 24 ? NgxMatTimepickerFormat.TWENTY_FOUR : NgxMatTimepickerFormat.TWELVE;\n\n        return time.reconfigure({\n            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,\n            locale: NgxMatTimepickerAdapter.defaultLocale\n        }).toFormat(timeFormat);\n    }\n\n    static isBetween(time: DateTime, before: DateTime, after: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\n        if (unit === \"hours\") {\n            return this.isSameOrBefore(time, after, unit) && this.isSameOrAfter(time, before, unit);\n        }\n        if (unit === \"minutes\") {\n            return this.isSameOrBefore(time, after) && this.isSameOrAfter(time, before);\n        }\n    }\n\n    static isSameOrAfter(time: DateTime, compareWith: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\n        if (unit === \"hours\") {\n            return time.hour >= compareWith.hour;\n        }\n        if (unit === \"minutes\") {\n            return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n        }\n    }\n\n    static isSameOrBefore(time: DateTime, compareWith: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\n        if (unit === \"hours\") {\n            return time.hour <= compareWith.hour;\n        }\n        if (unit === \"minutes\") {\n            return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n        }\n    }\n\n    static isTimeAvailable(time: string,\n                           min?: DateTime,\n                           max?: DateTime,\n                           granularity?: \"hours\" | \"minutes\",\n                           minutesGap?: number | null,\n                           format?: number): boolean {\n        if (!time) {\n            return;\n        }\n\n        const convertedTime = this.parseTime(time, {format});\n        const minutes = convertedTime.minute;\n\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && this.isSameOrAfter(convertedTime, min, granularity);\n        const isBefore = (max && !min)\n            && this.isSameOrBefore(convertedTime, max, granularity);\n        const between = (min && max)\n            && this.isBetween(convertedTime, min, max, granularity);\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || between || isAvailable;\n    }\n\n    static parseTime(time: string, opts: NgxMatTimepickerOptions): DateTime {\n        const {numberingSystem, locale} = NgxMatTimepickerAdapter._getLocaleOptionsByTime(time, opts);\n        const isPeriodExist = time.split(\" \").length === 2;\n        const timeMask = isPeriodExist ? NgxMatTimepickerFormat.TWELVE_SHORT : NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;\n\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\n    }\n\n    static toLocaleTimeString(time: string, opts: NgxMatTimepickerOptions = {}): string {\n        const {format = NgxMatTimepickerAdapter.defaultFormat, locale = NgxMatTimepickerAdapter.defaultLocale} = opts;\n        const hourCycle = format === 24 ? \"h23\" : \"h12\";\n        const timeFormat = {...DateTime.TIME_SIMPLE, hourCycle};\n        const timeMask = (format === 24) ? NgxMatTimepickerFormat.TWENTY_FOUR_SHORT : NgxMatTimepickerFormat.TWELVE_SHORT;\n\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\n    }\n\n    private static _getLocaleOptionsByTime(time: string, opts: NgxMatTimepickerOptions): LocaleOptions {\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\n        const localeConfig: LocaleOptions = {\n            numberingSystem: numberingSystem as NumberingSystem,\n            locale\n        };\n        const defaultConfig: LocaleOptions = {\n            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,\n            locale: NgxMatTimepickerAdapter.defaultLocale\n        };\n\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {NgxMatTimepickerClockFace} from \"../models/ngx-mat-timepicker-clock-face.interface\";\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {NgxMatTimepickerPeriods} from \"../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerAdapter} from \"./ngx-mat-timepicker-adapter\";\nimport {DateTime} from \"ts-luxon\";\n\nconst DEFAULT_HOUR: NgxMatTimepickerClockFace = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: NgxMatTimepickerClockFace = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class NgxMatTimepickerService {\n\n\n    set hour(hour: NgxMatTimepickerClockFace) {\n        this._hour$.next(hour);\n    }\n\n    set minute(minute: NgxMatTimepickerClockFace) {\n        this._minute$.next(minute);\n    }\n\n    set period(period: NgxMatTimepickerPeriods) {\n        const isPeriodValid = (period === NgxMatTimepickerPeriods.AM) || (period === NgxMatTimepickerPeriods.PM);\n\n        if (isPeriodValid) {\n            this._period$.next(period);\n        }\n    }\n\n    get selectedHour(): Observable<NgxMatTimepickerClockFace> {\n        return this._hour$.asObservable();\n    }\n\n    get selectedMinute(): Observable<NgxMatTimepickerClockFace> {\n        return this._minute$.asObservable();\n    }\n\n    get selectedPeriod(): Observable<NgxMatTimepickerPeriods> {\n        return this._period$.asObservable();\n    }\n\n    private _hour$ = new BehaviorSubject<NgxMatTimepickerClockFace>(DEFAULT_HOUR);\n    private _minute$ = new BehaviorSubject<NgxMatTimepickerClockFace>(DEFAULT_MINUTE);\n    private _period$ = new BehaviorSubject<NgxMatTimepickerPeriods>(NgxMatTimepickerPeriods.AM);\n\n    getFullTime(format: number): string {\n        const selectedHour = this._hour$.getValue().time;\n        const selectedMinute = this._minute$.getValue().time;\n        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\n        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\n        const period = format === 12 ? this._period$.getValue() : \"\";\n        const time = `${hour}:${minute} ${period}`.trim();\n\n        return NgxMatTimepickerAdapter.formatTime(time, {format});\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\n        /* Workaround to double error message*/\n        try {\n            if (NgxMatTimepickerAdapter.isTimeAvailable(time, min, max, \"minutes\", minutesGap)) {\n                this._setDefaultTime(time, format);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    private _resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = NgxMatTimepickerPeriods.AM;\n    }\n\n    private _setDefaultTime(time: string, format: number) {\n        const defaultTime = NgxMatTimepickerAdapter.parseTime(time, {format}).toJSDate();\n\n        // Check on null, because invalid date will be null\n        if (DateTime.fromJSDate(defaultTime) !== null) {\n            const period = time.substr(time.length - 2).toUpperCase();\n            const hour = defaultTime.getHours();\n\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as NgxMatTimepickerPeriods)};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = period as NgxMatTimepickerPeriods;\n\n        }\n        else {\n            this._resetTime();\n        }\n    }\n}\n\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\nfunction formatHourByPeriod(hour: number, period: NgxMatTimepickerPeriods): number {\n    switch (period) {\n        case NgxMatTimepickerPeriods.AM:\n            return hour === 0 ? 12 : hour;\n        case NgxMatTimepickerPeriods.PM:\n            return hour === 12 ? 12 : hour - 12;\n        default:\n            return hour;\n    }\n}\n","export enum NgxMatTimepickerUnits {\n    HOUR,\n    MINUTE\n}\n","import { InjectionToken } from \"@angular/core\";\n//\nimport { NgxMatTimepickerAdapter } from \"../services/ngx-mat-timepicker-adapter\";\n\nexport const NGX_MAT_TIMEPICKER_LOCALE = new InjectionToken<string>(\"TimeLocale\", {\n    providedIn: \"root\",\n    factory: () => NgxMatTimepickerAdapter.defaultLocale\n});\n","import {NgxMatTimepickerClockFace} from \"../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerAdapter} from \"../services/ngx-mat-timepicker-adapter\";\nimport {NgxMatTimepickerFormat} from \"../models/ngx-mat-timepicker-format.enum\";\nimport {NgxMatTimepickerDisabledConfig} from \"../models/ngx-mat-timepicker-disabled-config.interface\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n// @dynamic\nexport class NgxMatTimepickerUtils {\n\n    static disableHours(hours: NgxMatTimepickerClockFace[], config: NgxMatTimepickerDisabledConfig): NgxMatTimepickerClockFace[] {\n        if (config.min || config.max) {\n\n            return hours.map(value => {\n                const hour = config.format === 24 ? value.time : NgxMatTimepickerAdapter.formatHour(value.time, config.format, config.period);\n                const currentTime = DateTime.fromObject({hour}).toFormat(NgxMatTimepickerFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"hours\")\n                };\n            });\n        }\n\n        return hours;\n    }\n\n    static disableMinutes(minutes: NgxMatTimepickerClockFace[], selectedHour: number, config: NgxMatTimepickerDisabledConfig) {\n        if (config.min || config.max) {\n\n            const hour = NgxMatTimepickerAdapter.formatHour(selectedHour, config.format, config.period);\n\n            return minutes.map(value => {\n                const currentTime = DateTime.fromObject({\n                    hour,\n                    minute: value.time\n                }).toFormat(NgxMatTimepickerFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"minutes\")\n                };\n            });\n        }\n\n        return minutes;\n    }\n\n    static getHours(format: number): NgxMatTimepickerClockFace[] {\n        return Array(format).fill(1).map((v, i) => {\n            const angleStep = 30;\n            const time = v + i;\n            const angle = angleStep * time;\n\n            return {time: time === 24 ? 0 : time, angle};\n        });\n    }\n\n    static getMinutes(gap = 1): NgxMatTimepickerClockFace[] {\n        const minutesCount = 60;\n        const angleStep = 360 / minutesCount;\n        const minutes = [];\n\n        for (let i = 0; i < minutesCount; i++) {\n            const angle = angleStep * i;\n            if (i % gap === 0) {\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n            }\n        }\n\n        return minutes;\n    }\n\n    static isDigit(e: KeyboardEvent) {\n        // Allow: backspace, delete, tab, escape, enter\n        if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n            // Allow: Ctrl/cmd+A\n            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n            // Allow: Ctrl/cmd+C\n            (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n            // Allow: Ctrl/cmd+X\n            (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n            // Allow: home, end, left, right, up, down\n            (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n            return true;\n        }\n        return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n    }\n\n\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewEncapsulation\n} from \"@angular/core\";\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\nimport {MatSelectChange} from \"@angular/material/select\";\nimport {ThemePalette} from \"@angular/material/core\";\nimport {FloatLabelType} from \"@angular/material/form-field\";\n//\nimport {NgxMatTimepickerService} from \"../../services/ngx-mat-timepicker.service\";\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerTheme} from \"../../models/ngx-mat-timepicker-theme.interface\";\nimport {NgxMatTimepickerAdapter} from \"../../services/ngx-mat-timepicker-adapter\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime} from \"ts-luxon\";\nimport {Observable, Subject} from \"rxjs\";\nimport {distinctUntilChanged, map, takeUntil, tap} from \"rxjs/operators\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-field\",\n    templateUrl: \"./ngx-mat-timepicker-field.component.html\",\n    styleUrls: [\"./ngx-mat-timepicker-field.component.scss\"],\n    providers: [\n        NgxMatTimepickerService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: NgxMatTimepickerFieldComponent,\n            multi: true\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxMatTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    @Input()\n    set defaultTime(val: string) {\n        this._defaultTime = val;\n        this._isDefaultTime = !!val;\n    }\n\n    get floatLabel(): FloatLabelType {\n        return this._floatLabel;\n    }\n\n    @Input()\n    set floatLabel(newValue: FloatLabelType) {\n        this._floatLabel = newValue;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        this.minHour = this._format === 12 ? 1 : 0;\n        this.maxHour = this._format === 12 ? 12 : 23;\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this._updateTime(this.timepickerTime);\n        }\n        this._previousFormat = this._format;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === \"string\") {\n            this._max = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\n\n            return;\n        }\n        this._max = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === \"string\") {\n            this._min = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\n\n            return;\n        }\n        this._min = value;\n    }\n\n    @Input()\n    cancelBtnTmpl: TemplateRef<Node>;\n\n    @Input()\n    clockTheme: NgxMatTimepickerTheme;\n\n    @Input()\n    confirmBtnTmpl: TemplateRef<Node>;\n\n    @Input()\n    controlOnly: boolean;\n\n    @Input() disabled: boolean;\n    hour$: Observable<NgxMatTimepickerClockFace>;\n\n    hoursList: NgxMatTimepickerClockFace[];\n    isChangePeriodDisabled: boolean;\n    isTimeRangeSet: boolean;\n    maxHour = 12;\n    minHour = 1;\n    minute$: Observable<NgxMatTimepickerClockFace>;\n    minutesList: NgxMatTimepickerClockFace[];\n    period: NgxMatTimepickerPeriods = NgxMatTimepickerPeriods.AM;\n    periods: NgxMatTimepickerPeriods[] = [\n        NgxMatTimepickerPeriods.AM,\n        NgxMatTimepickerPeriods.PM\n    ];\n\n    @Output() timeChanged = new EventEmitter<string>();\n    timepickerTime: string;\n\n    timeUnit = NgxMatTimepickerUnits;\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\n\n    private _color: ThemePalette = \"primary\";\n    private _defaultTime: string;\n    private _floatLabel: FloatLabelType = \"never\";\n    private _format = 12;\n    private _isDefaultTime: boolean;\n    private _isFirstTimeChange: boolean = true;\n    private _max: string | DateTime;\n    private _min: string | DateTime;\n    private _previousFormat: number;\n    private _selectedHour: number;\n    private _subsCtrl$ = new Subject();\n\n    constructor(private _timepickerService: NgxMatTimepickerService,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n    }\n\n    changeHour(hour: number): void {\n        this._timepickerService.hour = this.hoursList.find(h => h.time === hour);\n        this._changeTime();\n    }\n\n    changeMinute(minute: number): void {\n        this._timepickerService.minute = this.minutesList.find(m => m.time === minute);\n        this._changeTime();\n    }\n\n    changePeriod(event: MatSelectChange): void {\n        this._timepickerService.period = event.value as NgxMatTimepickerPeriods;\n        this._changeTime();\n    }\n\n    ngOnDestroy(): void {\n        this._subsCtrl$.next();\n        this._subsCtrl$.complete();\n    }\n\n    ngOnInit() {\n        this._initTime(this.defaultTime);\n\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n        this.minutesList = NgxMatTimepickerUtils.getMinutes();\n        this.isTimeRangeSet = !!(this.min || this.max);\n\n        this.hour$ = this._timepickerService.selectedHour.pipe(\n            tap((clockTime: NgxMatTimepickerClockFace) => this._selectedHour = clockTime.time),\n            map(this._changeDefaultTimeValue.bind(this)),\n            tap(() => this.isTimeRangeSet && this._updateAvailableMinutes())\n        ) as Observable<NgxMatTimepickerClockFace>;\n        this.minute$ = this._timepickerService.selectedMinute.pipe(\n            map(this._changeDefaultTimeValue.bind(this)),\n            tap(() => this._isFirstTimeChange = false)\n        ) as Observable<NgxMatTimepickerClockFace>;\n\n        if (this.format === 12) {\n            this._timepickerService.selectedPeriod.pipe(\n                distinctUntilChanged<NgxMatTimepickerPeriods>(),\n                tap((period: NgxMatTimepickerPeriods) => this.period = period),\n                tap(period => this.isChangePeriodDisabled = this._isPeriodDisabled(period)),\n                takeUntil(this._subsCtrl$)\n            ).subscribe(() => this.isTimeRangeSet && this._updateAvailableTime());\n        }\n\n    }\n\n    onTimeSet(time: string): void {\n        this._updateTime(time);\n        this._emitLocalTimeChange(time);\n    }\n\n    registerOnChange(fn: any): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(_fn_: any): void {\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    writeValue(val: string): void {\n        if (val) {\n            this._initTime(val);\n        }\n        else {\n            this._resetTime();\n        }\n    }\n\n    private _changeDefaultTimeValue(clockFaceTime: NgxMatTimepickerClockFace): NgxMatTimepickerClockFace {\n        if (!this._isDefaultTime && this._isFirstTimeChange) {\n            return {...clockFaceTime, time: null};\n        }\n\n        return clockFaceTime;\n    }\n\n    private _changeTime(): void {\n        const time = this._timepickerService.getFullTime(this.format);\n        this.timepickerTime = time;\n\n        this._emitLocalTimeChange(time);\n    }\n\n    private _emitLocalTimeChange(time: string): void {\n        const localTime = NgxMatTimepickerAdapter.toLocaleTimeString(time, {format: this.format, locale: this._locale});\n\n        this._onChange(localTime);\n        this.timeChanged.emit(localTime);\n    }\n\n    private _initTime(time): void {\n        const isDefaultTimeAvailable = NgxMatTimepickerAdapter\n        .isTimeAvailable(time, this.min as DateTime, this.max as DateTime, \"minutes\", null, this.format);\n        if (!isDefaultTimeAvailable) {\n            if (this.min) {\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.min as DateTime, this.format));\n\n                return;\n            }\n            if (this.max) {\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.max as DateTime, this.format));\n\n                return;\n            }\n        }\n        this._updateTime(time);\n    }\n\n    private _isPeriodDisabled(period): boolean {\n        return NgxMatTimepickerUtils.disableHours(NgxMatTimepickerUtils.getHours(12), {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: 12,\n            period: period === NgxMatTimepickerPeriods.AM ? NgxMatTimepickerPeriods.PM : NgxMatTimepickerPeriods.AM\n        }).every(time => time.disabled);\n    }\n\n    private _onChange: (value: string) => void = () => {\n    }\n\n    private _resetTime(): void {\n        this._timepickerService.hour = {angle: 0, time: null};\n        this._timepickerService.minute = {angle: 0, time: null};\n    }\n\n    private _updateAvailableHours(): void {\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private _updateAvailableMinutes(): void {\n        this.minutesList = NgxMatTimepickerUtils.disableMinutes(this.minutesList, this._selectedHour, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private _updateAvailableTime(): void {\n        this._updateAvailableHours();\n        if (this._selectedHour) {\n            this._updateAvailableMinutes();\n        }\n    }\n\n    private _updateTime(time: string): void {\n        if (time) {\n            const formattedTime = NgxMatTimepickerAdapter.formatTime(time, {locale: this._locale, format: this.format});\n            this._timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min as DateTime, this.max as DateTime, this.format);\n            this.timepickerTime = formattedTime;\n        }\n    }\n\n}\n","import {Directive} from \"@angular/core\";\n\n/* To override a default toggle icon */\n@Directive({selector: \"[ngxMatTimepickerToggleIcon]\"})\n\nexport class NgxMatTimepickerToggleIconDirective {\n}\n","import {Injectable} from \"@angular/core\";\n//\nimport {Observable, Subject} from \"rxjs\";\nimport {shareReplay} from \"rxjs/operators\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class NgxMatTimepickerEventService {\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this._backdropClick$.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this._keydownEvent$.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    private _backdropClick$: Subject<MouseEvent> = new Subject();\n    private _keydownEvent$: Subject<KeyboardEvent> = new Subject();\n\n    constructor() {\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case \"click\":\n                this._backdropClick$.next(event as MouseEvent);\n                break;\n            case \"keydown\":\n                this._keydownEvent$.next(event as KeyboardEvent);\n                break;\n            default:\n                throw new Error(\"no such event type\");\n        }\n    }\n\n}\n","import {InjectionToken, Provider} from \"@angular/core\";\n//\nimport {NgxMatTimepickerConfig} from \"../models/ngx-mat-timepicker-config.interface\";\n\nexport const NGX_MAT_TIMEPICKER_CONFIG = new InjectionToken<NgxMatTimepickerConfig>(\"NGX_MAT_TIMEPICKER_CONFIG\");\n\nexport function provideNgxMatTimepickerOptions(config: NgxMatTimepickerConfig): Provider[] {\n    return [\n        {provide: NGX_MAT_TIMEPICKER_CONFIG, useValue: config},\n    ];\n}\n","import {Directive, HostListener, Inject, Input, OnDestroy, OnInit, Optional} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerEventService} from \"../services/ngx-mat-timepicker-event.service\";\nimport {NgxMatTimepickerService} from \"../services/ngx-mat-timepicker.service\";\nimport {NgxMatTimepickerAdapter} from \"../services/ngx-mat-timepicker-adapter\";\n//\nimport {NgxMatTimepickerUnits} from \"../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerClockFace} from \"../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerPeriods} from \"../models/ngx-mat-timepicker-periods.enum\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NGX_MAT_TIMEPICKER_CONFIG} from \"../tokens/ngx-mat-timepicker-config.token\";\n//\nimport {Observable, Subject} from \"rxjs\";\nimport {shareReplay, takeUntil} from \"rxjs/operators\";\n\n@Directive({\n    selector: \"[ngxMatTimepickerBase]\"\n})\nexport class NgxMatTimepickerBaseDirective implements OnInit, OnDestroy {\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    @Input()\n    set defaultTime(time: string) {\n        this._defaultTime = time;\n        this._setDefaultTime(time);\n    }\n\n    activeTimeUnit: NgxMatTimepickerUnits = NgxMatTimepickerUnits.HOUR;\n    selectedHour: Observable<NgxMatTimepickerClockFace>;\n    selectedMinute: Observable<NgxMatTimepickerClockFace>;\n    selectedPeriod: Observable<NgxMatTimepickerPeriods>;\n    timeUnit: typeof NgxMatTimepickerUnits = NgxMatTimepickerUnits;\n\n    protected _color: ThemePalette = \"primary\";\n    protected _defaultTime: string;\n    protected _subsCtrl$ = new Subject();\n\n    constructor(protected _timepickerSrv: NgxMatTimepickerService,\n                protected _eventSrv: NgxMatTimepickerEventService,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) protected _locale: string,\n                @Inject(NGX_MAT_TIMEPICKER_CONFIG) @Optional() public data) {\n\n        this.color = data.color;\n        this.defaultTime = data.defaultTime;\n    }\n\n    changePeriod(period: NgxMatTimepickerPeriods): void {\n        this._timepickerSrv.period = period;\n        this._onTimeChange();\n    }\n\n    changeTimeUnit(unit: NgxMatTimepickerUnits): void {\n        this.activeTimeUnit = unit;\n    }\n\n    close(): void {\n        this.data.timepickerBaseRef.close();\n    }\n\n    ngOnDestroy(): void {\n        this._subsCtrl$.next();\n        this._subsCtrl$.complete();\n    }\n\n    ngOnInit(): void {\n        this._defineTime();\n        this.selectedHour = this._timepickerSrv.selectedHour\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n        this.selectedMinute = this._timepickerSrv.selectedMinute\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n        this.selectedPeriod = this._timepickerSrv.selectedPeriod\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n        this.data.timepickerBaseRef.timeUpdated.pipe(takeUntil(this._subsCtrl$))\n            .subscribe(this._setDefaultTime.bind(this));\n    }\n\n    onHourChange(hour: NgxMatTimepickerClockFace): void {\n        this._timepickerSrv.hour = hour;\n        this._onTimeChange();\n    }\n\n    onHourSelected(hour: number): void {\n        if (!this.data.hoursOnly) {\n            this.changeTimeUnit(NgxMatTimepickerUnits.MINUTE);\n        }\n        this.data.timepickerBaseRef.hourSelected.next(hour);\n    }\n\n    @HostListener(\"keydown\", [\"$event\"])\n    onKeydown(e: any): void {\n        this._eventSrv.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    onMinuteChange(minute: NgxMatTimepickerClockFace): void {\n        this._timepickerSrv.minute = minute;\n        this._onTimeChange();\n    }\n\n    setTime(): void {\n        this.data.timepickerBaseRef.timeSet.next(this._timepickerSrv.getFullTime(this.data.format));\n        this.close();\n    }\n\n    protected _defineTime(): void {\n        const minTime = this.data.minTime;\n\n        if (minTime && (!this.data.time && !this.data.defaultTime)) {\n            const time = NgxMatTimepickerAdapter.fromDateTimeToString(minTime, this.data.format);\n\n            this._setDefaultTime(time);\n        }\n    }\n\n    protected _onTimeChange(): void {\n        const time = NgxMatTimepickerAdapter.toLocaleTimeString(this._timepickerSrv.getFullTime(this.data.format), {\n            locale: this._locale,\n            format: this.data.format\n        });\n\n        this.data.timepickerBaseRef.timeChanged.emit(time);\n    }\n\n    protected _setDefaultTime(time: string): void {\n        this._timepickerSrv.setDefaultTimeIfAvailable(\n            time, this.data.minTime, this.data.maxTime, this.data.format, this.data.minutesGap);\n    }\n}\n","import {Component, Inject, OnDestroy, OnInit, ViewEncapsulation} from \"@angular/core\";\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\n//\nimport {NgxMatTimepickerBaseDirective} from \"../../directives/ngx-mat-timepicker-base.directive\";\nimport {NgxMatTimepickerConfig} from \"../../models/ngx-mat-timepicker-config.interface\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerService} from \"../../services/ngx-mat-timepicker.service\";\nimport {NgxMatTimepickerEventService} from \"../../services/ngx-mat-timepicker-event.service\";\n\n//\n\n@Component({\n    selector: \"ngx-mat-timepicker-dialog\",\n    styleUrls: [\"./ngx-mat-timepicker-dialog.component.scss\"],\n    templateUrl: \"./ngx-mat-timepicker-dialog.component.html\",\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxMatTimepickerDialogComponent extends NgxMatTimepickerBaseDirective {\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: NgxMatTimepickerConfig,\n                protected _dialogRef: MatDialogRef<NgxMatTimepickerDialogComponent>,\n                timepickerSrv: NgxMatTimepickerService,\n                eventSrv: NgxMatTimepickerEventService,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) locale: string) {\n\n        super(timepickerSrv, eventSrv, locale, data);\n    }\n\n    close(): void {\n        this._dialogRef.close();\n    }\n\n}\n","import {Component, EventEmitter, HostBinding, Input, Output, TemplateRef, ViewContainerRef} from \"@angular/core\";\nimport {CdkOverlayOrigin, ConnectedPosition, Overlay, OverlayRef} from \"@angular/cdk/overlay\";\nimport {MatDialog, MatDialogRef} from \"@angular/material/dialog\";\nimport {ThemePalette} from \"@angular/material/core\";\nimport {SmpDomService} from \"smp-core-utils\";\n//\nimport {NgxMatTimepickerEventService} from \"../../services/ngx-mat-timepicker-event.service\";\nimport {NgxMatTimepickerDirective} from \"../../directives/ngx-mat-timepicker.directive\";\nimport {NgxMatTimepickerRef} from \"../../models/ngx-mat-timepicker-ref.interface\";\nimport {NgxMatTimepickerTheme} from \"../../models/ngx-mat-timepicker-theme.interface\";\nimport {NgxMatTimepickerDialogComponent} from \"../ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component\";\nimport {NGX_MAT_TIMEPICKER_CONFIG} from \"../../tokens/ngx-mat-timepicker-config.token\";\n//\nimport {DateTime} from \"ts-luxon\";\nimport {Subject} from \"rxjs\";\n\nlet config;\n\n@Component({\n    selector: \"ngx-mat-timepicker\",\n    template: `\n\t\t<ng-template\n\t\t\t\tcdkConnectedOverlay\n\t\t\t\t[cdkConnectedOverlayPositions]=\"overlayPositions\"\n\t\t\t\t[cdkConnectedOverlayHasBackdrop]=\"!0\"\n\t\t\t\tcdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n\t\t\t\t(backdropClick)=\"close()\"\n\t\t\t\t[cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n\t\t\t\t[cdkConnectedOverlayOpen]=\"showPicker\">\n\t\t\t<ngx-mat-timepicker-standalone></ngx-mat-timepicker-standalone>\n\t\t</ng-template>`,\n    providers: [\n        {\n            provide: NGX_MAT_TIMEPICKER_CONFIG, useFactory() {\n                return config;\n            }\n        }\n    ]\n})\nexport class NgxMatTimepickerComponent implements NgxMatTimepickerRef {\n\n    static nextId: number = 0;\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    get disabled(): boolean {\n        return this._timepickerInput && this._timepickerInput.disabled;\n    }\n\n    get format(): number {\n        return this._timepickerInput ? this._timepickerInput.format : this._format;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get inputElement(): HTMLElement {\n        return this._timepickerInput && this._timepickerInput.element;\n    }\n\n    get maxTime(): DateTime {\n        return this._timepickerInput ? (this._timepickerInput.max as DateTime) : this.max;\n    }\n\n    get minTime(): DateTime {\n        return this._timepickerInput ? (this._timepickerInput.min as DateTime) : this.min;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Input()\n    set minutesGap(gap: number) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get overlayOrigin(): CdkOverlayOrigin {\n        return this._timepickerInput ? this._timepickerInput.cdkOverlayOrigin : void 0;\n    }\n\n    get time(): string {\n        return this._timepickerInput && this._timepickerInput.value;\n    }\n\n    set ngxMatTimepickerTheme(newValue: NgxMatTimepickerTheme) {\n        this._ngxMatTimepickerTheme = newValue;\n    }\n\n    @Input() appendToInput: boolean;\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Output() closed = new EventEmitter<void>();\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input() defaultTime: string;\n    @Input() disableAnimation: boolean;\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() enableKeyboardInput: boolean;\n    @Output() hourSelected = new EventEmitter<number>();\n    @Input() hoursOnly = false;\n    @HostBinding(\"id\") id: string = `ngx_mat_timepicker_${++NgxMatTimepickerComponent.nextId}`;\n    @Input() isEsc = !0;\n    @Input() max: DateTime;\n    @Input() min: DateTime;\n    @Output() opened = new EventEmitter<void>();\n    overlayPositions: ConnectedPosition[] = [\n        {\n            originX: \"center\",\n            originY: \"bottom\",\n            overlayX: \"center\",\n            overlayY: \"top\",\n            offsetY: 0\n        },\n        {\n            originX: \"center\",\n            originY: \"top\",\n            overlayX: \"center\",\n            overlayY: \"bottom\",\n            offsetY: 0\n        }\n    ];\n    @Input() preventOverlayClick: boolean;\n    showPicker: boolean = !1;\n    @Input() theme: NgxMatTimepickerTheme;\n    @Output() timeChanged = new EventEmitter<string>();\n    @Input() timepickerClass: string;\n    @Output() timeSet = new EventEmitter<string>();\n    timeUpdated = new Subject<string>(); // used in the dialog, check if a better approach can be used\n\n    private _color: ThemePalette = \"primary\";\n    private _dialogRef: MatDialogRef<NgxMatTimepickerDialogComponent, void>;\n    private _format: number;\n    private _minutesGap: number;\n    private _ngxMatTimepickerTheme: NgxMatTimepickerTheme;\n    private _overlayRef: OverlayRef;\n    private _timepickerInput: NgxMatTimepickerDirective;\n\n    constructor(\n        private _vcr: ViewContainerRef,\n        private _eventService: NgxMatTimepickerEventService,\n        private _dialog: MatDialog,\n        private _overlay: Overlay,\n        private _domService: SmpDomService) {\n    }\n\n    close(): void {\n        if (this.appendToInput) {\n            this._overlayRef && this._overlayRef.dispose();\n        }\n        else {\n            this._dialogRef && this._dialogRef.close();\n        }\n        this.showPicker = !1;\n        this.closed.emit();\n    }\n\n    open(): void {\n        config = {\n            timepickerBaseRef: this,\n            time: this.time,\n            defaultTime: this.defaultTime,\n            maxTime: this.maxTime,\n            minTime: this.minTime,\n            format: this.format,\n            minutesGap: this.minutesGap,\n            disableAnimation: this.disableAnimation,\n            cancelBtnTmpl: this.cancelBtnTmpl,\n            confirmBtnTmpl: this.confirmBtnTmpl,\n            editableHintTmpl: this.editableHintTmpl,\n            disabled: this.disabled,\n            enableKeyboardInput: this.enableKeyboardInput,\n            preventOverlayClick: this.preventOverlayClick,\n            appendToInput: this.appendToInput,\n            hoursOnly: this.hoursOnly,\n            theme: this.theme || this._ngxMatTimepickerTheme,\n            timepickerClass: this.timepickerClass,\n            inputElement: this.inputElement,\n            color: this.color\n        };\n\n        if (this.appendToInput) {\n            this.showPicker = !0;\n        }\n        else {\n            this._dialogRef = this._dialog.open(NgxMatTimepickerDialogComponent, {\n                panelClass: \"ngx-mat-timepicker-dialog\",\n                data: {\n                    ...config\n                }\n            });\n            this._dialogRef\n                .afterClosed()\n                .subscribe(() => {\n                    this.closed.emit();\n                });\n        }\n        this.opened.emit();\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: NgxMatTimepickerDirective): void {\n        if (this._timepickerInput) {\n            throw Error(\"A Timepicker can only be associated with a single input.\");\n        }\n        this._timepickerInput = input;\n    }\n\n    unregisterInput(): void {\n        this._timepickerInput = void 0;\n    }\n\n    updateTime(time: string): void {\n        this.timeUpdated.next(time);\n    }\n}\n","import {Component, ContentChild, Input} from \"@angular/core\";\nimport {NgxMatTimepickerToggleIconDirective} from \"../../directives/ngx-mat-timepicker-toggle-icon.directive\";\nimport {NgxMatTimepickerComponent} from \"../ngx-mat-timepicker/ngx-mat-timepicker.component\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-toggle\",\n    templateUrl: \"ngx-mat-timepicker-toggle.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-toggle.component.scss\"]\n})\n\nexport class NgxMatTimepickerToggleComponent {\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    @ContentChild(NgxMatTimepickerToggleIconDirective, {static: true}) customIcon: NgxMatTimepickerToggleIconDirective;\n\n    @Input(\"for\") timepicker: NgxMatTimepickerComponent;\n\n    private _disabled: boolean;\n\n    open(event): void {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    HostListener,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges, Optional\n} from \"@angular/core\";\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\n//\nimport {NgxMatTimepickerComponent} from \"../components/ngx-mat-timepicker/ngx-mat-timepicker.component\";\nimport {NgxMatTimepickerAdapter} from \"../services/ngx-mat-timepicker-adapter\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\n//\nimport {DateTime} from \"ts-luxon\";\nimport {Subject} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\nimport {CdkOverlayOrigin} from \"@angular/cdk/overlay\";\nimport {MatFormField} from \"@angular/material/form-field\";\n\n@Directive({\n    selector: \"[ngxMatTimepicker]\",\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: NgxMatTimepickerDirective,\n            multi: true\n        }\n    ],\n    // tslint:disable-next-line:no-host-metadata-property\n    host: {\n        \"[disabled]\": \"disabled\",\n        \"(blur)\": \"onTouched()\",\n    },\n})\nexport class NgxMatTimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    get element(): HTMLElement {\n        return this._elementRef && this._elementRef.nativeElement;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = +value === 24 ? 24 : 12;\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.value = this._value;\n            this._timepicker.updateTime(this._value);\n        }\n        this._previousFormat = this._format;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === \"string\") {\n            this._max = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\n\n            return;\n        }\n        this._max = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === \"string\") {\n            this._min = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\n\n            return;\n        }\n        this._min = value;\n    }\n\n    @Input(\"ngxMatTimepicker\")\n    set timepicker(picker: NgxMatTimepickerComponent) {\n        this._registerTimepicker(picker);\n    }\n\n    get value(): string {\n        if (!this._value) {\n            return \"\";\n        }\n\n        return NgxMatTimepickerAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this._locale});\n    }\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = \"\";\n            this._updateInputValue();\n\n            return;\n        }\n        const time = NgxMatTimepickerAdapter.formatTime(value, {locale: this._locale, format: this.format});\n        const isAvailable = NgxMatTimepickerAdapter.isTimeAvailable(\n            time,\n            this._min as DateTime,\n            this._max as DateTime,\n            \"minutes\",\n            this._timepicker.minutesGap,\n            this._format\n        );\n\n        if (isAvailable) {\n            this._value = time;\n            this._updateInputValue();\n\n            return;\n        }\n        console.warn(\"Selected time doesn't match min or max value\");\n    }\n\n    private set _defaultTime(time: string) {\n        this._timepicker.defaultTime = NgxMatTimepickerAdapter.formatTime(time, {\n            locale: this._locale,\n            format: this.format\n        });\n    }\n\n    // TODO: IMPROVE DETECTING (INJECT) MAT-FORM-FIELD IF PRESENT\n    @HostBinding(\"attr.cdkOverlayOrigin\") cdkOverlayOrigin: CdkOverlayOrigin =\n        new CdkOverlayOrigin(this._matFormField ? this._matFormField.getConnectedOverlayOrigin() : this._elementRef);\n    @Input() disableClick: boolean;\n    @Input() disabled: boolean;\n\n    private _format = 12;\n    private _max: string | DateTime;\n    private _min: string | DateTime;\n    private _previousFormat: number;\n    private _subsCtrl$: Subject<void> = new Subject<void>();\n    private _timepicker: NgxMatTimepickerComponent;\n    private _value: string = \"\";\n\n    constructor(private _elementRef: ElementRef,\n                @Optional() @Inject(MatFormField) private _matFormField: MatFormField,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && changes.value.currentValue) {\n            this._defaultTime = changes.value.currentValue;\n        }\n    }\n\n    ngOnDestroy() {\n        this._unregisterTimepicker();\n        this._subsCtrl$.next();\n        this._subsCtrl$.complete();\n    }\n\n    @HostListener(\"click\", [\"$event\"])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    onTouched = () => {\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    @HostListener(\"change\", [\"$event\"])\n    updateValue(value: string) {\n        this.value = value;\n        this._onChange(value);\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        if (value) {\n            this._defaultTime = value;\n        }\n    }\n\n    private _onChange: (value: any) => void = () => {\n    }\n\n    private _registerTimepicker(picker: NgxMatTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this._timepicker.timeSet\n                .pipe(takeUntil(this._subsCtrl$))\n                .subscribe((time: string) => {\n                    this.value = time;\n                    this._onChange(this.value);\n                    this.onTouched();\n                    this._defaultTime = this._value;\n                });\n        }\n        else {\n            throw new Error(\"NgxMatTimepickerComponent is not defined.\" +\n                \" Please make sure you passed the timepicker to ngxMatTimepicker directive\");\n        }\n    }\n\n    private _unregisterTimepicker(): void {\n        if (this._timepicker) {\n            this._timepicker.unregisterInput();\n        }\n    }\n\n    private _updateInputValue(): void {\n        this._elementRef.nativeElement.value = this.value;\n    }\n\n}\n","import {AfterViewInit, Directive, ElementRef, Input} from \"@angular/core\";\nimport {NgxMatTimepickerTheme} from \"../models/ngx-mat-timepicker-theme.interface\";\n\n@Directive({selector: \"[ngxMatTimepickerTheme]\"})\nexport class NgxMatTimepickerThemeDirective implements AfterViewInit {\n\n    @Input(\"ngxMatTimepickerTheme\")\n    theme: NgxMatTimepickerTheme;\n\n    private _element: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        this._element = elementRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n        if (this.theme) {\n            this.setTheme(this.theme);\n        }\n    }\n\n    private setTheme(theme): void {\n        for (const val in theme) {\n            if (theme.hasOwnProperty(val)) {\n                if (typeof theme[val] === \"string\") {\n                    for (const prop in theme) {\n                        if (theme.hasOwnProperty(prop)) {\n                            this._element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n                        }\n                    }\n\n                    return;\n                }\n                this.setTheme(theme[val]);\n            }\n\n        }\n    }\n}\n\nfunction camelCaseToDash(myStr) {\n    return myStr.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n","import {Directive, EventEmitter, Input, Optional, Output} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n@Directive({\n    selector: \"[ngxMatTimepickerHoursFace]\"\n})\nexport class NgxMatTimepickerHoursFaceDirective {\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input()\n    set format(newValue: 12 | 24) {\n        this._format = newValue;\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n    }\n\n    get format(): 12 | 24 {\n        return this._format;\n    }\n\n    @Output() hourChange = new EventEmitter<NgxMatTimepickerClockFace>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    hoursList: NgxMatTimepickerClockFace[] = [];\n    @Input() maxTime: DateTime;\n    @Input() minTime: DateTime;\n    @Input() selectedHour: NgxMatTimepickerClockFace;\n\n    protected _color: ThemePalette = \"primary\";\n    protected _format: 12 | 24 = 24;\n\n    constructor() {\n    }\n\n    onTimeSelected(time: number): void {\n        this.hourSelected.next(time);\n    }\n}\n","import {AfterContentInit, ChangeDetectionStrategy, Component} from \"@angular/core\";\n//\nimport {NgxMatTimepickerHoursFaceDirective} from \"../ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-24-hours-face\",\n    templateUrl: \"ngx-mat-timepicker-24-hours-face.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMatTimepicker24HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective implements AfterContentInit {\n\n    constructor() {\n        super();\n        this.format = 24;\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import {ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges} from \"@angular/core\";\n//\nimport {NgxMatTimepickerHoursFaceDirective} from \"../ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive\";\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-12-hours-face\",\n    templateUrl: \"ngx-mat-timepicker-12-hours-face.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMatTimepicker12HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective implements OnChanges {\n\n    @Input() period: NgxMatTimepickerPeriods;\n\n    constructor() {\n        super();\n        this.format = 12;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.period && changes.period.currentValue) {\n            this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-minutes-face\",\n    templateUrl: \"./ngx-mat-timepicker-minutes-face.component.html\"\n})\nexport class NgxMatTimepickerMinutesFaceComponent implements OnChanges {\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input() format: number;\n    @Input() maxTime: DateTime;\n    @Input() minTime: DateTime;\n\n    @Output() minuteChange = new EventEmitter<NgxMatTimepickerClockFace>();\n    @Input() minutesGap: number;\n\n    minutesList: NgxMatTimepickerClockFace[] = [];\n    @Input() period: NgxMatTimepickerPeriods;\n    @Input() selectedHour: number;\n\n    @Input() selectedMinute: NgxMatTimepickerClockFace;\n    timeUnit = NgxMatTimepickerUnits;\n\n    private _color: ThemePalette = \"primary\";\n\n    constructor() {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.period && changes.period.currentValue) {\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\n            this.minutesList = NgxMatTimepickerUtils.disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\n\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    }\n    else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    }\n    else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    }\n    else {// I quarter\n        return currentAngle;\n    }\n}\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: \"75px\",\n        top: \"calc(50% - 75px)\"\n    },\n    large: {\n        height: \"103px\",\n        top: \"calc(50% - 103px)\"\n    }\n};\n\n@Component({\n    selector: \"ngx-mat-timepicker-face\",\n    templateUrl: \"./ngx-mat-timepicker-face.component.html\",\n    styleUrls: [\"./ngx-mat-timepicker-face.component.scss\"],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMatTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    @ViewChild(\"clockFace\", {static: true}) clockFace: ElementRef;\n    @ViewChild(\"clockHand\", {static: true, read: ElementRef}) clockHand: ElementRef;\n\n    @Input()\n    color: ThemePalette = \"primary\";\n\n    @Input()\n    faceTime: NgxMatTimepickerClockFace[];\n\n    @Input()\n    format: number;\n\n    innerClockFaceSize = 85;\n    isClockFaceDisabled: boolean;\n\n    @Input()\n    minutesGap: number;\n\n    @Input()\n    selectedTime: NgxMatTimepickerClockFace;\n\n\n    @Output()\n    timeChange = new EventEmitter<NgxMatTimepickerClockFace>();\n\n    @Output()\n    timeSelected = new EventEmitter<number>();\n\n    timeUnit = NgxMatTimepickerUnits;\n\n    @Input()\n    unit: NgxMatTimepickerUnits;\n\n    private _isStarted: boolean;\n    private _touchEndHandler: () => any;\n    private _touchStartHandler: () => any;\n\n    ngAfterViewInit() {\n        this._setClockHandPosition();\n        this._addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes.faceTime;\n        const selectedTimeChanges = changes.selectedTime;\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this._setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this._selectAvailableTime());\n        }\n    }\n\n    ngOnDestroy() {\n        this._removeTouchEvents();\n    }\n\n    @HostListener(\"mousedown\", [\"$event\"])\n    onMousedown(e: any) {\n        e.preventDefault();\n        this._isStarted = true;\n    }\n\n    @HostListener(\"mouseup\", [\"$event\"])\n    onMouseup(e: any) {\n        e.preventDefault();\n        this._isStarted = false;\n    }\n\n    @HostListener(\"click\", [\"$event\"])\n    @HostListener(\"touchmove\", [\"$event.changedTouches[0]\"])\n    @HostListener(\"touchend\", [\"$event.changedTouches[0]\"])\n    @HostListener(\"mousemove\", [\"$event\"])\n    selectTime(e: any): void {\n\n        if (!this._isStarted && (e instanceof MouseEvent && e.type !== \"click\")) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this._isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === NgxMatTimepickerUnits.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\n        const roundedAngle = roundAngle(circleAngle, angleStep);\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this._isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n\n    }\n\n\n    trackByTime(_item_, time: NgxMatTimepickerClockFace): string | number {\n        return time.time;\n    }\n\n    private _addTouchEvents(): void {\n        this._touchStartHandler = this.onMousedown.bind(this);\n        this._touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener(\"touchstart\", this._touchStartHandler);\n        this.clockFace.nativeElement.addEventListener(\"touchend\", this._touchEndHandler);\n    }\n\n    private _decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private _increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n\n    private _isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private _removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener(\"touchstart\", this._touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener(\"touchend\", this._touchEndHandler);\n    }\n\n    private _selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private _setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this._decreaseClockHand();\n            }\n            else {\n                this._increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    TemplateRef\n} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime, Info} from \"ts-luxon\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-dial\",\n    templateUrl: \"ngx-mat-timepicker-dial.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-dial.component.scss\"],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMatTimepickerDialComponent implements OnChanges {\n\n    @Input() activeTimeUnit: NgxMatTimepickerUnits;\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() format: number;\n    @Input() hour: number | string;\n    @Output() hourChanged = new EventEmitter<NgxMatTimepickerClockFace>();\n\n    hours: NgxMatTimepickerClockFace[];\n    @Input() hoursOnly: boolean;\n    @Input() isEditable: boolean;\n\n    isHintVisible: boolean;\n    @Input() maxTime: DateTime;\n    meridiems = Info.meridiems({locale: this._locale});\n    @Input() minTime: DateTime;\n    @Input() minute: number | string;\n    @Output() minuteChanged = new EventEmitter<NgxMatTimepickerClockFace>();\n    minutes: NgxMatTimepickerClockFace[];\n    @Input() minutesGap: number;\n    @Input() period: NgxMatTimepickerPeriods;\n\n    @Output() periodChanged = new EventEmitter<NgxMatTimepickerPeriods>();\n\n    timeUnit = NgxMatTimepickerUnits;\n    @Output() timeUnitChanged = new EventEmitter<NgxMatTimepickerUnits>();\n\n    private _color: ThemePalette = \"primary\";\n\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n    }\n\n    changeHour(hour: NgxMatTimepickerClockFace): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: NgxMatTimepickerClockFace): void {\n        this.minuteChanged.next(minute);\n    }\n\n    changePeriod(period: NgxMatTimepickerPeriods): void {\n        this.periodChanged.next(period);\n    }\n\n    changeTimeUnit(unit: NgxMatTimepickerUnits): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    hideHint(): void {\n        this.isHintVisible = false;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const periodChanged = changes.period && changes.period.currentValue;\n        if (periodChanged || changes.format && changes.format.currentValue) {\n            const hours = NgxMatTimepickerUtils.getHours(this.format);\n\n            this.hours = NgxMatTimepickerUtils.disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (periodChanged || changes.hour && changes.hour.currentValue) {\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\n\n            this.minutes = NgxMatTimepickerUtils.disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    showHint(): void {\n        this.isHintVisible = true;\n    }\n}\n","export enum NgxMatTimepickerMeasure {\n    hour = \"hour\",\n    minute = \"minute\"\n}\n","import {Inject, Injectable, Pipe, PipeTransform} from \"@angular/core\";\n//\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerUnits} from \"../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerMeasure} from \"../models/ngx-mat-timepicker-measures.enum\";\n//\nimport {DateTime, NumberingSystem} from \"ts-luxon\";\n\n@Pipe({\n    name: \"ngxMatTimepickerParser\"\n})\n@Injectable()\nexport class NgxMatTimepickerParserPipe implements PipeTransform {\n\n    private readonly _numberingSystem: NumberingSystem;\n\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n        this._numberingSystem = DateTime.local().setLocale(this._locale).resolvedLocaleOpts().numberingSystem as NumberingSystem;\n    }\n\n    transform(time: string | number, timeUnit = NgxMatTimepickerUnits.HOUR): string {\n        if (time == null || time === \"\") {\n            return \"\";\n        }\n\n        if (!isNaN(+time)) {\n            return `${time}`;\n        }\n\n        if (timeUnit === NgxMatTimepickerUnits.MINUTE) {\n            return this._parseTime(time, \"mm\", NgxMatTimepickerMeasure.minute).toString();\n        }\n\n        return this._parseTime(time, \"HH\", NgxMatTimepickerMeasure.hour).toString();\n    }\n\n    private _parseTime(time: string | number, format: string, timeMeasure: NgxMatTimepickerMeasure): number {\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this._numberingSystem})[timeMeasure];\n        if (!isNaN(parsedTime)) {\n            return parsedTime;\n        }\n\n        throw new Error(`Cannot parse time - ${time}`);\n    }\n\n}\n","import {Component, EventEmitter, OnDestroy, Input, Output, ElementRef, AfterViewInit} from \"@angular/core\";\n//\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerParserPipe} from \"../../pipes/ngx-mat-timepicker-parser.pipe\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n\nfunction retainSelection() {\n    this.selectionStart = this.selectionEnd;\n}\n\n@Component({\n    selector: \"ngx-mat-timepicker-dial-control\",\n    templateUrl: \"ngx-mat-timepicker-dial-control.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-dial-control.component.scss\"],\n    providers: [NgxMatTimepickerParserPipe]\n})\nexport class NgxMatTimepickerDialControlComponent implements AfterViewInit, OnDestroy {\n\n    private get _selectedTime(): NgxMatTimepickerClockFace {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    @Input()\n    disabled: boolean;\n\n    @Output()\n    focused = new EventEmitter<void>();\n\n    @Input()\n    isActive: boolean;\n\n    @Input()\n    isEditable: boolean;\n\n    @Input()\n    minutesGap: number;\n\n    previousTime: number | string;\n\n    @Input()\n    time: string;\n\n    @Output()\n    timeChanged = new EventEmitter<NgxMatTimepickerClockFace>();\n\n    @Input()\n    timeList: NgxMatTimepickerClockFace[];\n\n    @Input()\n    timeUnit: NgxMatTimepickerUnits;\n\n    @Output()\n    timeUnitChanged = new EventEmitter<NgxMatTimepickerUnits>();\n\n    @Output()\n    unfocused = new EventEmitter<void>();\n\n    constructor(private _elRef: ElementRef, private _timeParserPipe: NgxMatTimepickerParserPipe) {\n    }\n\n    changeTimeByKeyboard(e: any): void {\n        const char = String.fromCharCode(e.keyCode);\n\n        if (isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        this._elRef.nativeElement.querySelector(\"input\").addEventListener(\"select\", retainSelection, false);\n    }\n\n    ngOnDestroy(): void {\n        this._elRef.nativeElement.querySelector(\"input\").removeEventListener(\"select\", retainSelection);\n    }\n\n    onKeydown(e: any): void {\n        if (!NgxMatTimepickerUtils.isDigit(e)) {\n            e.preventDefault();\n        }\n        else {\n            this._changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = this._timeParserPipe.transform(value, this.timeUnit);\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: NgxMatTimepickerUnits): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n\n    updateTime(): void {\n        if (this._selectedTime) {\n            this.timeChanged.next(this._selectedTime);\n            this.previousTime = this._selectedTime.time;\n        }\n    }\n\n    private _addTime(amount: number): string {\n        return `0${+this.time + amount}`.substr(-2);\n    }\n\n    private _changeTimeByArrow(keyCode: number): void {\n        let time: string;\n\n        // arrow up\n        if (keyCode === 38) {\n            time = this._addTime(this.minutesGap || 1);\n        }\n        // arrow down\n        else if (keyCode === 40) {\n            time = this._addTime(-1 * (this.minutesGap || 1));\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: NgxMatTimepickerClockFace[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: NgxMatTimepickerClockFace[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {animate, sequence, style, transition, trigger} from \"@angular/animations\";\n//\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-period\",\n    templateUrl: \"ngx-mat-timepicker-period.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-period.component.scss\"],\n    animations: [\n        trigger(\"scaleInOut\", [\n            transition(\":enter\", [\n                style({transform: \"scale(0)\"}),\n                animate(\".2s\", style({transform: \"scale(1)\"})),\n                sequence([\n                    animate(\"3s\", style({opacity: 1})),\n                    animate(\".3s\", style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMatTimepickerPeriodComponent {\n\n    @Input() activeTimeUnit: NgxMatTimepickerUnits;\n    @Input() format: number;\n    @Input() hours: NgxMatTimepickerClockFace[];\n    isPeriodAvailable = true;\n    @Input() maxTime: DateTime;\n    @Input() meridiems: string[];\n    @Input() minTime: DateTime;\n    @Input() minutes: NgxMatTimepickerClockFace[];\n    @Output() periodChanged = new EventEmitter<NgxMatTimepickerPeriods>();\n    @Input() selectedHour: number | string;\n    @Input() selectedPeriod: NgxMatTimepickerPeriods;\n    timePeriod = NgxMatTimepickerPeriods;\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    changePeriod(period: NgxMatTimepickerPeriods): void {\n        this.isPeriodAvailable = this._isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    private _getDisabledTimeByPeriod(period: NgxMatTimepickerPeriods): NgxMatTimepickerClockFace[] {\n        switch (this.activeTimeUnit) {\n            case NgxMatTimepickerUnits.HOUR:\n                return NgxMatTimepickerUtils.disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case NgxMatTimepickerUnits.MINUTE:\n                return NgxMatTimepickerUtils.disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error(\"no such NgxMatTimepickerUnits\");\n        }\n    }\n\n    private _isSwitchPeriodAvailable(period: NgxMatTimepickerPeriods): boolean {\n        const time = this._getDisabledTimeByPeriod(period);\n\n        return !time.every(t => t.disabled);\n    }\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\n//\nimport { NgxMatTimepickerUnits } from \"../models/ngx-mat-timepicker-units.enum\";\n//\nimport { DateTime } from \"ts-luxon\";\n\n@Pipe({\n    name: \"timeFormatter\"\n})\nexport class NgxMatTimepickerTimeFormatterPipe implements PipeTransform {\n\n    transform(time: number | string, timeUnit: NgxMatTimepickerUnits): any {\n        if (time == null || time === '') {\n            return time;\n        }\n        switch (timeUnit) {\n            case NgxMatTimepickerUnits.HOUR:\n                return DateTime.fromObject({hour: +time}).toFormat(\"HH\");\n            case NgxMatTimepickerUnits.MINUTE:\n                return DateTime.fromObject({minute: +time}).toFormat(\"mm\");\n            default:\n                throw new Error(\"no such time unit\");\n        }\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class NgxMatTimepickerMinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from \"@angular/core\";\nimport {DOCUMENT} from \"@angular/common\";\n\n@Directive({\n    selector: \"[ngxMatTimepickerAutofocus]\"\n})\nexport class NgxMatTimepickerAutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input(\"ngxMatTimepickerAutofocus\") isFocusActive: boolean;\n\n    private _activeElement: HTMLElement;\n\n    constructor(private _element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this._activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this._element.nativeElement.focus({ preventScroll: true }));\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this._activeElement.focus({ preventScroll: true }));\n    }\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\nimport {FloatLabelType} from \"@angular/material/form-field\";\n//\nimport {NgxMatTimepickerUnits} from \"../../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerParserPipe} from \"../../../pipes/ngx-mat-timepicker-parser.pipe\";\nimport {NgxMatTimepickerClockFace} from \"../../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUtils} from \"../../../utils/ngx-mat-timepicker.utils\";\n\nfunction concatTime(currentTime: string, nextTime: string): number {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n\n        return +time;\n    }\n}\n\n@Component({\n    selector: \"ngx-mat-timepicker-time-control\",\n    templateUrl: \"./ngx-mat-timepicker-control.component.html\",\n    styleUrls: [\"./ngx-mat-timepicker-control.component.scss\"],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [NgxMatTimepickerParserPipe]\n})\n\nexport class NgxMatTimepickerControlComponent implements OnChanges {\n\n    static nextId: number = 0;\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input() disabled: boolean;\n\n    @Input()\n    set floatLabel(newValue: FloatLabelType) {\n        this._floatLabel = newValue;\n    }\n\n    get floatLabel(): FloatLabelType {\n        return this._floatLabel;\n    }\n\n    id: number = NgxMatTimepickerControlComponent.nextId++;\n    isFocused: boolean;\n    @Input() max: number;\n    @Input() min: number;\n    @Input() placeholder: string;\n    @Input() preventTyping: boolean;\n\n    @Input() time: number;\n\n    @Output() timeChanged = new EventEmitter<number>();\n    @Input() timeList: NgxMatTimepickerClockFace[];\n    @Input() timeUnit: NgxMatTimepickerUnits;\n\n    private _color: ThemePalette = \"primary\";\n    private _floatLabel: FloatLabelType = \"never\";\n    private _previousTime: number;\n\n    constructor(private _timeParser: NgxMatTimepickerParserPipe) {\n    }\n\n    changeTime(event: any): void {\n        event.stopPropagation();\n\n        const char = String.fromCharCode(event.keyCode);\n        const time = concatTime(String(this.time), char);\n\n        this._changeTimeIfValid(time);\n    }\n\n    decrease(): void {\n        if (!this.disabled) {\n            let previousTime = +this.time - 1;\n\n            if (previousTime < this.min) {\n                previousTime = this.max;\n            }\n\n            if (this._isSelectedTimeDisabled(previousTime)) {\n                previousTime = this._getAvailableTime(previousTime, this._getPrevAvailableTime.bind(this));\n            }\n\n            if (previousTime !== this.time) {\n                this.timeChanged.emit(previousTime);\n            }\n        }\n    }\n\n    increase(): void {\n        if (!this.disabled) {\n            let nextTime = +this.time + 1;\n\n            if (nextTime > this.max) {\n                nextTime = this.min;\n            }\n\n            if (this._isSelectedTimeDisabled(nextTime)) {\n                nextTime = this._getAvailableTime(nextTime, this._getNextAvailableTime.bind(this));\n            }\n\n            if (nextTime !== this.time) {\n                this.timeChanged.emit(nextTime);\n            }\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.timeList && this.time != null) {\n            if (this._isSelectedTimeDisabled(this.time)) {\n                this._setAvailableTime();\n            }\n        }\n    }\n\n    onBlur(): void {\n        this.isFocused = false;\n\n        if (this._previousTime !== this.time) {\n            this._changeTimeIfValid(+this.time);\n        }\n    }\n\n    onFocus(): void {\n        this.isFocused = true;\n        this._previousTime = this.time;\n    }\n\n    onKeydown(event: any): void {\n        event.stopPropagation();\n\n        if (!NgxMatTimepickerUtils.isDigit(event)) {\n            event.preventDefault();\n        }\n\n        switch (event.key) {\n            case \"ArrowUp\":\n                this.increase();\n                break;\n            case \"ArrowDown\":\n                this.decrease();\n                break;\n        }\n\n        if (this.preventTyping && event.key !== \"Tab\") {\n            event.preventDefault();\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = +this._timeParser.transform(value, this.timeUnit);\n    }\n\n    private _changeTimeIfValid(value: number | undefined) {\n        if (!isNaN(value)) {\n            this.time = value;\n\n            if (this.time > this.max) {\n                const timeString = String(value);\n                this.time = +timeString[timeString.length - 1];\n            }\n\n            if (this.time < this.min) {\n                this.time = this.min;\n            }\n\n            this.timeChanged.emit(this.time);\n        }\n    }\n\n    private _getAvailableTime(currentTime: number, fn: (index: number) => number | undefined): number | undefined {\n        const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\n        const availableTime = fn(currentTimeIndex);\n\n        return availableTime != null ? availableTime : this.time;\n    }\n\n    private _getNextAvailableTime(index: number): number | undefined {\n        const timeCollection = this.timeList;\n        const maxValue = timeCollection.length;\n        for (let i = index + 1; i < maxValue; i++) {\n            const time = timeCollection[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private _getPrevAvailableTime(index: number): number | undefined {\n        for (let i = index; i >= 0; i--) {\n            const time = this.timeList[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private _isSelectedTimeDisabled(time: number): boolean {\n        return this.timeList.find((faceTime: NgxMatTimepickerClockFace) => faceTime.time === time).disabled;\n    }\n\n    private _setAvailableTime(): void {\n        this.time = this.timeList.find(t => !t.disabled).time;\n        this.timeChanged.emit(this.time);\n    }\n}\n","import {Inject, Pipe, PipeTransform} from \"@angular/core\";\n//\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerUnits} from \"../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerMeasure} from \"../models/ngx-mat-timepicker-measures.enum\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n@Pipe({\n    name: \"timeLocalizer\"\n})\nexport class NgxMatTimepickerTimeLocalizerPipe implements PipeTransform {\n\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n    }\n\n    transform(time: number | string, timeUnit: NgxMatTimepickerUnits, isKeyboardEnabled = false): string {\n        if (time == null || time === \"\") {\n            return \"\";\n        }\n\n        switch (timeUnit) {\n            case NgxMatTimepickerUnits.HOUR: {\n                const format = (time === 0 || isKeyboardEnabled) ? \"HH\" : \"H\";\n\n                return this._formatTime(NgxMatTimepickerMeasure.hour, time, format);\n            }\n            case NgxMatTimepickerUnits.MINUTE:\n                return this._formatTime(NgxMatTimepickerMeasure.minute, time, \"mm\");\n            default:\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\n        }\n    }\n\n    private _formatTime(timeMeasure: NgxMatTimepickerMeasure, time: string | number, format: string): string {\n        try {\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this._locale).toFormat(format);\n        } catch {\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this._locale}`);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeHour'\n})\nexport class NgxMatTimepickerActiveHourPipe implements PipeTransform {\n\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\n        if (hour == null || isClockFaceDisabled) {\n            return false;\n        }\n\n        return hour === currentHour;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeMinute'\n})\nexport class NgxMatTimepickerActiveMinutePipe implements PipeTransform {\n\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\n        if (minute == null || isClockFaceDisabled) {\n            return false;\n        }\n        const defaultGap = 5;\n\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\n    }\n\n}\n","import {Component, Input} from \"@angular/core\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-content\",\n    templateUrl: \"./ngx-mat-timepicker-content.component.html\",\n})\nexport class NgxMatTimepickerContentComponent {\n\n    @Input() appendToInput: boolean;\n    @Input() inputElement: any;\n\n}\n","import {Component, Inject, ViewEncapsulation} from \"@angular/core\";\n//\nimport {NgxMatTimepickerService} from \"../../services/ngx-mat-timepicker.service\";\nimport {NgxMatTimepickerEventService} from \"../../services/ngx-mat-timepicker-event.service\";\nimport {NgxMatTimepickerConfig} from \"../../models/ngx-mat-timepicker-config.interface\";\nimport {NgxMatTimepickerBaseDirective} from \"../../directives/ngx-mat-timepicker-base.directive\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NGX_MAT_TIMEPICKER_CONFIG} from \"../../tokens/ngx-mat-timepicker-config.token\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-standalone\",\n    templateUrl: \"ngx-mat-timepicker-standalone.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-standalone.component.scss\"],\n    // tslint:disable-next-line:no-host-metadata-property\n    host: {\n      \"[class.mat-app-background]\": \"true\"\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxMatTimepickerStandaloneComponent extends NgxMatTimepickerBaseDirective {\n\n    constructor(@Inject(NGX_MAT_TIMEPICKER_CONFIG) public data: NgxMatTimepickerConfig,\n                timepickerSrv: NgxMatTimepickerService,\n                eventSrv: NgxMatTimepickerEventService,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) locale: string) {\n\n        super(timepickerSrv, eventSrv, locale, data);\n    }\n\n    close(): void {\n        this.data.timepickerBaseRef.close();\n    }\n}\n","import {ModuleWithProviders, NgModule} from \"@angular/core\";\nimport {OverlayModule} from \"@angular/cdk/overlay\";\nimport {PortalModule} from \"@angular/cdk/portal\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {A11yModule} from \"@angular/cdk/a11y\";\nimport {SmpCoreUtilsModule} from \"smp-core-utils\";\n// MATERIAL\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\n// NGX-MAT-TIMEPICKER\n// DIRECTIVES\nimport {NgxMatTimepickerDirective} from \"./directives/ngx-mat-timepicker.directive\";\nimport {NgxMatTimepickerToggleIconDirective} from \"./directives/ngx-mat-timepicker-toggle-icon.directive\";\nimport {NgxMatTimepickerThemeDirective} from \"./directives/ngx-mat-timepicker-theme.directive\";\nimport {NgxMatTimepickerBaseDirective} from \"./directives/ngx-mat-timepicker-base.directive\";\n// COMPONENTS\nimport {NgxMatTimepickerComponent} from \"./components/ngx-mat-timepicker/ngx-mat-timepicker.component\";\nimport {NgxMatTimepickerToggleComponent} from \"./components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component\";\nimport {\n    NgxMatTimepicker24HoursFaceComponent\n} from \"./components/ngx-mat-timepicker-24-hours-face/ngx-mat-timepicker-24-hours-face.component\";\nimport {\n    NgxMatTimepicker12HoursFaceComponent\n} from \"./components/ngx-mat-timepicker-12-hours-face/ngx-mat-timepicker-12-hours-face.component\";\nimport {\n    NgxMatTimepickerMinutesFaceComponent\n} from \"./components/ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component\";\nimport {NgxMatTimepickerFaceComponent} from \"./components/ngx-mat-timepicker-face/ngx-mat-timepicker-face.component\";\nimport {NgxMatTimepickerDialComponent} from \"./components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component\";\nimport {\n    NgxMatTimepickerDialControlComponent\n} from \"./components/ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component\";\nimport {NgxMatTimepickerPeriodComponent} from \"./components/ngx-mat-timepicker-period/ngx-mat-timepicker-period.component\";\nimport {NgxMatTimepickerTimeFormatterPipe} from \"./pipes/ngx-mat-timepicker-time-formatter.pipe\";\nimport {NgxMatTimepickerMinutesFormatterPipe} from \"./pipes/ngx-mat-timepicker-minutes-formatter.pipe\";\nimport {NgxMatTimepickerAutofocusDirective} from \"./directives/ngx-mat-timepicker-autofocus.directive\";\nimport {NgxMatTimepickerFieldComponent} from \"./components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component\";\nimport {\n    NgxMatTimepickerControlComponent\n} from \"./components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component\";\nimport {NgxMatTimepickerTimeLocalizerPipe} from \"./pipes/ngx-mat-timepicker-time-localizer.pipe\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"./tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerParserPipe} from \"./pipes/ngx-mat-timepicker-parser.pipe\";\nimport {NgxMatTimepickerActiveHourPipe} from \"./pipes/ngx-mat-timepicker-active-hour.pipe\";\nimport {NgxMatTimepickerActiveMinutePipe} from \"./pipes/ngx-mat-timepicker-active-minute.pipe\";\nimport {\n    NgxMatTimepickerContentComponent\n} from \"./components/ngx-mat-timepicker-content/ngx-mat-timepicker-content.component\";\nimport {NgxMatTimepickerDialogComponent} from \"./components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component\";\nimport {NgxMatTimepickerHoursFaceDirective} from \"./components/ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive\";\nimport {NgxMatTimepickerStandaloneComponent} from \"./components/ngx-mat-timepicker-standalone/ngx-mat-timepicker-standalone.component\";\nimport {NGX_MAT_TIMEPICKER_CONFIG} from \"./tokens/ngx-mat-timepicker-config.token\";\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        FormsModule,\n        MatButtonModule,\n        MatFormFieldModule,\n        MatDialogModule,\n        MatInputModule,\n        MatSelectModule,\n        MatToolbarModule,\n        MatIconModule,\n        OverlayModule,\n        PortalModule,\n        SmpCoreUtilsModule.forRoot()\n    ],\n    exports: [\n        NgxMatTimepickerComponent,\n        NgxMatTimepickerToggleComponent,\n        NgxMatTimepickerFieldComponent,\n        NgxMatTimepickerDirective,\n        NgxMatTimepickerToggleIconDirective\n    ],\n    declarations: [\n        // Not really used, but needed to use it as abstract class\n        NgxMatTimepickerBaseDirective,\n        NgxMatTimepickerHoursFaceDirective,\n        //\n        NgxMatTimepickerActiveHourPipe,\n        NgxMatTimepickerActiveMinutePipe,\n        NgxMatTimepickerComponent,\n        NgxMatTimepickerDialComponent,\n        NgxMatTimepickerDialControlComponent,\n        NgxMatTimepickerDialogComponent,\n        NgxMatTimepickerDirective,\n        NgxMatTimepickerFaceComponent,\n        NgxMatTimepickerMinutesFaceComponent,\n        NgxMatTimepickerPeriodComponent,\n        NgxMatTimepickerStandaloneComponent,\n        NgxMatTimepickerToggleComponent,\n        NgxMatTimepicker12HoursFaceComponent,\n        NgxMatTimepicker24HoursFaceComponent,\n        NgxMatTimepickerToggleIconDirective,\n        NgxMatTimepickerAutofocusDirective,\n        NgxMatTimepickerMinutesFormatterPipe,\n        NgxMatTimepickerThemeDirective,\n        NgxMatTimepickerFieldComponent,\n        NgxMatTimepickerControlComponent,\n        NgxMatTimepickerParserPipe,\n        NgxMatTimepickerContentComponent,\n        NgxMatTimepickerTimeFormatterPipe,\n        NgxMatTimepickerTimeLocalizerPipe\n    ],\n    entryComponents: [\n        NgxMatTimepickerDialogComponent,\n        NgxMatTimepickerStandaloneComponent\n    ]\n})\nexport class NgxMatTimepickerModule {\n\n    static setLocale(locale: string): ModuleWithProviders<NgxMatTimepickerModule> {\n        return {\n            ngModule: NgxMatTimepickerModule,\n            providers: [\n                {provide: NGX_MAT_TIMEPICKER_LOCALE, useValue: locale},\n                {provide: NGX_MAT_TIMEPICKER_CONFIG, useValue: undefined},\n            ]\n        };\n    }\n}\n"]}
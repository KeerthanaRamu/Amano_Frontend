{"version":3,"file":"ngx-mat-timepicker.js","sources":["ng://ngx-mat-timepicker/lib/models/ngx-mat-timepicker-periods.enum.ts","ng://ngx-mat-timepicker/lib/models/ngx-mat-timepicker-format.enum.ts","ng://ngx-mat-timepicker/lib/services/ngx-mat-timepicker-adapter.ts","ng://ngx-mat-timepicker/lib/services/ngx-mat-timepicker.service.ts","ng://ngx-mat-timepicker/lib/models/ngx-mat-timepicker-units.enum.ts","ng://ngx-mat-timepicker/lib/tokens/ngx-mat-timepicker-time-locale.token.ts","ng://ngx-mat-timepicker/lib/utils/ngx-mat-timepicker.utils.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component.ts","ng://ngx-mat-timepicker/lib/directives/ngx-mat-timepicker-toggle-icon.directive.ts","ng://ngx-mat-timepicker/lib/services/ngx-mat-timepicker-event.service.ts","ng://ngx-mat-timepicker/lib/tokens/ngx-mat-timepicker-config.token.ts","ng://ngx-mat-timepicker/lib/directives/ngx-mat-timepicker-base.directive.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker/ngx-mat-timepicker.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component.ts","ng://ngx-mat-timepicker/lib/directives/ngx-mat-timepicker.directive.ts","ng://ngx-mat-timepicker/lib/directives/ngx-mat-timepicker-theme.directive.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-24-hours-face/ngx-mat-timepicker-24-hours-face.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-12-hours-face/ngx-mat-timepicker-12-hours-face.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-face/ngx-mat-timepicker-face.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component.ts","ng://ngx-mat-timepicker/lib/models/ngx-mat-timepicker-measures.enum.ts","ng://ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-parser.pipe.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-period/ngx-mat-timepicker-period.component.ts","ng://ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-time-formatter.pipe.ts","ng://ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-minutes-formatter.pipe.ts","ng://ngx-mat-timepicker/lib/directives/ngx-mat-timepicker-autofocus.directive.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component.ts","ng://ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-time-localizer.pipe.ts","ng://ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-active-hour.pipe.ts","ng://ngx-mat-timepicker/lib/pipes/ngx-mat-timepicker-active-minute.pipe.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-content/ngx-mat-timepicker-content.component.ts","ng://ngx-mat-timepicker/lib/components/ngx-mat-timepicker-standalone/ngx-mat-timepicker-standalone.component.ts","ng://ngx-mat-timepicker/lib/ngx-mat-timepicker.module.ts"],"sourcesContent":["export enum NgxMatTimepickerPeriods {\n    AM = \"AM\",\n    PM = \"PM\"\n}\n","export enum NgxMatTimepickerFormat {\n    TWELVE = \"hh:mm a\",\n    TWELVE_SHORT = \"h:m a\",\n    TWENTY_FOUR = \"HH:mm\",\n    TWENTY_FOUR_SHORT = \"H:m\"\n}\n","import {NgxMatTimepickerFormat} from \"../models/ngx-mat-timepicker-format.enum\";\nimport {NgxMatTimepickerPeriods} from \"../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerOptions} from \"../models/ngx-mat-timepicker-options.interface\";\n//\nimport {DateTime, LocaleOptions, NumberingSystem} from \"ts-luxon\";\n\n// @dynamic\nexport class NgxMatTimepickerAdapter {\n\n    static defaultFormat = 12;\n    static defaultLocale = \"en-US\";\n    static defaultNumberingSistem: NumberingSystem = \"latn\";\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: NgxMatTimepickerPeriods): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        const hour = period === NgxMatTimepickerPeriods.AM ? currentHour : currentHour + 12;\n\n        if (period === NgxMatTimepickerPeriods.AM && hour === 12) {\n            return 0;\n        }\n        else if (period === NgxMatTimepickerPeriods.PM && hour === 24) {\n            return 12;\n        }\n\n        return hour;\n    }\n\n    static formatTime(time: string, opts: NgxMatTimepickerOptions): string {\n        if (!time) {\n            return \"Invalid Time\";\n        }\n        const {format} = opts;\n        const parsedTime = NgxMatTimepickerAdapter.parseTime(time, opts).setLocale(NgxMatTimepickerAdapter.defaultLocale);\n\n        if (format !== 24) {\n            return parsedTime.toLocaleString({\n                ...DateTime.TIME_SIMPLE,\n                hour12: format !== 24\n            }).replace(/\\u200E/g, \"\");\n        }\n\n        return parsedTime.toISOTime({\n            includeOffset: false,\n            suppressMilliseconds: true,\n            suppressSeconds: true\n        }).replace(/\\u200E/g, \"\");\n    }\n\n    static fromDateTimeToString(time: DateTime, format: number): string {\n        const timeFormat = format === 24 ? NgxMatTimepickerFormat.TWENTY_FOUR : NgxMatTimepickerFormat.TWELVE;\n\n        return time.reconfigure({\n            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,\n            locale: NgxMatTimepickerAdapter.defaultLocale\n        }).toFormat(timeFormat);\n    }\n\n    static isBetween(time: DateTime, before: DateTime, after: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\n        if (unit === \"hours\") {\n            return this.isSameOrBefore(time, after, unit) && this.isSameOrAfter(time, before, unit);\n        }\n        if (unit === \"minutes\") {\n            return this.isSameOrBefore(time, after) && this.isSameOrAfter(time, before);\n        }\n    }\n\n    static isSameOrAfter(time: DateTime, compareWith: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\n        if (unit === \"hours\") {\n            return time.hour >= compareWith.hour;\n        }\n        if (unit === \"minutes\") {\n            return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n        }\n    }\n\n    static isSameOrBefore(time: DateTime, compareWith: DateTime, unit: \"hours\" | \"minutes\" = \"minutes\"): boolean {\n        if (unit === \"hours\") {\n            return time.hour <= compareWith.hour;\n        }\n        if (unit === \"minutes\") {\n            return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n        }\n    }\n\n    static isTimeAvailable(time: string,\n                           min?: DateTime,\n                           max?: DateTime,\n                           granularity?: \"hours\" | \"minutes\",\n                           minutesGap?: number | null,\n                           format?: number): boolean {\n        if (!time) {\n            return;\n        }\n\n        const convertedTime = this.parseTime(time, {format});\n        const minutes = convertedTime.minute;\n\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && this.isSameOrAfter(convertedTime, min, granularity);\n        const isBefore = (max && !min)\n            && this.isSameOrBefore(convertedTime, max, granularity);\n        const between = (min && max)\n            && this.isBetween(convertedTime, min, max, granularity);\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || between || isAvailable;\n    }\n\n    static parseTime(time: string, opts: NgxMatTimepickerOptions): DateTime {\n        const {numberingSystem, locale} = NgxMatTimepickerAdapter._getLocaleOptionsByTime(time, opts);\n        const isPeriodExist = time.split(\" \").length === 2;\n        const timeMask = isPeriodExist ? NgxMatTimepickerFormat.TWELVE_SHORT : NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;\n\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\n    }\n\n    static toLocaleTimeString(time: string, opts: NgxMatTimepickerOptions = {}): string {\n        const {format = NgxMatTimepickerAdapter.defaultFormat, locale = NgxMatTimepickerAdapter.defaultLocale} = opts;\n        const hourCycle = format === 24 ? \"h23\" : \"h12\";\n        const timeFormat = {...DateTime.TIME_SIMPLE, hourCycle};\n        const timeMask = (format === 24) ? NgxMatTimepickerFormat.TWENTY_FOUR_SHORT : NgxMatTimepickerFormat.TWELVE_SHORT;\n\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\n    }\n\n    private static _getLocaleOptionsByTime(time: string, opts: NgxMatTimepickerOptions): LocaleOptions {\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\n        const localeConfig: LocaleOptions = {\n            numberingSystem: numberingSystem as NumberingSystem,\n            locale\n        };\n        const defaultConfig: LocaleOptions = {\n            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,\n            locale: NgxMatTimepickerAdapter.defaultLocale\n        };\n\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\n    }\n}\n","import {Injectable} from \"@angular/core\";\nimport {NgxMatTimepickerClockFace} from \"../models/ngx-mat-timepicker-clock-face.interface\";\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {NgxMatTimepickerPeriods} from \"../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerAdapter} from \"./ngx-mat-timepicker-adapter\";\nimport {DateTime} from \"ts-luxon\";\n\nconst DEFAULT_HOUR: NgxMatTimepickerClockFace = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: NgxMatTimepickerClockFace = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class NgxMatTimepickerService {\n\n\n    set hour(hour: NgxMatTimepickerClockFace) {\n        this._hour$.next(hour);\n    }\n\n    set minute(minute: NgxMatTimepickerClockFace) {\n        this._minute$.next(minute);\n    }\n\n    set period(period: NgxMatTimepickerPeriods) {\n        const isPeriodValid = (period === NgxMatTimepickerPeriods.AM) || (period === NgxMatTimepickerPeriods.PM);\n\n        if (isPeriodValid) {\n            this._period$.next(period);\n        }\n    }\n\n    get selectedHour(): Observable<NgxMatTimepickerClockFace> {\n        return this._hour$.asObservable();\n    }\n\n    get selectedMinute(): Observable<NgxMatTimepickerClockFace> {\n        return this._minute$.asObservable();\n    }\n\n    get selectedPeriod(): Observable<NgxMatTimepickerPeriods> {\n        return this._period$.asObservable();\n    }\n\n    private _hour$ = new BehaviorSubject<NgxMatTimepickerClockFace>(DEFAULT_HOUR);\n    private _minute$ = new BehaviorSubject<NgxMatTimepickerClockFace>(DEFAULT_MINUTE);\n    private _period$ = new BehaviorSubject<NgxMatTimepickerPeriods>(NgxMatTimepickerPeriods.AM);\n\n    getFullTime(format: number): string {\n        const selectedHour = this._hour$.getValue().time;\n        const selectedMinute = this._minute$.getValue().time;\n        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\n        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\n        const period = format === 12 ? this._period$.getValue() : \"\";\n        const time = `${hour}:${minute} ${period}`.trim();\n\n        return NgxMatTimepickerAdapter.formatTime(time, {format});\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\n        /* Workaround to double error message*/\n        try {\n            if (NgxMatTimepickerAdapter.isTimeAvailable(time, min, max, \"minutes\", minutesGap)) {\n                this._setDefaultTime(time, format);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    private _resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = NgxMatTimepickerPeriods.AM;\n    }\n\n    private _setDefaultTime(time: string, format: number) {\n        const defaultTime = NgxMatTimepickerAdapter.parseTime(time, {format}).toJSDate();\n\n        // Check on null, because invalid date will be null\n        if (DateTime.fromJSDate(defaultTime) !== null) {\n            const period = time.substr(time.length - 2).toUpperCase();\n            const hour = defaultTime.getHours();\n\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as NgxMatTimepickerPeriods)};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = period as NgxMatTimepickerPeriods;\n\n        }\n        else {\n            this._resetTime();\n        }\n    }\n}\n\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\nfunction formatHourByPeriod(hour: number, period: NgxMatTimepickerPeriods): number {\n    switch (period) {\n        case NgxMatTimepickerPeriods.AM:\n            return hour === 0 ? 12 : hour;\n        case NgxMatTimepickerPeriods.PM:\n            return hour === 12 ? 12 : hour - 12;\n        default:\n            return hour;\n    }\n}\n","export enum NgxMatTimepickerUnits {\n    HOUR,\n    MINUTE\n}\n","import { InjectionToken } from \"@angular/core\";\n//\nimport { NgxMatTimepickerAdapter } from \"../services/ngx-mat-timepicker-adapter\";\n\nexport const NGX_MAT_TIMEPICKER_LOCALE = new InjectionToken<string>(\"TimeLocale\", {\n    providedIn: \"root\",\n    factory: () => NgxMatTimepickerAdapter.defaultLocale\n});\n","import {NgxMatTimepickerClockFace} from \"../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerAdapter} from \"../services/ngx-mat-timepicker-adapter\";\nimport {NgxMatTimepickerFormat} from \"../models/ngx-mat-timepicker-format.enum\";\nimport {NgxMatTimepickerDisabledConfig} from \"../models/ngx-mat-timepicker-disabled-config.interface\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n// @dynamic\nexport class NgxMatTimepickerUtils {\n\n    static disableHours(hours: NgxMatTimepickerClockFace[], config: NgxMatTimepickerDisabledConfig): NgxMatTimepickerClockFace[] {\n        if (config.min || config.max) {\n\n            return hours.map(value => {\n                const hour = config.format === 24 ? value.time : NgxMatTimepickerAdapter.formatHour(value.time, config.format, config.period);\n                const currentTime = DateTime.fromObject({hour}).toFormat(NgxMatTimepickerFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"hours\")\n                };\n            });\n        }\n\n        return hours;\n    }\n\n    static disableMinutes(minutes: NgxMatTimepickerClockFace[], selectedHour: number, config: NgxMatTimepickerDisabledConfig) {\n        if (config.min || config.max) {\n\n            const hour = NgxMatTimepickerAdapter.formatHour(selectedHour, config.format, config.period);\n\n            return minutes.map(value => {\n                const currentTime = DateTime.fromObject({\n                    hour,\n                    minute: value.time\n                }).toFormat(NgxMatTimepickerFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"minutes\")\n                };\n            });\n        }\n\n        return minutes;\n    }\n\n    static getHours(format: number): NgxMatTimepickerClockFace[] {\n        return Array(format).fill(1).map((v, i) => {\n            const angleStep = 30;\n            const time = v + i;\n            const angle = angleStep * time;\n\n            return {time: time === 24 ? 0 : time, angle};\n        });\n    }\n\n    static getMinutes(gap = 1): NgxMatTimepickerClockFace[] {\n        const minutesCount = 60;\n        const angleStep = 360 / minutesCount;\n        const minutes = [];\n\n        for (let i = 0; i < minutesCount; i++) {\n            const angle = angleStep * i;\n            if (i % gap === 0) {\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n            }\n        }\n\n        return minutes;\n    }\n\n    static isDigit(e: KeyboardEvent) {\n        // Allow: backspace, delete, tab, escape, enter\n        if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n            // Allow: Ctrl/cmd+A\n            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n            // Allow: Ctrl/cmd+C\n            (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n            // Allow: Ctrl/cmd+X\n            (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n            // Allow: home, end, left, right, up, down\n            (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n            return true;\n        }\n        return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n    }\n\n\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewEncapsulation\n} from \"@angular/core\";\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\nimport {MatSelectChange} from \"@angular/material/select\";\nimport {ThemePalette} from \"@angular/material/core\";\nimport {FloatLabelType} from \"@angular/material/form-field\";\n//\nimport {NgxMatTimepickerService} from \"../../services/ngx-mat-timepicker.service\";\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerTheme} from \"../../models/ngx-mat-timepicker-theme.interface\";\nimport {NgxMatTimepickerAdapter} from \"../../services/ngx-mat-timepicker-adapter\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime} from \"ts-luxon\";\nimport {Observable, Subject} from \"rxjs\";\nimport {distinctUntilChanged, map, takeUntil, tap} from \"rxjs/operators\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-field\",\n    templateUrl: \"./ngx-mat-timepicker-field.component.html\",\n    styleUrls: [\"./ngx-mat-timepicker-field.component.scss\"],\n    providers: [\n        NgxMatTimepickerService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: NgxMatTimepickerFieldComponent,\n            multi: true\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxMatTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    @Input()\n    set defaultTime(val: string) {\n        this._defaultTime = val;\n        this._isDefaultTime = !!val;\n    }\n\n    get floatLabel(): FloatLabelType {\n        return this._floatLabel;\n    }\n\n    @Input()\n    set floatLabel(newValue: FloatLabelType) {\n        this._floatLabel = newValue;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        this.minHour = this._format === 12 ? 1 : 0;\n        this.maxHour = this._format === 12 ? 12 : 23;\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this._updateTime(this.timepickerTime);\n        }\n        this._previousFormat = this._format;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === \"string\") {\n            this._max = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\n\n            return;\n        }\n        this._max = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === \"string\") {\n            this._min = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\n\n            return;\n        }\n        this._min = value;\n    }\n\n    @Input()\n    cancelBtnTmpl: TemplateRef<Node>;\n\n    @Input()\n    clockTheme: NgxMatTimepickerTheme;\n\n    @Input()\n    confirmBtnTmpl: TemplateRef<Node>;\n\n    @Input()\n    controlOnly: boolean;\n\n    @Input() disabled: boolean;\n    hour$: Observable<NgxMatTimepickerClockFace>;\n\n    hoursList: NgxMatTimepickerClockFace[];\n    isChangePeriodDisabled: boolean;\n    isTimeRangeSet: boolean;\n    maxHour = 12;\n    minHour = 1;\n    minute$: Observable<NgxMatTimepickerClockFace>;\n    minutesList: NgxMatTimepickerClockFace[];\n    period: NgxMatTimepickerPeriods = NgxMatTimepickerPeriods.AM;\n    periods: NgxMatTimepickerPeriods[] = [\n        NgxMatTimepickerPeriods.AM,\n        NgxMatTimepickerPeriods.PM\n    ];\n\n    @Output() timeChanged = new EventEmitter<string>();\n    timepickerTime: string;\n\n    timeUnit = NgxMatTimepickerUnits;\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\n\n    private _color: ThemePalette = \"primary\";\n    private _defaultTime: string;\n    private _floatLabel: FloatLabelType = \"never\";\n    private _format = 12;\n    private _isDefaultTime: boolean;\n    private _isFirstTimeChange: boolean = true;\n    private _max: string | DateTime;\n    private _min: string | DateTime;\n    private _previousFormat: number;\n    private _selectedHour: number;\n    private _subsCtrl$ = new Subject();\n\n    constructor(private _timepickerService: NgxMatTimepickerService,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n    }\n\n    changeHour(hour: number): void {\n        this._timepickerService.hour = this.hoursList.find(h => h.time === hour);\n        this._changeTime();\n    }\n\n    changeMinute(minute: number): void {\n        this._timepickerService.minute = this.minutesList.find(m => m.time === minute);\n        this._changeTime();\n    }\n\n    changePeriod(event: MatSelectChange): void {\n        this._timepickerService.period = event.value as NgxMatTimepickerPeriods;\n        this._changeTime();\n    }\n\n    ngOnDestroy(): void {\n        this._subsCtrl$.next();\n        this._subsCtrl$.complete();\n    }\n\n    ngOnInit() {\n        this._initTime(this.defaultTime);\n\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n        this.minutesList = NgxMatTimepickerUtils.getMinutes();\n        this.isTimeRangeSet = !!(this.min || this.max);\n\n        this.hour$ = this._timepickerService.selectedHour.pipe(\n            tap((clockTime: NgxMatTimepickerClockFace) => this._selectedHour = clockTime.time),\n            map(this._changeDefaultTimeValue.bind(this)),\n            tap(() => this.isTimeRangeSet && this._updateAvailableMinutes())\n        ) as Observable<NgxMatTimepickerClockFace>;\n        this.minute$ = this._timepickerService.selectedMinute.pipe(\n            map(this._changeDefaultTimeValue.bind(this)),\n            tap(() => this._isFirstTimeChange = false)\n        ) as Observable<NgxMatTimepickerClockFace>;\n\n        if (this.format === 12) {\n            this._timepickerService.selectedPeriod.pipe(\n                distinctUntilChanged<NgxMatTimepickerPeriods>(),\n                tap((period: NgxMatTimepickerPeriods) => this.period = period),\n                tap(period => this.isChangePeriodDisabled = this._isPeriodDisabled(period)),\n                takeUntil(this._subsCtrl$)\n            ).subscribe(() => this.isTimeRangeSet && this._updateAvailableTime());\n        }\n\n    }\n\n    onTimeSet(time: string): void {\n        this._updateTime(time);\n        this._emitLocalTimeChange(time);\n    }\n\n    registerOnChange(fn: any): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(_fn_: any): void {\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    writeValue(val: string): void {\n        if (val) {\n            this._initTime(val);\n        }\n        else {\n            this._resetTime();\n        }\n    }\n\n    private _changeDefaultTimeValue(clockFaceTime: NgxMatTimepickerClockFace): NgxMatTimepickerClockFace {\n        if (!this._isDefaultTime && this._isFirstTimeChange) {\n            return {...clockFaceTime, time: null};\n        }\n\n        return clockFaceTime;\n    }\n\n    private _changeTime(): void {\n        const time = this._timepickerService.getFullTime(this.format);\n        this.timepickerTime = time;\n\n        this._emitLocalTimeChange(time);\n    }\n\n    private _emitLocalTimeChange(time: string): void {\n        const localTime = NgxMatTimepickerAdapter.toLocaleTimeString(time, {format: this.format, locale: this._locale});\n\n        this._onChange(localTime);\n        this.timeChanged.emit(localTime);\n    }\n\n    private _initTime(time): void {\n        const isDefaultTimeAvailable = NgxMatTimepickerAdapter\n        .isTimeAvailable(time, this.min as DateTime, this.max as DateTime, \"minutes\", null, this.format);\n        if (!isDefaultTimeAvailable) {\n            if (this.min) {\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.min as DateTime, this.format));\n\n                return;\n            }\n            if (this.max) {\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.max as DateTime, this.format));\n\n                return;\n            }\n        }\n        this._updateTime(time);\n    }\n\n    private _isPeriodDisabled(period): boolean {\n        return NgxMatTimepickerUtils.disableHours(NgxMatTimepickerUtils.getHours(12), {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: 12,\n            period: period === NgxMatTimepickerPeriods.AM ? NgxMatTimepickerPeriods.PM : NgxMatTimepickerPeriods.AM\n        }).every(time => time.disabled);\n    }\n\n    private _onChange: (value: string) => void = () => {\n    }\n\n    private _resetTime(): void {\n        this._timepickerService.hour = {angle: 0, time: null};\n        this._timepickerService.minute = {angle: 0, time: null};\n    }\n\n    private _updateAvailableHours(): void {\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private _updateAvailableMinutes(): void {\n        this.minutesList = NgxMatTimepickerUtils.disableMinutes(this.minutesList, this._selectedHour, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private _updateAvailableTime(): void {\n        this._updateAvailableHours();\n        if (this._selectedHour) {\n            this._updateAvailableMinutes();\n        }\n    }\n\n    private _updateTime(time: string): void {\n        if (time) {\n            const formattedTime = NgxMatTimepickerAdapter.formatTime(time, {locale: this._locale, format: this.format});\n            this._timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min as DateTime, this.max as DateTime, this.format);\n            this.timepickerTime = formattedTime;\n        }\n    }\n\n}\n","import {Directive} from \"@angular/core\";\n\n/* To override a default toggle icon */\n@Directive({selector: \"[ngxMatTimepickerToggleIcon]\"})\n\nexport class NgxMatTimepickerToggleIconDirective {\n}\n","import {Injectable} from \"@angular/core\";\n//\nimport {Observable, Subject} from \"rxjs\";\nimport {shareReplay} from \"rxjs/operators\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class NgxMatTimepickerEventService {\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this._backdropClick$.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this._keydownEvent$.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    private _backdropClick$: Subject<MouseEvent> = new Subject();\n    private _keydownEvent$: Subject<KeyboardEvent> = new Subject();\n\n    constructor() {\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case \"click\":\n                this._backdropClick$.next(event as MouseEvent);\n                break;\n            case \"keydown\":\n                this._keydownEvent$.next(event as KeyboardEvent);\n                break;\n            default:\n                throw new Error(\"no such event type\");\n        }\n    }\n\n}\n","import {InjectionToken, Provider} from \"@angular/core\";\n//\nimport {NgxMatTimepickerConfig} from \"../models/ngx-mat-timepicker-config.interface\";\n\nexport const NGX_MAT_TIMEPICKER_CONFIG = new InjectionToken<NgxMatTimepickerConfig>(\"NGX_MAT_TIMEPICKER_CONFIG\");\n\nexport function provideNgxMatTimepickerOptions(config: NgxMatTimepickerConfig): Provider[] {\n    return [\n        {provide: NGX_MAT_TIMEPICKER_CONFIG, useValue: config},\n    ];\n}\n","import {Directive, HostListener, Inject, Input, OnDestroy, OnInit, Optional} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerEventService} from \"../services/ngx-mat-timepicker-event.service\";\nimport {NgxMatTimepickerService} from \"../services/ngx-mat-timepicker.service\";\nimport {NgxMatTimepickerAdapter} from \"../services/ngx-mat-timepicker-adapter\";\n//\nimport {NgxMatTimepickerUnits} from \"../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerClockFace} from \"../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerPeriods} from \"../models/ngx-mat-timepicker-periods.enum\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NGX_MAT_TIMEPICKER_CONFIG} from \"../tokens/ngx-mat-timepicker-config.token\";\n//\nimport {Observable, Subject} from \"rxjs\";\nimport {shareReplay, takeUntil} from \"rxjs/operators\";\n\n@Directive({\n    selector: \"[ngxMatTimepickerBase]\"\n})\nexport class NgxMatTimepickerBaseDirective implements OnInit, OnDestroy {\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    @Input()\n    set defaultTime(time: string) {\n        this._defaultTime = time;\n        this._setDefaultTime(time);\n    }\n\n    activeTimeUnit: NgxMatTimepickerUnits = NgxMatTimepickerUnits.HOUR;\n    selectedHour: Observable<NgxMatTimepickerClockFace>;\n    selectedMinute: Observable<NgxMatTimepickerClockFace>;\n    selectedPeriod: Observable<NgxMatTimepickerPeriods>;\n    timeUnit: typeof NgxMatTimepickerUnits = NgxMatTimepickerUnits;\n\n    protected _color: ThemePalette = \"primary\";\n    protected _defaultTime: string;\n    protected _subsCtrl$ = new Subject();\n\n    constructor(protected _timepickerSrv: NgxMatTimepickerService,\n                protected _eventSrv: NgxMatTimepickerEventService,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) protected _locale: string,\n                @Inject(NGX_MAT_TIMEPICKER_CONFIG) @Optional() public data) {\n\n        this.color = data.color;\n        this.defaultTime = data.defaultTime;\n    }\n\n    changePeriod(period: NgxMatTimepickerPeriods): void {\n        this._timepickerSrv.period = period;\n        this._onTimeChange();\n    }\n\n    changeTimeUnit(unit: NgxMatTimepickerUnits): void {\n        this.activeTimeUnit = unit;\n    }\n\n    close(): void {\n        this.data.timepickerBaseRef.close();\n    }\n\n    ngOnDestroy(): void {\n        this._subsCtrl$.next();\n        this._subsCtrl$.complete();\n    }\n\n    ngOnInit(): void {\n        this._defineTime();\n        this.selectedHour = this._timepickerSrv.selectedHour\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n        this.selectedMinute = this._timepickerSrv.selectedMinute\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n        this.selectedPeriod = this._timepickerSrv.selectedPeriod\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n        this.data.timepickerBaseRef.timeUpdated.pipe(takeUntil(this._subsCtrl$))\n            .subscribe(this._setDefaultTime.bind(this));\n    }\n\n    onHourChange(hour: NgxMatTimepickerClockFace): void {\n        this._timepickerSrv.hour = hour;\n        this._onTimeChange();\n    }\n\n    onHourSelected(hour: number): void {\n        if (!this.data.hoursOnly) {\n            this.changeTimeUnit(NgxMatTimepickerUnits.MINUTE);\n        }\n        this.data.timepickerBaseRef.hourSelected.next(hour);\n    }\n\n    @HostListener(\"keydown\", [\"$event\"])\n    onKeydown(e: any): void {\n        this._eventSrv.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    onMinuteChange(minute: NgxMatTimepickerClockFace): void {\n        this._timepickerSrv.minute = minute;\n        this._onTimeChange();\n    }\n\n    setTime(): void {\n        this.data.timepickerBaseRef.timeSet.next(this._timepickerSrv.getFullTime(this.data.format));\n        this.close();\n    }\n\n    protected _defineTime(): void {\n        const minTime = this.data.minTime;\n\n        if (minTime && (!this.data.time && !this.data.defaultTime)) {\n            const time = NgxMatTimepickerAdapter.fromDateTimeToString(minTime, this.data.format);\n\n            this._setDefaultTime(time);\n        }\n    }\n\n    protected _onTimeChange(): void {\n        const time = NgxMatTimepickerAdapter.toLocaleTimeString(this._timepickerSrv.getFullTime(this.data.format), {\n            locale: this._locale,\n            format: this.data.format\n        });\n\n        this.data.timepickerBaseRef.timeChanged.emit(time);\n    }\n\n    protected _setDefaultTime(time: string): void {\n        this._timepickerSrv.setDefaultTimeIfAvailable(\n            time, this.data.minTime, this.data.maxTime, this.data.format, this.data.minutesGap);\n    }\n}\n","import {Component, Inject, OnDestroy, OnInit, ViewEncapsulation} from \"@angular/core\";\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\n//\nimport {NgxMatTimepickerBaseDirective} from \"../../directives/ngx-mat-timepicker-base.directive\";\nimport {NgxMatTimepickerConfig} from \"../../models/ngx-mat-timepicker-config.interface\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerService} from \"../../services/ngx-mat-timepicker.service\";\nimport {NgxMatTimepickerEventService} from \"../../services/ngx-mat-timepicker-event.service\";\n\n//\n\n@Component({\n    selector: \"ngx-mat-timepicker-dialog\",\n    styleUrls: [\"./ngx-mat-timepicker-dialog.component.scss\"],\n    templateUrl: \"./ngx-mat-timepicker-dialog.component.html\",\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxMatTimepickerDialogComponent extends NgxMatTimepickerBaseDirective {\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: NgxMatTimepickerConfig,\n                protected _dialogRef: MatDialogRef<NgxMatTimepickerDialogComponent>,\n                timepickerSrv: NgxMatTimepickerService,\n                eventSrv: NgxMatTimepickerEventService,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) locale: string) {\n\n        super(timepickerSrv, eventSrv, locale, data);\n    }\n\n    close(): void {\n        this._dialogRef.close();\n    }\n\n}\n","import {Component, EventEmitter, HostBinding, Input, Output, TemplateRef, ViewContainerRef} from \"@angular/core\";\nimport {CdkOverlayOrigin, ConnectedPosition, Overlay, OverlayRef} from \"@angular/cdk/overlay\";\nimport {MatDialog, MatDialogRef} from \"@angular/material/dialog\";\nimport {ThemePalette} from \"@angular/material/core\";\nimport {SmpDomService} from \"smp-core-utils\";\n//\nimport {NgxMatTimepickerEventService} from \"../../services/ngx-mat-timepicker-event.service\";\nimport {NgxMatTimepickerDirective} from \"../../directives/ngx-mat-timepicker.directive\";\nimport {NgxMatTimepickerRef} from \"../../models/ngx-mat-timepicker-ref.interface\";\nimport {NgxMatTimepickerTheme} from \"../../models/ngx-mat-timepicker-theme.interface\";\nimport {NgxMatTimepickerDialogComponent} from \"../ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component\";\nimport {NGX_MAT_TIMEPICKER_CONFIG} from \"../../tokens/ngx-mat-timepicker-config.token\";\n//\nimport {DateTime} from \"ts-luxon\";\nimport {Subject} from \"rxjs\";\n\nlet config;\n\n@Component({\n    selector: \"ngx-mat-timepicker\",\n    template: `\n\t\t<ng-template\n\t\t\t\tcdkConnectedOverlay\n\t\t\t\t[cdkConnectedOverlayPositions]=\"overlayPositions\"\n\t\t\t\t[cdkConnectedOverlayHasBackdrop]=\"!0\"\n\t\t\t\tcdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n\t\t\t\t(backdropClick)=\"close()\"\n\t\t\t\t[cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n\t\t\t\t[cdkConnectedOverlayOpen]=\"showPicker\">\n\t\t\t<ngx-mat-timepicker-standalone></ngx-mat-timepicker-standalone>\n\t\t</ng-template>`,\n    providers: [\n        {\n            provide: NGX_MAT_TIMEPICKER_CONFIG, useFactory() {\n                return config;\n            }\n        }\n    ]\n})\nexport class NgxMatTimepickerComponent implements NgxMatTimepickerRef {\n\n    static nextId: number = 0;\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    get disabled(): boolean {\n        return this._timepickerInput && this._timepickerInput.disabled;\n    }\n\n    get format(): number {\n        return this._timepickerInput ? this._timepickerInput.format : this._format;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get inputElement(): HTMLElement {\n        return this._timepickerInput && this._timepickerInput.element;\n    }\n\n    get maxTime(): DateTime {\n        return this._timepickerInput ? (this._timepickerInput.max as DateTime) : this.max;\n    }\n\n    get minTime(): DateTime {\n        return this._timepickerInput ? (this._timepickerInput.min as DateTime) : this.min;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Input()\n    set minutesGap(gap: number) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get overlayOrigin(): CdkOverlayOrigin {\n        return this._timepickerInput ? this._timepickerInput.cdkOverlayOrigin : void 0;\n    }\n\n    get time(): string {\n        return this._timepickerInput && this._timepickerInput.value;\n    }\n\n    set ngxMatTimepickerTheme(newValue: NgxMatTimepickerTheme) {\n        this._ngxMatTimepickerTheme = newValue;\n    }\n\n    @Input() appendToInput: boolean;\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Output() closed = new EventEmitter<void>();\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input() defaultTime: string;\n    @Input() disableAnimation: boolean;\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() enableKeyboardInput: boolean;\n    @Output() hourSelected = new EventEmitter<number>();\n    @Input() hoursOnly = false;\n    @HostBinding(\"id\") id: string = `ngx_mat_timepicker_${++NgxMatTimepickerComponent.nextId}`;\n    @Input() isEsc = !0;\n    @Input() max: DateTime;\n    @Input() min: DateTime;\n    @Output() opened = new EventEmitter<void>();\n    overlayPositions: ConnectedPosition[] = [\n        {\n            originX: \"center\",\n            originY: \"bottom\",\n            overlayX: \"center\",\n            overlayY: \"top\",\n            offsetY: 0\n        },\n        {\n            originX: \"center\",\n            originY: \"top\",\n            overlayX: \"center\",\n            overlayY: \"bottom\",\n            offsetY: 0\n        }\n    ];\n    @Input() preventOverlayClick: boolean;\n    showPicker: boolean = !1;\n    @Input() theme: NgxMatTimepickerTheme;\n    @Output() timeChanged = new EventEmitter<string>();\n    @Input() timepickerClass: string;\n    @Output() timeSet = new EventEmitter<string>();\n    timeUpdated = new Subject<string>(); // used in the dialog, check if a better approach can be used\n\n    private _color: ThemePalette = \"primary\";\n    private _dialogRef: MatDialogRef<NgxMatTimepickerDialogComponent, void>;\n    private _format: number;\n    private _minutesGap: number;\n    private _ngxMatTimepickerTheme: NgxMatTimepickerTheme;\n    private _overlayRef: OverlayRef;\n    private _timepickerInput: NgxMatTimepickerDirective;\n\n    constructor(\n        private _vcr: ViewContainerRef,\n        private _eventService: NgxMatTimepickerEventService,\n        private _dialog: MatDialog,\n        private _overlay: Overlay,\n        private _domService: SmpDomService) {\n    }\n\n    close(): void {\n        if (this.appendToInput) {\n            this._overlayRef && this._overlayRef.dispose();\n        }\n        else {\n            this._dialogRef && this._dialogRef.close();\n        }\n        this.showPicker = !1;\n        this.closed.emit();\n    }\n\n    open(): void {\n        config = {\n            timepickerBaseRef: this,\n            time: this.time,\n            defaultTime: this.defaultTime,\n            maxTime: this.maxTime,\n            minTime: this.minTime,\n            format: this.format,\n            minutesGap: this.minutesGap,\n            disableAnimation: this.disableAnimation,\n            cancelBtnTmpl: this.cancelBtnTmpl,\n            confirmBtnTmpl: this.confirmBtnTmpl,\n            editableHintTmpl: this.editableHintTmpl,\n            disabled: this.disabled,\n            enableKeyboardInput: this.enableKeyboardInput,\n            preventOverlayClick: this.preventOverlayClick,\n            appendToInput: this.appendToInput,\n            hoursOnly: this.hoursOnly,\n            theme: this.theme || this._ngxMatTimepickerTheme,\n            timepickerClass: this.timepickerClass,\n            inputElement: this.inputElement,\n            color: this.color\n        };\n\n        if (this.appendToInput) {\n            this.showPicker = !0;\n        }\n        else {\n            this._dialogRef = this._dialog.open(NgxMatTimepickerDialogComponent, {\n                panelClass: \"ngx-mat-timepicker-dialog\",\n                data: {\n                    ...config\n                }\n            });\n            this._dialogRef\n                .afterClosed()\n                .subscribe(() => {\n                    this.closed.emit();\n                });\n        }\n        this.opened.emit();\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: NgxMatTimepickerDirective): void {\n        if (this._timepickerInput) {\n            throw Error(\"A Timepicker can only be associated with a single input.\");\n        }\n        this._timepickerInput = input;\n    }\n\n    unregisterInput(): void {\n        this._timepickerInput = void 0;\n    }\n\n    updateTime(time: string): void {\n        this.timeUpdated.next(time);\n    }\n}\n","import {Component, ContentChild, Input} from \"@angular/core\";\nimport {NgxMatTimepickerToggleIconDirective} from \"../../directives/ngx-mat-timepicker-toggle-icon.directive\";\nimport {NgxMatTimepickerComponent} from \"../ngx-mat-timepicker/ngx-mat-timepicker.component\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-toggle\",\n    templateUrl: \"ngx-mat-timepicker-toggle.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-toggle.component.scss\"]\n})\n\nexport class NgxMatTimepickerToggleComponent {\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    @ContentChild(NgxMatTimepickerToggleIconDirective, {static: true}) customIcon: NgxMatTimepickerToggleIconDirective;\n\n    @Input(\"for\") timepicker: NgxMatTimepickerComponent;\n\n    private _disabled: boolean;\n\n    open(event): void {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    HostListener,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges, Optional\n} from \"@angular/core\";\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\n//\nimport {NgxMatTimepickerComponent} from \"../components/ngx-mat-timepicker/ngx-mat-timepicker.component\";\nimport {NgxMatTimepickerAdapter} from \"../services/ngx-mat-timepicker-adapter\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\n//\nimport {DateTime} from \"ts-luxon\";\nimport {Subject} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\nimport {CdkOverlayOrigin} from \"@angular/cdk/overlay\";\nimport {MatFormField} from \"@angular/material/form-field\";\n\n@Directive({\n    selector: \"[ngxMatTimepicker]\",\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: NgxMatTimepickerDirective,\n            multi: true\n        }\n    ],\n    // tslint:disable-next-line:no-host-metadata-property\n    host: {\n        \"[disabled]\": \"disabled\",\n        \"(blur)\": \"onTouched()\",\n    },\n})\nexport class NgxMatTimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    get element(): HTMLElement {\n        return this._elementRef && this._elementRef.nativeElement;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = +value === 24 ? 24 : 12;\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.value = this._value;\n            this._timepicker.updateTime(this._value);\n        }\n        this._previousFormat = this._format;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === \"string\") {\n            this._max = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\n\n            return;\n        }\n        this._max = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === \"string\") {\n            this._min = NgxMatTimepickerAdapter.parseTime(value, {locale: this._locale, format: this.format});\n\n            return;\n        }\n        this._min = value;\n    }\n\n    @Input(\"ngxMatTimepicker\")\n    set timepicker(picker: NgxMatTimepickerComponent) {\n        this._registerTimepicker(picker);\n    }\n\n    get value(): string {\n        if (!this._value) {\n            return \"\";\n        }\n\n        return NgxMatTimepickerAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this._locale});\n    }\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = \"\";\n            this._updateInputValue();\n\n            return;\n        }\n        const time = NgxMatTimepickerAdapter.formatTime(value, {locale: this._locale, format: this.format});\n        const isAvailable = NgxMatTimepickerAdapter.isTimeAvailable(\n            time,\n            this._min as DateTime,\n            this._max as DateTime,\n            \"minutes\",\n            this._timepicker.minutesGap,\n            this._format\n        );\n\n        if (isAvailable) {\n            this._value = time;\n            this._updateInputValue();\n\n            return;\n        }\n        console.warn(\"Selected time doesn't match min or max value\");\n    }\n\n    private set _defaultTime(time: string) {\n        this._timepicker.defaultTime = NgxMatTimepickerAdapter.formatTime(time, {\n            locale: this._locale,\n            format: this.format\n        });\n    }\n\n    // TODO: IMPROVE DETECTING (INJECT) MAT-FORM-FIELD IF PRESENT\n    @HostBinding(\"attr.cdkOverlayOrigin\") cdkOverlayOrigin: CdkOverlayOrigin =\n        new CdkOverlayOrigin(this._matFormField ? this._matFormField.getConnectedOverlayOrigin() : this._elementRef);\n    @Input() disableClick: boolean;\n    @Input() disabled: boolean;\n\n    private _format = 12;\n    private _max: string | DateTime;\n    private _min: string | DateTime;\n    private _previousFormat: number;\n    private _subsCtrl$: Subject<void> = new Subject<void>();\n    private _timepicker: NgxMatTimepickerComponent;\n    private _value: string = \"\";\n\n    constructor(private _elementRef: ElementRef,\n                @Optional() @Inject(MatFormField) private _matFormField: MatFormField,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && changes.value.currentValue) {\n            this._defaultTime = changes.value.currentValue;\n        }\n    }\n\n    ngOnDestroy() {\n        this._unregisterTimepicker();\n        this._subsCtrl$.next();\n        this._subsCtrl$.complete();\n    }\n\n    @HostListener(\"click\", [\"$event\"])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    onTouched = () => {\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    @HostListener(\"change\", [\"$event\"])\n    updateValue(value: string) {\n        this.value = value;\n        this._onChange(value);\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        if (value) {\n            this._defaultTime = value;\n        }\n    }\n\n    private _onChange: (value: any) => void = () => {\n    }\n\n    private _registerTimepicker(picker: NgxMatTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this._timepicker.timeSet\n                .pipe(takeUntil(this._subsCtrl$))\n                .subscribe((time: string) => {\n                    this.value = time;\n                    this._onChange(this.value);\n                    this.onTouched();\n                    this._defaultTime = this._value;\n                });\n        }\n        else {\n            throw new Error(\"NgxMatTimepickerComponent is not defined.\" +\n                \" Please make sure you passed the timepicker to ngxMatTimepicker directive\");\n        }\n    }\n\n    private _unregisterTimepicker(): void {\n        if (this._timepicker) {\n            this._timepicker.unregisterInput();\n        }\n    }\n\n    private _updateInputValue(): void {\n        this._elementRef.nativeElement.value = this.value;\n    }\n\n}\n\n","import {AfterViewInit, Directive, ElementRef, Input} from \"@angular/core\";\nimport {NgxMatTimepickerTheme} from \"../models/ngx-mat-timepicker-theme.interface\";\n\n@Directive({selector: \"[ngxMatTimepickerTheme]\"})\nexport class NgxMatTimepickerThemeDirective implements AfterViewInit {\n\n    @Input(\"ngxMatTimepickerTheme\")\n    theme: NgxMatTimepickerTheme;\n\n    private _element: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        this._element = elementRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n        if (this.theme) {\n            this.setTheme(this.theme);\n        }\n    }\n\n    private setTheme(theme): void {\n        for (const val in theme) {\n            if (theme.hasOwnProperty(val)) {\n                if (typeof theme[val] === \"string\") {\n                    for (const prop in theme) {\n                        if (theme.hasOwnProperty(prop)) {\n                            this._element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n                        }\n                    }\n\n                    return;\n                }\n                this.setTheme(theme[val]);\n            }\n\n        }\n    }\n}\n\nfunction camelCaseToDash(myStr) {\n    return myStr.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n","import {Directive, EventEmitter, Input, Optional, Output} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n@Directive({\n    selector: \"[ngxMatTimepickerHoursFace]\"\n})\nexport class NgxMatTimepickerHoursFaceDirective {\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input()\n    set format(newValue: 12 | 24) {\n        this._format = newValue;\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n    }\n\n    get format(): 12 | 24 {\n        return this._format;\n    }\n\n    @Output() hourChange = new EventEmitter<NgxMatTimepickerClockFace>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    hoursList: NgxMatTimepickerClockFace[] = [];\n    @Input() maxTime: DateTime;\n    @Input() minTime: DateTime;\n    @Input() selectedHour: NgxMatTimepickerClockFace;\n\n    protected _color: ThemePalette = \"primary\";\n    protected _format: 12 | 24 = 24;\n\n    constructor() {\n    }\n\n    onTimeSelected(time: number): void {\n        this.hourSelected.next(time);\n    }\n}\n","import {AfterContentInit, ChangeDetectionStrategy, Component} from \"@angular/core\";\n//\nimport {NgxMatTimepickerHoursFaceDirective} from \"../ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-24-hours-face\",\n    templateUrl: \"ngx-mat-timepicker-24-hours-face.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMatTimepicker24HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective implements AfterContentInit {\n\n    constructor() {\n        super();\n        this.format = 24;\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import {ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges} from \"@angular/core\";\n//\nimport {NgxMatTimepickerHoursFaceDirective} from \"../ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive\";\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-12-hours-face\",\n    templateUrl: \"ngx-mat-timepicker-12-hours-face.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMatTimepicker12HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective implements OnChanges {\n\n    @Input() period: NgxMatTimepickerPeriods;\n\n    constructor() {\n        super();\n        this.format = 12;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.period && changes.period.currentValue) {\n            this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-minutes-face\",\n    templateUrl: \"./ngx-mat-timepicker-minutes-face.component.html\"\n})\nexport class NgxMatTimepickerMinutesFaceComponent implements OnChanges {\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input() format: number;\n    @Input() maxTime: DateTime;\n    @Input() minTime: DateTime;\n\n    @Output() minuteChange = new EventEmitter<NgxMatTimepickerClockFace>();\n    @Input() minutesGap: number;\n\n    minutesList: NgxMatTimepickerClockFace[] = [];\n    @Input() period: NgxMatTimepickerPeriods;\n    @Input() selectedHour: number;\n\n    @Input() selectedMinute: NgxMatTimepickerClockFace;\n    timeUnit = NgxMatTimepickerUnits;\n\n    private _color: ThemePalette = \"primary\";\n\n    constructor() {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.period && changes.period.currentValue) {\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\n            this.minutesList = NgxMatTimepickerUtils.disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\n\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    }\n    else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    }\n    else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    }\n    else {// I quarter\n        return currentAngle;\n    }\n}\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: \"75px\",\n        top: \"calc(50% - 75px)\"\n    },\n    large: {\n        height: \"103px\",\n        top: \"calc(50% - 103px)\"\n    }\n};\n\n@Component({\n    selector: \"ngx-mat-timepicker-face\",\n    templateUrl: \"./ngx-mat-timepicker-face.component.html\",\n    styleUrls: [\"./ngx-mat-timepicker-face.component.scss\"],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMatTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    @ViewChild(\"clockFace\", {static: true}) clockFace: ElementRef;\n    @ViewChild(\"clockHand\", {static: true, read: ElementRef}) clockHand: ElementRef;\n\n    @Input()\n    color: ThemePalette = \"primary\";\n\n    @Input()\n    faceTime: NgxMatTimepickerClockFace[];\n\n    @Input()\n    format: number;\n\n    innerClockFaceSize = 85;\n    isClockFaceDisabled: boolean;\n\n    @Input()\n    minutesGap: number;\n\n    @Input()\n    selectedTime: NgxMatTimepickerClockFace;\n\n\n    @Output()\n    timeChange = new EventEmitter<NgxMatTimepickerClockFace>();\n\n    @Output()\n    timeSelected = new EventEmitter<number>();\n\n    timeUnit = NgxMatTimepickerUnits;\n\n    @Input()\n    unit: NgxMatTimepickerUnits;\n\n    private _isStarted: boolean;\n    private _touchEndHandler: () => any;\n    private _touchStartHandler: () => any;\n\n    ngAfterViewInit() {\n        this._setClockHandPosition();\n        this._addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes.faceTime;\n        const selectedTimeChanges = changes.selectedTime;\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this._setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this._selectAvailableTime());\n        }\n    }\n\n    ngOnDestroy() {\n        this._removeTouchEvents();\n    }\n\n    @HostListener(\"mousedown\", [\"$event\"])\n    onMousedown(e: any) {\n        e.preventDefault();\n        this._isStarted = true;\n    }\n\n    @HostListener(\"mouseup\", [\"$event\"])\n    onMouseup(e: any) {\n        e.preventDefault();\n        this._isStarted = false;\n    }\n\n    @HostListener(\"click\", [\"$event\"])\n    @HostListener(\"touchmove\", [\"$event.changedTouches[0]\"])\n    @HostListener(\"touchend\", [\"$event.changedTouches[0]\"])\n    @HostListener(\"mousemove\", [\"$event\"])\n    selectTime(e: any): void {\n\n        if (!this._isStarted && (e instanceof MouseEvent && e.type !== \"click\")) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this._isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === NgxMatTimepickerUnits.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\n        const roundedAngle = roundAngle(circleAngle, angleStep);\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this._isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n\n    }\n\n\n    trackByTime(_item_, time: NgxMatTimepickerClockFace): string | number {\n        return time.time;\n    }\n\n    private _addTouchEvents(): void {\n        this._touchStartHandler = this.onMousedown.bind(this);\n        this._touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener(\"touchstart\", this._touchStartHandler);\n        this.clockFace.nativeElement.addEventListener(\"touchend\", this._touchEndHandler);\n    }\n\n    private _decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private _increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n\n    private _isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private _removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener(\"touchstart\", this._touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener(\"touchend\", this._touchEndHandler);\n    }\n\n    private _selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private _setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this._decreaseClockHand();\n            }\n            else {\n                this._increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    TemplateRef\n} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\n//\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime, Info} from \"ts-luxon\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-dial\",\n    templateUrl: \"ngx-mat-timepicker-dial.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-dial.component.scss\"],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMatTimepickerDialComponent implements OnChanges {\n\n    @Input() activeTimeUnit: NgxMatTimepickerUnits;\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() format: number;\n    @Input() hour: number | string;\n    @Output() hourChanged = new EventEmitter<NgxMatTimepickerClockFace>();\n\n    hours: NgxMatTimepickerClockFace[];\n    @Input() hoursOnly: boolean;\n    @Input() isEditable: boolean;\n\n    isHintVisible: boolean;\n    @Input() maxTime: DateTime;\n    meridiems = Info.meridiems({locale: this._locale});\n    @Input() minTime: DateTime;\n    @Input() minute: number | string;\n    @Output() minuteChanged = new EventEmitter<NgxMatTimepickerClockFace>();\n    minutes: NgxMatTimepickerClockFace[];\n    @Input() minutesGap: number;\n    @Input() period: NgxMatTimepickerPeriods;\n\n    @Output() periodChanged = new EventEmitter<NgxMatTimepickerPeriods>();\n\n    timeUnit = NgxMatTimepickerUnits;\n    @Output() timeUnitChanged = new EventEmitter<NgxMatTimepickerUnits>();\n\n    private _color: ThemePalette = \"primary\";\n\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n    }\n\n    changeHour(hour: NgxMatTimepickerClockFace): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: NgxMatTimepickerClockFace): void {\n        this.minuteChanged.next(minute);\n    }\n\n    changePeriod(period: NgxMatTimepickerPeriods): void {\n        this.periodChanged.next(period);\n    }\n\n    changeTimeUnit(unit: NgxMatTimepickerUnits): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    hideHint(): void {\n        this.isHintVisible = false;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const periodChanged = changes.period && changes.period.currentValue;\n        if (periodChanged || changes.format && changes.format.currentValue) {\n            const hours = NgxMatTimepickerUtils.getHours(this.format);\n\n            this.hours = NgxMatTimepickerUtils.disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (periodChanged || changes.hour && changes.hour.currentValue) {\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\n\n            this.minutes = NgxMatTimepickerUtils.disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    showHint(): void {\n        this.isHintVisible = true;\n    }\n}\n","export enum NgxMatTimepickerMeasure {\n    hour = \"hour\",\n    minute = \"minute\"\n}\n","import {Inject, Injectable, Pipe, PipeTransform} from \"@angular/core\";\n//\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerUnits} from \"../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerMeasure} from \"../models/ngx-mat-timepicker-measures.enum\";\n//\nimport {DateTime, NumberingSystem} from \"ts-luxon\";\n\n@Pipe({\n    name: \"ngxMatTimepickerParser\"\n})\n@Injectable()\nexport class NgxMatTimepickerParserPipe implements PipeTransform {\n\n    private readonly _numberingSystem: NumberingSystem;\n\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n        this._numberingSystem = DateTime.local().setLocale(this._locale).resolvedLocaleOpts().numberingSystem as NumberingSystem;\n    }\n\n    transform(time: string | number, timeUnit = NgxMatTimepickerUnits.HOUR): string {\n        if (time == null || time === \"\") {\n            return \"\";\n        }\n\n        if (!isNaN(+time)) {\n            return `${time}`;\n        }\n\n        if (timeUnit === NgxMatTimepickerUnits.MINUTE) {\n            return this._parseTime(time, \"mm\", NgxMatTimepickerMeasure.minute).toString();\n        }\n\n        return this._parseTime(time, \"HH\", NgxMatTimepickerMeasure.hour).toString();\n    }\n\n    private _parseTime(time: string | number, format: string, timeMeasure: NgxMatTimepickerMeasure): number {\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this._numberingSystem})[timeMeasure];\n        if (!isNaN(parsedTime)) {\n            return parsedTime;\n        }\n\n        throw new Error(`Cannot parse time - ${time}`);\n    }\n\n}\n","import {Component, EventEmitter, OnDestroy, Input, Output, ElementRef, AfterViewInit} from \"@angular/core\";\n//\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerParserPipe} from \"../../pipes/ngx-mat-timepicker-parser.pipe\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n\nfunction retainSelection() {\n    this.selectionStart = this.selectionEnd;\n}\n\n@Component({\n    selector: \"ngx-mat-timepicker-dial-control\",\n    templateUrl: \"ngx-mat-timepicker-dial-control.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-dial-control.component.scss\"],\n    providers: [NgxMatTimepickerParserPipe]\n})\nexport class NgxMatTimepickerDialControlComponent implements AfterViewInit, OnDestroy {\n\n    private get _selectedTime(): NgxMatTimepickerClockFace {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    @Input()\n    disabled: boolean;\n\n    @Output()\n    focused = new EventEmitter<void>();\n\n    @Input()\n    isActive: boolean;\n\n    @Input()\n    isEditable: boolean;\n\n    @Input()\n    minutesGap: number;\n\n    previousTime: number | string;\n\n    @Input()\n    time: string;\n\n    @Output()\n    timeChanged = new EventEmitter<NgxMatTimepickerClockFace>();\n\n    @Input()\n    timeList: NgxMatTimepickerClockFace[];\n\n    @Input()\n    timeUnit: NgxMatTimepickerUnits;\n\n    @Output()\n    timeUnitChanged = new EventEmitter<NgxMatTimepickerUnits>();\n\n    @Output()\n    unfocused = new EventEmitter<void>();\n\n    constructor(private _elRef: ElementRef, private _timeParserPipe: NgxMatTimepickerParserPipe) {\n    }\n\n    changeTimeByKeyboard(e: any): void {\n        const char = String.fromCharCode(e.keyCode);\n\n        if (isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        this._elRef.nativeElement.querySelector(\"input\").addEventListener(\"select\", retainSelection, false);\n    }\n\n    ngOnDestroy(): void {\n        this._elRef.nativeElement.querySelector(\"input\").removeEventListener(\"select\", retainSelection);\n    }\n\n    onKeydown(e: any): void {\n        if (!NgxMatTimepickerUtils.isDigit(e)) {\n            e.preventDefault();\n        }\n        else {\n            this._changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = this._timeParserPipe.transform(value, this.timeUnit);\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: NgxMatTimepickerUnits): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n\n    updateTime(): void {\n        if (this._selectedTime) {\n            this.timeChanged.next(this._selectedTime);\n            this.previousTime = this._selectedTime.time;\n        }\n    }\n\n    private _addTime(amount: number): string {\n        return `0${+this.time + amount}`.substr(-2);\n    }\n\n    private _changeTimeByArrow(keyCode: number): void {\n        let time: string;\n\n        // arrow up\n        if (keyCode === 38) {\n            time = this._addTime(this.minutesGap || 1);\n        }\n        // arrow down\n        else if (keyCode === 40) {\n            time = this._addTime(-1 * (this.minutesGap || 1));\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: NgxMatTimepickerClockFace[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: NgxMatTimepickerClockFace[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {animate, sequence, style, transition, trigger} from \"@angular/animations\";\n//\nimport {NgxMatTimepickerPeriods} from \"../../models/ngx-mat-timepicker-periods.enum\";\nimport {NgxMatTimepickerUnits} from \"../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerClockFace} from \"../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUtils} from \"../../utils/ngx-mat-timepicker.utils\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-period\",\n    templateUrl: \"ngx-mat-timepicker-period.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-period.component.scss\"],\n    animations: [\n        trigger(\"scaleInOut\", [\n            transition(\":enter\", [\n                style({transform: \"scale(0)\"}),\n                animate(\".2s\", style({transform: \"scale(1)\"})),\n                sequence([\n                    animate(\"3s\", style({opacity: 1})),\n                    animate(\".3s\", style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMatTimepickerPeriodComponent {\n\n    @Input() activeTimeUnit: NgxMatTimepickerUnits;\n    @Input() format: number;\n    @Input() hours: NgxMatTimepickerClockFace[];\n    isPeriodAvailable = true;\n    @Input() maxTime: DateTime;\n    @Input() meridiems: string[];\n    @Input() minTime: DateTime;\n    @Input() minutes: NgxMatTimepickerClockFace[];\n    @Output() periodChanged = new EventEmitter<NgxMatTimepickerPeriods>();\n    @Input() selectedHour: number | string;\n    @Input() selectedPeriod: NgxMatTimepickerPeriods;\n    timePeriod = NgxMatTimepickerPeriods;\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    changePeriod(period: NgxMatTimepickerPeriods): void {\n        this.isPeriodAvailable = this._isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    private _getDisabledTimeByPeriod(period: NgxMatTimepickerPeriods): NgxMatTimepickerClockFace[] {\n        switch (this.activeTimeUnit) {\n            case NgxMatTimepickerUnits.HOUR:\n                return NgxMatTimepickerUtils.disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case NgxMatTimepickerUnits.MINUTE:\n                return NgxMatTimepickerUtils.disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error(\"no such NgxMatTimepickerUnits\");\n        }\n    }\n\n    private _isSwitchPeriodAvailable(period: NgxMatTimepickerPeriods): boolean {\n        const time = this._getDisabledTimeByPeriod(period);\n\n        return !time.every(t => t.disabled);\n    }\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\n//\nimport { NgxMatTimepickerUnits } from \"../models/ngx-mat-timepicker-units.enum\";\n//\nimport { DateTime } from \"ts-luxon\";\n\n@Pipe({\n    name: \"timeFormatter\"\n})\nexport class NgxMatTimepickerTimeFormatterPipe implements PipeTransform {\n\n    transform(time: number | string, timeUnit: NgxMatTimepickerUnits): any {\n        if (time == null || time === '') {\n            return time;\n        }\n        switch (timeUnit) {\n            case NgxMatTimepickerUnits.HOUR:\n                return DateTime.fromObject({hour: +time}).toFormat(\"HH\");\n            case NgxMatTimepickerUnits.MINUTE:\n                return DateTime.fromObject({minute: +time}).toFormat(\"mm\");\n            default:\n                throw new Error(\"no such time unit\");\n        }\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class NgxMatTimepickerMinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from \"@angular/core\";\nimport {DOCUMENT} from \"@angular/common\";\n\n@Directive({\n    selector: \"[ngxMatTimepickerAutofocus]\"\n})\nexport class NgxMatTimepickerAutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input(\"ngxMatTimepickerAutofocus\") isFocusActive: boolean;\n\n    private _activeElement: HTMLElement;\n\n    constructor(private _element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this._activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this._element.nativeElement.focus({ preventScroll: true }));\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this._activeElement.focus({ preventScroll: true }));\n    }\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from \"@angular/core\";\nimport {ThemePalette} from \"@angular/material/core\";\nimport {FloatLabelType} from \"@angular/material/form-field\";\n//\nimport {NgxMatTimepickerUnits} from \"../../../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerParserPipe} from \"../../../pipes/ngx-mat-timepicker-parser.pipe\";\nimport {NgxMatTimepickerClockFace} from \"../../../models/ngx-mat-timepicker-clock-face.interface\";\nimport {NgxMatTimepickerUtils} from \"../../../utils/ngx-mat-timepicker.utils\";\n\nfunction concatTime(currentTime: string, nextTime: string): number {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n\n        return +time;\n    }\n}\n\n@Component({\n    selector: \"ngx-mat-timepicker-time-control\",\n    templateUrl: \"./ngx-mat-timepicker-control.component.html\",\n    styleUrls: [\"./ngx-mat-timepicker-control.component.scss\"],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [NgxMatTimepickerParserPipe]\n})\n\nexport class NgxMatTimepickerControlComponent implements OnChanges {\n\n    static nextId: number = 0;\n\n    @Input()\n    set color(newValue: ThemePalette) {\n        this._color = newValue;\n    }\n\n    get color(): ThemePalette {\n        return this._color;\n    }\n\n    @Input() disabled: boolean;\n\n    @Input()\n    set floatLabel(newValue: FloatLabelType) {\n        this._floatLabel = newValue;\n    }\n\n    get floatLabel(): FloatLabelType {\n        return this._floatLabel;\n    }\n\n    id: number = NgxMatTimepickerControlComponent.nextId++;\n    isFocused: boolean;\n    @Input() max: number;\n    @Input() min: number;\n    @Input() placeholder: string;\n    @Input() preventTyping: boolean;\n\n    @Input() time: number;\n\n    @Output() timeChanged = new EventEmitter<number>();\n    @Input() timeList: NgxMatTimepickerClockFace[];\n    @Input() timeUnit: NgxMatTimepickerUnits;\n\n    private _color: ThemePalette = \"primary\";\n    private _floatLabel: FloatLabelType = \"never\";\n    private _previousTime: number;\n\n    constructor(private _timeParser: NgxMatTimepickerParserPipe) {\n    }\n\n    changeTime(event: any): void {\n        event.stopPropagation();\n\n        const char = String.fromCharCode(event.keyCode);\n        const time = concatTime(String(this.time), char);\n\n        this._changeTimeIfValid(time);\n    }\n\n    decrease(): void {\n        if (!this.disabled) {\n            let previousTime = +this.time - 1;\n\n            if (previousTime < this.min) {\n                previousTime = this.max;\n            }\n\n            if (this._isSelectedTimeDisabled(previousTime)) {\n                previousTime = this._getAvailableTime(previousTime, this._getPrevAvailableTime.bind(this));\n            }\n\n            if (previousTime !== this.time) {\n                this.timeChanged.emit(previousTime);\n            }\n        }\n    }\n\n    increase(): void {\n        if (!this.disabled) {\n            let nextTime = +this.time + 1;\n\n            if (nextTime > this.max) {\n                nextTime = this.min;\n            }\n\n            if (this._isSelectedTimeDisabled(nextTime)) {\n                nextTime = this._getAvailableTime(nextTime, this._getNextAvailableTime.bind(this));\n            }\n\n            if (nextTime !== this.time) {\n                this.timeChanged.emit(nextTime);\n            }\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.timeList && this.time != null) {\n            if (this._isSelectedTimeDisabled(this.time)) {\n                this._setAvailableTime();\n            }\n        }\n    }\n\n    onBlur(): void {\n        this.isFocused = false;\n\n        if (this._previousTime !== this.time) {\n            this._changeTimeIfValid(+this.time);\n        }\n    }\n\n    onFocus(): void {\n        this.isFocused = true;\n        this._previousTime = this.time;\n    }\n\n    onKeydown(event: any): void {\n        event.stopPropagation();\n\n        if (!NgxMatTimepickerUtils.isDigit(event)) {\n            event.preventDefault();\n        }\n\n        switch (event.key) {\n            case \"ArrowUp\":\n                this.increase();\n                break;\n            case \"ArrowDown\":\n                this.decrease();\n                break;\n        }\n\n        if (this.preventTyping && event.key !== \"Tab\") {\n            event.preventDefault();\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = +this._timeParser.transform(value, this.timeUnit);\n    }\n\n    private _changeTimeIfValid(value: number | undefined) {\n        if (!isNaN(value)) {\n            this.time = value;\n\n            if (this.time > this.max) {\n                const timeString = String(value);\n                this.time = +timeString[timeString.length - 1];\n            }\n\n            if (this.time < this.min) {\n                this.time = this.min;\n            }\n\n            this.timeChanged.emit(this.time);\n        }\n    }\n\n    private _getAvailableTime(currentTime: number, fn: (index: number) => number | undefined): number | undefined {\n        const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\n        const availableTime = fn(currentTimeIndex);\n\n        return availableTime != null ? availableTime : this.time;\n    }\n\n    private _getNextAvailableTime(index: number): number | undefined {\n        const timeCollection = this.timeList;\n        const maxValue = timeCollection.length;\n        for (let i = index + 1; i < maxValue; i++) {\n            const time = timeCollection[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private _getPrevAvailableTime(index: number): number | undefined {\n        for (let i = index; i >= 0; i--) {\n            const time = this.timeList[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private _isSelectedTimeDisabled(time: number): boolean {\n        return this.timeList.find((faceTime: NgxMatTimepickerClockFace) => faceTime.time === time).disabled;\n    }\n\n    private _setAvailableTime(): void {\n        this.time = this.timeList.find(t => !t.disabled).time;\n        this.timeChanged.emit(this.time);\n    }\n}\n\n","import {Inject, Pipe, PipeTransform} from \"@angular/core\";\n//\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerUnits} from \"../models/ngx-mat-timepicker-units.enum\";\nimport {NgxMatTimepickerMeasure} from \"../models/ngx-mat-timepicker-measures.enum\";\n//\nimport {DateTime} from \"ts-luxon\";\n\n@Pipe({\n    name: \"timeLocalizer\"\n})\nexport class NgxMatTimepickerTimeLocalizerPipe implements PipeTransform {\n\n    constructor(@Inject(NGX_MAT_TIMEPICKER_LOCALE) private _locale: string) {\n    }\n\n    transform(time: number | string, timeUnit: NgxMatTimepickerUnits, isKeyboardEnabled = false): string {\n        if (time == null || time === \"\") {\n            return \"\";\n        }\n\n        switch (timeUnit) {\n            case NgxMatTimepickerUnits.HOUR: {\n                const format = (time === 0 || isKeyboardEnabled) ? \"HH\" : \"H\";\n\n                return this._formatTime(NgxMatTimepickerMeasure.hour, time, format);\n            }\n            case NgxMatTimepickerUnits.MINUTE:\n                return this._formatTime(NgxMatTimepickerMeasure.minute, time, \"mm\");\n            default:\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\n        }\n    }\n\n    private _formatTime(timeMeasure: NgxMatTimepickerMeasure, time: string | number, format: string): string {\n        try {\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this._locale).toFormat(format);\n        } catch {\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this._locale}`);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeHour'\n})\nexport class NgxMatTimepickerActiveHourPipe implements PipeTransform {\n\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\n        if (hour == null || isClockFaceDisabled) {\n            return false;\n        }\n\n        return hour === currentHour;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeMinute'\n})\nexport class NgxMatTimepickerActiveMinutePipe implements PipeTransform {\n\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\n        if (minute == null || isClockFaceDisabled) {\n            return false;\n        }\n        const defaultGap = 5;\n\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\n    }\n\n}\n","import {Component, Input} from \"@angular/core\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-content\",\n    templateUrl: \"./ngx-mat-timepicker-content.component.html\",\n})\nexport class NgxMatTimepickerContentComponent {\n\n    @Input() appendToInput: boolean;\n    @Input() inputElement: any;\n\n}\n","import {Component, Inject, ViewEncapsulation} from \"@angular/core\";\n//\nimport {NgxMatTimepickerService} from \"../../services/ngx-mat-timepicker.service\";\nimport {NgxMatTimepickerEventService} from \"../../services/ngx-mat-timepicker-event.service\";\nimport {NgxMatTimepickerConfig} from \"../../models/ngx-mat-timepicker-config.interface\";\nimport {NgxMatTimepickerBaseDirective} from \"../../directives/ngx-mat-timepicker-base.directive\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"../../tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NGX_MAT_TIMEPICKER_CONFIG} from \"../../tokens/ngx-mat-timepicker-config.token\";\n\n@Component({\n    selector: \"ngx-mat-timepicker-standalone\",\n    templateUrl: \"ngx-mat-timepicker-standalone.component.html\",\n    styleUrls: [\"ngx-mat-timepicker-standalone.component.scss\"],\n    // tslint:disable-next-line:no-host-metadata-property\n    host: {\n      \"[class.mat-app-background]\": \"true\"\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxMatTimepickerStandaloneComponent extends NgxMatTimepickerBaseDirective {\n\n    constructor(@Inject(NGX_MAT_TIMEPICKER_CONFIG) public data: NgxMatTimepickerConfig,\n                timepickerSrv: NgxMatTimepickerService,\n                eventSrv: NgxMatTimepickerEventService,\n                @Inject(NGX_MAT_TIMEPICKER_LOCALE) locale: string) {\n\n        super(timepickerSrv, eventSrv, locale, data);\n    }\n\n    close(): void {\n        this.data.timepickerBaseRef.close();\n    }\n}\n","import {ModuleWithProviders, NgModule} from \"@angular/core\";\nimport {OverlayModule} from \"@angular/cdk/overlay\";\nimport {PortalModule} from \"@angular/cdk/portal\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport {A11yModule} from \"@angular/cdk/a11y\";\nimport {SmpCoreUtilsModule} from \"smp-core-utils\";\n// MATERIAL\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\n// NGX-MAT-TIMEPICKER\n// DIRECTIVES\nimport {NgxMatTimepickerDirective} from \"./directives/ngx-mat-timepicker.directive\";\nimport {NgxMatTimepickerToggleIconDirective} from \"./directives/ngx-mat-timepicker-toggle-icon.directive\";\nimport {NgxMatTimepickerThemeDirective} from \"./directives/ngx-mat-timepicker-theme.directive\";\nimport {NgxMatTimepickerBaseDirective} from \"./directives/ngx-mat-timepicker-base.directive\";\n// COMPONENTS\nimport {NgxMatTimepickerComponent} from \"./components/ngx-mat-timepicker/ngx-mat-timepicker.component\";\nimport {NgxMatTimepickerToggleComponent} from \"./components/ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component\";\nimport {\n    NgxMatTimepicker24HoursFaceComponent\n} from \"./components/ngx-mat-timepicker-24-hours-face/ngx-mat-timepicker-24-hours-face.component\";\nimport {\n    NgxMatTimepicker12HoursFaceComponent\n} from \"./components/ngx-mat-timepicker-12-hours-face/ngx-mat-timepicker-12-hours-face.component\";\nimport {\n    NgxMatTimepickerMinutesFaceComponent\n} from \"./components/ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component\";\nimport {NgxMatTimepickerFaceComponent} from \"./components/ngx-mat-timepicker-face/ngx-mat-timepicker-face.component\";\nimport {NgxMatTimepickerDialComponent} from \"./components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component\";\nimport {\n    NgxMatTimepickerDialControlComponent\n} from \"./components/ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component\";\nimport {NgxMatTimepickerPeriodComponent} from \"./components/ngx-mat-timepicker-period/ngx-mat-timepicker-period.component\";\nimport {NgxMatTimepickerTimeFormatterPipe} from \"./pipes/ngx-mat-timepicker-time-formatter.pipe\";\nimport {NgxMatTimepickerMinutesFormatterPipe} from \"./pipes/ngx-mat-timepicker-minutes-formatter.pipe\";\nimport {NgxMatTimepickerAutofocusDirective} from \"./directives/ngx-mat-timepicker-autofocus.directive\";\nimport {NgxMatTimepickerFieldComponent} from \"./components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component\";\nimport {\n    NgxMatTimepickerControlComponent\n} from \"./components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component\";\nimport {NgxMatTimepickerTimeLocalizerPipe} from \"./pipes/ngx-mat-timepicker-time-localizer.pipe\";\nimport {NGX_MAT_TIMEPICKER_LOCALE} from \"./tokens/ngx-mat-timepicker-time-locale.token\";\nimport {NgxMatTimepickerParserPipe} from \"./pipes/ngx-mat-timepicker-parser.pipe\";\nimport {NgxMatTimepickerActiveHourPipe} from \"./pipes/ngx-mat-timepicker-active-hour.pipe\";\nimport {NgxMatTimepickerActiveMinutePipe} from \"./pipes/ngx-mat-timepicker-active-minute.pipe\";\nimport {\n    NgxMatTimepickerContentComponent\n} from \"./components/ngx-mat-timepicker-content/ngx-mat-timepicker-content.component\";\nimport {NgxMatTimepickerDialogComponent} from \"./components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component\";\nimport {NgxMatTimepickerHoursFaceDirective} from \"./components/ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive\";\nimport {NgxMatTimepickerStandaloneComponent} from \"./components/ngx-mat-timepicker-standalone/ngx-mat-timepicker-standalone.component\";\nimport {NGX_MAT_TIMEPICKER_CONFIG} from \"./tokens/ngx-mat-timepicker-config.token\";\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        FormsModule,\n        MatButtonModule,\n        MatFormFieldModule,\n        MatDialogModule,\n        MatInputModule,\n        MatSelectModule,\n        MatToolbarModule,\n        MatIconModule,\n        OverlayModule,\n        PortalModule,\n        SmpCoreUtilsModule.forRoot()\n    ],\n    exports: [\n        NgxMatTimepickerComponent,\n        NgxMatTimepickerToggleComponent,\n        NgxMatTimepickerFieldComponent,\n        NgxMatTimepickerDirective,\n        NgxMatTimepickerToggleIconDirective\n    ],\n    declarations: [\n        // Not really used, but needed to use it as abstract class\n        NgxMatTimepickerBaseDirective,\n        NgxMatTimepickerHoursFaceDirective,\n        //\n        NgxMatTimepickerActiveHourPipe,\n        NgxMatTimepickerActiveMinutePipe,\n        NgxMatTimepickerComponent,\n        NgxMatTimepickerDialComponent,\n        NgxMatTimepickerDialControlComponent,\n        NgxMatTimepickerDialogComponent,\n        NgxMatTimepickerDirective,\n        NgxMatTimepickerFaceComponent,\n        NgxMatTimepickerMinutesFaceComponent,\n        NgxMatTimepickerPeriodComponent,\n        NgxMatTimepickerStandaloneComponent,\n        NgxMatTimepickerToggleComponent,\n        NgxMatTimepicker12HoursFaceComponent,\n        NgxMatTimepicker24HoursFaceComponent,\n        NgxMatTimepickerToggleIconDirective,\n        NgxMatTimepickerAutofocusDirective,\n        NgxMatTimepickerMinutesFormatterPipe,\n        NgxMatTimepickerThemeDirective,\n        NgxMatTimepickerFieldComponent,\n        NgxMatTimepickerControlComponent,\n        NgxMatTimepickerParserPipe,\n        NgxMatTimepickerContentComponent,\n        NgxMatTimepickerTimeFormatterPipe,\n        NgxMatTimepickerTimeLocalizerPipe\n    ],\n    entryComponents: [\n        NgxMatTimepickerDialogComponent,\n        NgxMatTimepickerStandaloneComponent\n    ]\n})\nexport class NgxMatTimepickerModule {\n\n    static setLocale(locale: string): ModuleWithProviders<NgxMatTimepickerModule> {\n        return {\n            ngModule: NgxMatTimepickerModule,\n            providers: [\n                {provide: NGX_MAT_TIMEPICKER_LOCALE, useValue: locale},\n                {provide: NGX_MAT_TIMEPICKER_CONFIG, useValue: undefined},\n            ]\n        };\n    }\n}\n"],"names":[],"mappings":"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"}
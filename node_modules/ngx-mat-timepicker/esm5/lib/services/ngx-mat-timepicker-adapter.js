/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ngx-mat-timepicker-adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __assign } from "tslib";
import { NgxMatTimepickerFormat } from "../models/ngx-mat-timepicker-format.enum";
import { NgxMatTimepickerPeriods } from "../models/ngx-mat-timepicker-periods.enum";
//
import { DateTime } from "ts-luxon";
// @dynamic
var NgxMatTimepickerAdapter = /** @class */ (function () {
    function NgxMatTimepickerAdapter() {
    }
    /***
     *  Format hour according to time format (12 or 24)
     */
    /**
     *
     *  Format hour according to time format (12 or 24)
     * @param {?} currentHour
     * @param {?} format
     * @param {?} period
     * @return {?}
     */
    NgxMatTimepickerAdapter.formatHour = /**
     *
     *  Format hour according to time format (12 or 24)
     * @param {?} currentHour
     * @param {?} format
     * @param {?} period
     * @return {?}
     */
    function (currentHour, format, period) {
        if (format === 24) {
            return currentHour;
        }
        /** @type {?} */
        var hour = period === NgxMatTimepickerPeriods.AM ? currentHour : currentHour + 12;
        if (period === NgxMatTimepickerPeriods.AM && hour === 12) {
            return 0;
        }
        else if (period === NgxMatTimepickerPeriods.PM && hour === 24) {
            return 12;
        }
        return hour;
    };
    /**
     * @param {?} time
     * @param {?} opts
     * @return {?}
     */
    NgxMatTimepickerAdapter.formatTime = /**
     * @param {?} time
     * @param {?} opts
     * @return {?}
     */
    function (time, opts) {
        if (!time) {
            return "Invalid Time";
        }
        var format = opts.format;
        /** @type {?} */
        var parsedTime = NgxMatTimepickerAdapter.parseTime(time, opts).setLocale(NgxMatTimepickerAdapter.defaultLocale);
        if (format !== 24) {
            return parsedTime.toLocaleString(__assign(__assign({}, DateTime.TIME_SIMPLE), { hour12: format !== 24 })).replace(/\u200E/g, "");
        }
        return parsedTime.toISOTime({
            includeOffset: false,
            suppressMilliseconds: true,
            suppressSeconds: true
        }).replace(/\u200E/g, "");
    };
    /**
     * @param {?} time
     * @param {?} format
     * @return {?}
     */
    NgxMatTimepickerAdapter.fromDateTimeToString = /**
     * @param {?} time
     * @param {?} format
     * @return {?}
     */
    function (time, format) {
        /** @type {?} */
        var timeFormat = format === 24 ? NgxMatTimepickerFormat.TWENTY_FOUR : NgxMatTimepickerFormat.TWELVE;
        return time.reconfigure({
            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,
            locale: NgxMatTimepickerAdapter.defaultLocale
        }).toFormat(timeFormat);
    };
    /**
     * @param {?} time
     * @param {?} before
     * @param {?} after
     * @param {?=} unit
     * @return {?}
     */
    NgxMatTimepickerAdapter.isBetween = /**
     * @param {?} time
     * @param {?} before
     * @param {?} after
     * @param {?=} unit
     * @return {?}
     */
    function (time, before, after, unit) {
        if (unit === void 0) { unit = "minutes"; }
        if (unit === "hours") {
            return this.isSameOrBefore(time, after, unit) && this.isSameOrAfter(time, before, unit);
        }
        if (unit === "minutes") {
            return this.isSameOrBefore(time, after) && this.isSameOrAfter(time, before);
        }
    };
    /**
     * @param {?} time
     * @param {?} compareWith
     * @param {?=} unit
     * @return {?}
     */
    NgxMatTimepickerAdapter.isSameOrAfter = /**
     * @param {?} time
     * @param {?} compareWith
     * @param {?=} unit
     * @return {?}
     */
    function (time, compareWith, unit) {
        if (unit === void 0) { unit = "minutes"; }
        if (unit === "hours") {
            return time.hour >= compareWith.hour;
        }
        if (unit === "minutes") {
            return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();
        }
    };
    /**
     * @param {?} time
     * @param {?} compareWith
     * @param {?=} unit
     * @return {?}
     */
    NgxMatTimepickerAdapter.isSameOrBefore = /**
     * @param {?} time
     * @param {?} compareWith
     * @param {?=} unit
     * @return {?}
     */
    function (time, compareWith, unit) {
        if (unit === void 0) { unit = "minutes"; }
        if (unit === "hours") {
            return time.hour <= compareWith.hour;
        }
        if (unit === "minutes") {
            return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();
        }
    };
    /**
     * @param {?} time
     * @param {?=} min
     * @param {?=} max
     * @param {?=} granularity
     * @param {?=} minutesGap
     * @param {?=} format
     * @return {?}
     */
    NgxMatTimepickerAdapter.isTimeAvailable = /**
     * @param {?} time
     * @param {?=} min
     * @param {?=} max
     * @param {?=} granularity
     * @param {?=} minutesGap
     * @param {?=} format
     * @return {?}
     */
    function (time, min, max, granularity, minutesGap, format) {
        if (!time) {
            return;
        }
        /** @type {?} */
        var convertedTime = this.parseTime(time, { format: format });
        /** @type {?} */
        var minutes = convertedTime.minute;
        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {
            throw new Error("Your minutes - " + minutes + " doesn't match your minutesGap - " + minutesGap);
        }
        /** @type {?} */
        var isAfter = (min && !max)
            && this.isSameOrAfter(convertedTime, min, granularity);
        /** @type {?} */
        var isBefore = (max && !min)
            && this.isSameOrBefore(convertedTime, max, granularity);
        /** @type {?} */
        var between = (min && max)
            && this.isBetween(convertedTime, min, max, granularity);
        /** @type {?} */
        var isAvailable = !min && !max;
        return isAfter || isBefore || between || isAvailable;
    };
    /**
     * @param {?} time
     * @param {?} opts
     * @return {?}
     */
    NgxMatTimepickerAdapter.parseTime = /**
     * @param {?} time
     * @param {?} opts
     * @return {?}
     */
    function (time, opts) {
        var _a = NgxMatTimepickerAdapter._getLocaleOptionsByTime(time, opts), numberingSystem = _a.numberingSystem, locale = _a.locale;
        /** @type {?} */
        var isPeriodExist = time.split(" ").length === 2;
        /** @type {?} */
        var timeMask = isPeriodExist ? NgxMatTimepickerFormat.TWELVE_SHORT : NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;
        return DateTime.fromFormat(time, timeMask, { numberingSystem: numberingSystem, locale: locale });
    };
    /**
     * @param {?} time
     * @param {?=} opts
     * @return {?}
     */
    NgxMatTimepickerAdapter.toLocaleTimeString = /**
     * @param {?} time
     * @param {?=} opts
     * @return {?}
     */
    function (time, opts) {
        if (opts === void 0) { opts = {}; }
        var _a = opts.format, format = _a === void 0 ? NgxMatTimepickerAdapter.defaultFormat : _a, _b = opts.locale, locale = _b === void 0 ? NgxMatTimepickerAdapter.defaultLocale : _b;
        /** @type {?} */
        var hourCycle = format === 24 ? "h23" : "h12";
        /** @type {?} */
        var timeFormat = __assign(__assign({}, DateTime.TIME_SIMPLE), { hourCycle: hourCycle });
        /** @type {?} */
        var timeMask = (format === 24) ? NgxMatTimepickerFormat.TWENTY_FOUR_SHORT : NgxMatTimepickerFormat.TWELVE_SHORT;
        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);
    };
    /**
     * @private
     * @param {?} time
     * @param {?} opts
     * @return {?}
     */
    NgxMatTimepickerAdapter._getLocaleOptionsByTime = /**
     * @private
     * @param {?} time
     * @param {?} opts
     * @return {?}
     */
    function (time, opts) {
        var _a = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts(), numberingSystem = _a.numberingSystem, locale = _a.locale;
        /** @type {?} */
        var localeConfig = {
            numberingSystem: (/** @type {?} */ (numberingSystem)),
            locale: locale
        };
        /** @type {?} */
        var defaultConfig = {
            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,
            locale: NgxMatTimepickerAdapter.defaultLocale
        };
        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;
    };
    NgxMatTimepickerAdapter.defaultFormat = 12;
    NgxMatTimepickerAdapter.defaultLocale = "en-US";
    NgxMatTimepickerAdapter.defaultNumberingSistem = "latn";
    return NgxMatTimepickerAdapter;
}());
export { NgxMatTimepickerAdapter };
if (false) {
    /** @type {?} */
    NgxMatTimepickerAdapter.defaultFormat;
    /** @type {?} */
    NgxMatTimepickerAdapter.defaultLocale;
    /** @type {?} */
    NgxMatTimepickerAdapter.defaultNumberingSistem;
}
//# sourceMappingURL=data:application/json;base64,
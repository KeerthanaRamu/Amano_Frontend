/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ngx-mat-timepicker-event.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
//
import { Subject } from "rxjs";
import { shareReplay } from "rxjs/operators";
import * as i0 from "@angular/core";
var NgxMatTimepickerEventService = /** @class */ (function () {
    function NgxMatTimepickerEventService() {
        this._backdropClick$ = new Subject();
        this._keydownEvent$ = new Subject();
    }
    Object.defineProperty(NgxMatTimepickerEventService.prototype, "backdropClick", {
        get: /**
         * @return {?}
         */
        function () {
            return this._backdropClick$.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: true }));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerEventService.prototype, "keydownEvent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._keydownEvent$.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: true }));
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    NgxMatTimepickerEventService.prototype.dispatchEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        switch (event.type) {
            case "click":
                this._backdropClick$.next((/** @type {?} */ (event)));
                break;
            case "keydown":
                this._keydownEvent$.next((/** @type {?} */ (event)));
                break;
            default:
                throw new Error("no such event type");
        }
    };
    NgxMatTimepickerEventService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    NgxMatTimepickerEventService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgxMatTimepickerEventService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxMatTimepickerEventService_Factory() { return new NgxMatTimepickerEventService(); }, token: NgxMatTimepickerEventService, providedIn: "root" });
    return NgxMatTimepickerEventService;
}());
export { NgxMatTimepickerEventService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerEventService.prototype._backdropClick$;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerEventService.prototype._keydownEvent$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWV2ZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWF0LXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbmd4LW1hdC10aW1lcGlja2VyLWV2ZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDOztBQUV6QyxPQUFPLEVBQWEsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFM0M7SUFnQkk7UUFIUSxvQkFBZSxHQUF3QixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3JELG1CQUFjLEdBQTJCLElBQUksT0FBTyxFQUFFLENBQUM7SUFHL0QsQ0FBQztJQVpELHNCQUFJLHVEQUFhOzs7O1FBQWpCO1lBQ0ksT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEcsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxzREFBWTs7OztRQUFoQjtZQUNJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pHLENBQUM7OztPQUFBOzs7OztJQVFELG9EQUFhOzs7O0lBQWIsVUFBYyxLQUFpQztRQUMzQyxRQUFRLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDaEIsS0FBSyxPQUFPO2dCQUNSLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLG1CQUFBLEtBQUssRUFBYyxDQUFDLENBQUM7Z0JBQy9DLE1BQU07WUFDVixLQUFLLFNBQVM7Z0JBQ1YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsbUJBQUEsS0FBSyxFQUFpQixDQUFDLENBQUM7Z0JBQ2pELE1BQU07WUFDVjtnQkFDSSxNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7U0FDN0M7SUFDTCxDQUFDOztnQkE5QkosVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7Ozs7dUNBUEQ7Q0FxQ0MsQUFoQ0QsSUFnQ0M7U0E3QlksNEJBQTRCOzs7Ozs7SUFVckMsdURBQTZEOzs7OztJQUM3RCxzREFBK0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG4vL1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBTdWJqZWN0fSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHtzaGFyZVJlcGxheX0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiBcInJvb3RcIlxufSlcbmV4cG9ydCBjbGFzcyBOZ3hNYXRUaW1lcGlja2VyRXZlbnRTZXJ2aWNlIHtcblxuICAgIGdldCBiYWNrZHJvcENsaWNrKCk6IE9ic2VydmFibGU8TW91c2VFdmVudD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmFja2Ryb3BDbGljayQuYXNPYnNlcnZhYmxlKCkucGlwZShzaGFyZVJlcGxheSh7YnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IHRydWV9KSk7XG4gICAgfVxuXG4gICAgZ2V0IGtleWRvd25FdmVudCgpOiBPYnNlcnZhYmxlPEtleWJvYXJkRXZlbnQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleWRvd25FdmVudCQuYXNPYnNlcnZhYmxlKCkucGlwZShzaGFyZVJlcGxheSh7YnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IHRydWV9KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfYmFja2Ryb3BDbGljayQ6IFN1YmplY3Q8TW91c2VFdmVudD4gPSBuZXcgU3ViamVjdCgpO1xuICAgIHByaXZhdGUgX2tleWRvd25FdmVudCQ6IFN1YmplY3Q8S2V5Ym9hcmRFdmVudD4gPSBuZXcgU3ViamVjdCgpO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgZGlzcGF0Y2hFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCB8IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiY2xpY2tcIjpcbiAgICAgICAgICAgICAgICB0aGlzLl9iYWNrZHJvcENsaWNrJC5uZXh0KGV2ZW50IGFzIE1vdXNlRXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgICAgICAgICAgICB0aGlzLl9rZXlkb3duRXZlbnQkLm5leHQoZXZlbnQgYXMgS2V5Ym9hcmRFdmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vIHN1Y2ggZXZlbnQgdHlwZVwiKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19
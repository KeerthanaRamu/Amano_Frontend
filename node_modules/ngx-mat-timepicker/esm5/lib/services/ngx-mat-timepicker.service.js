/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ngx-mat-timepicker.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __assign } from "tslib";
import { Injectable } from "@angular/core";
import { BehaviorSubject } from "rxjs";
import { NgxMatTimepickerPeriods } from "../models/ngx-mat-timepicker-periods.enum";
import { NgxMatTimepickerAdapter } from "./ngx-mat-timepicker-adapter";
import { DateTime } from "ts-luxon";
import * as i0 from "@angular/core";
/** @type {?} */
var DEFAULT_HOUR = {
    time: 12,
    angle: 360
};
/** @type {?} */
var DEFAULT_MINUTE = {
    time: 0,
    angle: 360
};
var NgxMatTimepickerService = /** @class */ (function () {
    function NgxMatTimepickerService() {
        this._hour$ = new BehaviorSubject(DEFAULT_HOUR);
        this._minute$ = new BehaviorSubject(DEFAULT_MINUTE);
        this._period$ = new BehaviorSubject(NgxMatTimepickerPeriods.AM);
    }
    Object.defineProperty(NgxMatTimepickerService.prototype, "hour", {
        set: /**
         * @param {?} hour
         * @return {?}
         */
        function (hour) {
            this._hour$.next(hour);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerService.prototype, "minute", {
        set: /**
         * @param {?} minute
         * @return {?}
         */
        function (minute) {
            this._minute$.next(minute);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerService.prototype, "period", {
        set: /**
         * @param {?} period
         * @return {?}
         */
        function (period) {
            /** @type {?} */
            var isPeriodValid = (period === NgxMatTimepickerPeriods.AM) || (period === NgxMatTimepickerPeriods.PM);
            if (isPeriodValid) {
                this._period$.next(period);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerService.prototype, "selectedHour", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hour$.asObservable();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerService.prototype, "selectedMinute", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minute$.asObservable();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerService.prototype, "selectedPeriod", {
        get: /**
         * @return {?}
         */
        function () {
            return this._period$.asObservable();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @param {?} format
     * @return {?}
     */
    NgxMatTimepickerService.prototype.getFullTime = /**
     * @param {?} format
     * @return {?}
     */
    function (format) {
        /** @type {?} */
        var selectedHour = this._hour$.getValue().time;
        /** @type {?} */
        var selectedMinute = this._minute$.getValue().time;
        /** @type {?} */
        var hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;
        /** @type {?} */
        var minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;
        /** @type {?} */
        var period = format === 12 ? this._period$.getValue() : "";
        /** @type {?} */
        var time = (hour + ":" + minute + " " + period).trim();
        return NgxMatTimepickerAdapter.formatTime(time, { format: format });
    };
    /**
     * @param {?} time
     * @param {?} min
     * @param {?} max
     * @param {?} format
     * @param {?=} minutesGap
     * @return {?}
     */
    NgxMatTimepickerService.prototype.setDefaultTimeIfAvailable = /**
     * @param {?} time
     * @param {?} min
     * @param {?} max
     * @param {?} format
     * @param {?=} minutesGap
     * @return {?}
     */
    function (time, min, max, format, minutesGap) {
        /* Workaround to double error message*/
        try {
            if (NgxMatTimepickerAdapter.isTimeAvailable(time, min, max, "minutes", minutesGap)) {
                this._setDefaultTime(time, format);
            }
        }
        catch (e) {
            console.error(e);
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerService.prototype._resetTime = /**
     * @private
     * @return {?}
     */
    function () {
        this.hour = __assign({}, DEFAULT_HOUR);
        this.minute = __assign({}, DEFAULT_MINUTE);
        this.period = NgxMatTimepickerPeriods.AM;
    };
    /**
     * @private
     * @param {?} time
     * @param {?} format
     * @return {?}
     */
    NgxMatTimepickerService.prototype._setDefaultTime = /**
     * @private
     * @param {?} time
     * @param {?} format
     * @return {?}
     */
    function (time, format) {
        /** @type {?} */
        var defaultTime = NgxMatTimepickerAdapter.parseTime(time, { format: format }).toJSDate();
        // Check on null, because invalid date will be null
        if (DateTime.fromJSDate(defaultTime) !== null) {
            /** @type {?} */
            var period = time.substr(time.length - 2).toUpperCase();
            /** @type {?} */
            var hour = defaultTime.getHours();
            this.hour = __assign(__assign({}, DEFAULT_HOUR), { time: formatHourByPeriod(hour, (/** @type {?} */ (period))) });
            this.minute = __assign(__assign({}, DEFAULT_MINUTE), { time: defaultTime.getMinutes() });
            this.period = (/** @type {?} */ (period));
        }
        else {
            this._resetTime();
        }
    };
    NgxMatTimepickerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */ NgxMatTimepickerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxMatTimepickerService_Factory() { return new NgxMatTimepickerService(); }, token: NgxMatTimepickerService, providedIn: "root" });
    return NgxMatTimepickerService;
}());
export { NgxMatTimepickerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerService.prototype._hour$;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerService.prototype._minute$;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerService.prototype._period$;
}
/**
 *
 *  Format hour in 24hours format to meridian (AM or PM) format
 * @param {?} hour
 * @param {?} period
 * @return {?}
 */
function formatHourByPeriod(hour, period) {
    switch (period) {
        case NgxMatTimepickerPeriods.AM:
            return hour === 0 ? 12 : hour;
        case NgxMatTimepickerPeriods.PM:
            return hour === 12 ? 12 : hour - 12;
        default:
            return hour;
    }
}
//# sourceMappingURL=data:application/json;base64,
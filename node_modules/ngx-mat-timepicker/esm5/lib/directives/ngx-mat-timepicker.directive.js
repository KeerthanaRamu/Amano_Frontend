/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ngx-mat-timepicker.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener, HostBinding, Inject, Input, Optional } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
//
import { NgxMatTimepickerComponent } from "../components/ngx-mat-timepicker/ngx-mat-timepicker.component";
import { NgxMatTimepickerAdapter } from "../services/ngx-mat-timepicker-adapter";
import { NGX_MAT_TIMEPICKER_LOCALE } from "../tokens/ngx-mat-timepicker-time-locale.token";
import { Subject } from "rxjs";
import { takeUntil } from "rxjs/operators";
import { CdkOverlayOrigin } from "@angular/cdk/overlay";
import { MatFormField } from "@angular/material/form-field";
var NgxMatTimepickerDirective = /** @class */ (function () {
    function NgxMatTimepickerDirective(_elementRef, _matFormField, _locale) {
        this._elementRef = _elementRef;
        this._matFormField = _matFormField;
        this._locale = _locale;
        // TODO: IMPROVE DETECTING (INJECT) MAT-FORM-FIELD IF PRESENT
        this.cdkOverlayOrigin = new CdkOverlayOrigin(this._matFormField ? this._matFormField.getConnectedOverlayOrigin() : this._elementRef);
        this._format = 12;
        this._subsCtrl$ = new Subject();
        this._value = "";
        this.onTouched = (/**
         * @return {?}
         */
        function () {
        });
        this._onChange = (/**
         * @return {?}
         */
        function () {
        });
    }
    Object.defineProperty(NgxMatTimepickerDirective.prototype, "element", {
        get: /**
         * @return {?}
         */
        function () {
            return this._elementRef && this._elementRef.nativeElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerDirective.prototype, "format", {
        get: /**
         * @return {?}
         */
        function () {
            return this._format;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._format = +value === 24 ? 24 : 12;
            /** @type {?} */
            var isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);
            if (isDynamicallyChanged) {
                this.value = this._value;
                this._timepicker.updateTime(this._value);
            }
            this._previousFormat = this._format;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerDirective.prototype, "max", {
        get: /**
         * @return {?}
         */
        function () {
            return this._max;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value === "string") {
                this._max = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
                return;
            }
            this._max = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerDirective.prototype, "min", {
        get: /**
         * @return {?}
         */
        function () {
            return this._min;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value === "string") {
                this._min = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
                return;
            }
            this._min = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerDirective.prototype, "timepicker", {
        set: /**
         * @param {?} picker
         * @return {?}
         */
        function (picker) {
            this._registerTimepicker(picker);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerDirective.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this._value) {
                return "";
            }
            return NgxMatTimepickerAdapter.toLocaleTimeString(this._value, { format: this.format, locale: this._locale });
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!value) {
                this._value = "";
                this._updateInputValue();
                return;
            }
            /** @type {?} */
            var time = NgxMatTimepickerAdapter.formatTime(value, { locale: this._locale, format: this.format });
            /** @type {?} */
            var isAvailable = NgxMatTimepickerAdapter.isTimeAvailable(time, (/** @type {?} */ (this._min)), (/** @type {?} */ (this._max)), "minutes", this._timepicker.minutesGap, this._format);
            if (isAvailable) {
                this._value = time;
                this._updateInputValue();
                return;
            }
            console.warn("Selected time doesn't match min or max value");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerDirective.prototype, "_defaultTime", {
        set: /**
         * @private
         * @param {?} time
         * @return {?}
         */
        function (time) {
            this._timepicker.defaultTime = NgxMatTimepickerAdapter.formatTime(time, {
                locale: this._locale,
                format: this.format
            });
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxMatTimepickerDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.value && changes.value.currentValue) {
            this._defaultTime = changes.value.currentValue;
        }
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unregisterTimepicker();
        this._subsCtrl$.next();
        this._subsCtrl$.complete();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxMatTimepickerDirective.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disableClick) {
            this._timepicker.open();
            event.stopPropagation();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxMatTimepickerDirective.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxMatTimepickerDirective.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NgxMatTimepickerDirective.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgxMatTimepickerDirective.prototype.updateValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        this._onChange(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgxMatTimepickerDirective.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        if (value) {
            this._defaultTime = value;
        }
    };
    /**
     * @private
     * @param {?} picker
     * @return {?}
     */
    NgxMatTimepickerDirective.prototype._registerTimepicker = /**
     * @private
     * @param {?} picker
     * @return {?}
     */
    function (picker) {
        var _this = this;
        if (picker) {
            this._timepicker = picker;
            this._timepicker.registerInput(this);
            this._timepicker.timeSet
                .pipe(takeUntil(this._subsCtrl$))
                .subscribe((/**
             * @param {?} time
             * @return {?}
             */
            function (time) {
                _this.value = time;
                _this._onChange(_this.value);
                _this.onTouched();
                _this._defaultTime = _this._value;
            }));
        }
        else {
            throw new Error("NgxMatTimepickerComponent is not defined." +
                " Please make sure you passed the timepicker to ngxMatTimepicker directive");
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerDirective.prototype._unregisterTimepicker = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._timepicker) {
            this._timepicker.unregisterInput();
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerDirective.prototype._updateInputValue = /**
     * @private
     * @return {?}
     */
    function () {
        this._elementRef.nativeElement.value = this.value;
    };
    NgxMatTimepickerDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[ngxMatTimepicker]",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: NgxMatTimepickerDirective,
                            multi: true
                        }
                    ],
                    // tslint:disable-next-line:no-host-metadata-property
                    host: {
                        "[disabled]": "disabled",
                        "(blur)": "onTouched()",
                    },
                },] }
    ];
    /** @nocollapse */
    NgxMatTimepickerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MatFormField,] }] },
        { type: String, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_LOCALE,] }] }
    ]; };
    NgxMatTimepickerDirective.propDecorators = {
        format: [{ type: Input }],
        max: [{ type: Input }],
        min: [{ type: Input }],
        timepicker: [{ type: Input, args: ["ngxMatTimepicker",] }],
        value: [{ type: Input }],
        cdkOverlayOrigin: [{ type: HostBinding, args: ["attr.cdkOverlayOrigin",] }],
        disableClick: [{ type: Input }],
        disabled: [{ type: Input }],
        onClick: [{ type: HostListener, args: ["click", ["$event"],] }],
        updateValue: [{ type: HostListener, args: ["change", ["$event"],] }]
    };
    return NgxMatTimepickerDirective;
}());
export { NgxMatTimepickerDirective };
if (false) {
    /** @type {?} */
    NgxMatTimepickerDirective.prototype.cdkOverlayOrigin;
    /** @type {?} */
    NgxMatTimepickerDirective.prototype.disableClick;
    /** @type {?} */
    NgxMatTimepickerDirective.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDirective.prototype._format;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDirective.prototype._max;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDirective.prototype._min;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDirective.prototype._previousFormat;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDirective.prototype._subsCtrl$;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDirective.prototype._timepicker;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDirective.prototype._value;
    /** @type {?} */
    NgxMatTimepickerDirective.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDirective.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDirective.prototype._matFormField;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDirective.prototype._locale;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tYXQtdGltZXBpY2tlci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL25neC1tYXQtdGltZXBpY2tlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osV0FBVyxFQUNYLE1BQU0sRUFDTixLQUFLLEVBR1UsUUFBUSxFQUMxQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXVCLGlCQUFpQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7O0FBRXZFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLCtEQUErRCxDQUFDO0FBQ3hHLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQy9FLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLGdEQUFnRCxDQUFDO0FBR3pGLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3RELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUUxRDtJQThISSxtQ0FBb0IsV0FBdUIsRUFDVyxhQUEyQixFQUMxQixPQUFlO1FBRmxELGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQ1csa0JBQWEsR0FBYixhQUFhLENBQWM7UUFDMUIsWUFBTyxHQUFQLE9BQU8sQ0FBUTs7UUFmaEMscUJBQWdCLEdBQ2xELElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENB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TixZQUFZLHVCQWlJSCxRQUFRLFlBQUksTUFBTSxTQUFDLFlBQVk7NkNBQy9CLE1BQU0sU0FBQyx5QkFBeUI7Ozt5QkF2RzVDLEtBQUs7c0JBZ0JMLEtBQUs7c0JBY0wsS0FBSzs2QkFVTCxLQUFLLFNBQUMsa0JBQWtCO3dCQWF4QixLQUFLO21DQW1DTCxXQUFXLFNBQUMsdUJBQXVCOytCQUVuQyxLQUFLOzJCQUNMLEtBQUs7MEJBMkJMLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7OEJBdUJoQyxZQUFZLFNBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDOztJQTZDdEMsZ0NBQUM7Q0FBQSxBQW5ORCxJQW1OQztTQXBNWSx5QkFBeUI7OztJQWtHbEMscURBQ2lIOztJQUNqSCxpREFBK0I7O0lBQy9CLDZDQUEyQjs7Ozs7SUFFM0IsNENBQXFCOzs7OztJQUNyQix5Q0FBZ0M7Ozs7O0lBQ2hDLHlDQUFnQzs7Ozs7SUFDaEMsb0RBQWdDOzs7OztJQUNoQywrQ0FBd0Q7Ozs7O0lBQ3hELGdEQUErQzs7Ozs7SUFDL0MsMkNBQTRCOztJQTJCNUIsOENBQ0M7Ozs7O0lBMkJELDhDQUNDOzs7OztJQXREVyxnREFBK0I7Ozs7O0lBQy9CLGtEQUFxRTs7Ozs7SUFDckUsNENBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9uQ2hhbmdlcyxcbiAgICBPbkRlc3Ryb3ksXG4gICAgU2ltcGxlQ2hhbmdlcywgT3B0aW9uYWxcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7Q29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbi8vXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJDb21wb25lbnR9IGZyb20gXCIuLi9jb21wb25lbnRzL25neC1tYXQtdGltZXBpY2tlci9uZ3gtbWF0LXRpbWVwaWNrZXIuY29tcG9uZW50XCI7XG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJBZGFwdGVyfSBmcm9tIFwiLi4vc2VydmljZXMvbmd4LW1hdC10aW1lcGlja2VyLWFkYXB0ZXJcIjtcbmltcG9ydCB7TkdYX01BVF9USU1FUElDS0VSX0xPQ0FMRX0gZnJvbSBcIi4uL3Rva2Vucy9uZ3gtbWF0LXRpbWVwaWNrZXItdGltZS1sb2NhbGUudG9rZW5cIjtcbi8vXG5pbXBvcnQge0RhdGVUaW1lfSBmcm9tIFwidHMtbHV4b25cIjtcbmltcG9ydCB7U3ViamVjdH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7dGFrZVVudGlsfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcbmltcG9ydCB7Q2RrT3ZlcmxheU9yaWdpbn0gZnJvbSBcIkBhbmd1bGFyL2Nkay9vdmVybGF5XCI7XG5pbXBvcnQge01hdEZvcm1GaWVsZH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL2Zvcm0tZmllbGRcIjtcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6IFwiW25neE1hdFRpbWVwaWNrZXJdXCIsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IE5neE1hdFRpbWVwaWNrZXJEaXJlY3RpdmUsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9XG4gICAgXSxcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taG9zdC1tZXRhZGF0YS1wcm9wZXJ0eVxuICAgIGhvc3Q6IHtcbiAgICAgICAgXCJbZGlzYWJsZWRdXCI6IFwiZGlzYWJsZWRcIixcbiAgICAgICAgXCIoYmx1cilcIjogXCJvblRvdWNoZWQoKVwiLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIE5neE1hdFRpbWVwaWNrZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuXG4gICAgZ2V0IGVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudFJlZiAmJiB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgZ2V0IGZvcm1hdCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0O1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IGZvcm1hdCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2Zvcm1hdCA9ICt2YWx1ZSA9PT0gMjQgPyAyNCA6IDEyO1xuICAgICAgICBjb25zdCBpc0R5bmFtaWNhbGx5Q2hhbmdlZCA9IHZhbHVlICYmICh0aGlzLl9wcmV2aW91c0Zvcm1hdCAmJiB0aGlzLl9wcmV2aW91c0Zvcm1hdCAhPT0gdGhpcy5fZm9ybWF0KTtcblxuICAgICAgICBpZiAoaXNEeW5hbWljYWxseUNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLl92YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVwaWNrZXIudXBkYXRlVGltZSh0aGlzLl92YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJldmlvdXNGb3JtYXQgPSB0aGlzLl9mb3JtYXQ7XG4gICAgfVxuXG4gICAgZ2V0IG1heCgpOiBzdHJpbmcgfCBEYXRlVGltZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXg7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgbWF4KHZhbHVlOiBzdHJpbmcgfCBEYXRlVGltZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXggPSBOZ3hNYXRUaW1lcGlja2VyQWRhcHRlci5wYXJzZVRpbWUodmFsdWUsIHtsb2NhbGU6IHRoaXMuX2xvY2FsZSwgZm9ybWF0OiB0aGlzLmZvcm1hdH0pO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWF4ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IG1pbigpOiBzdHJpbmcgfCBEYXRlVGltZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9taW47XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgbWluKHZhbHVlOiBzdHJpbmcgfCBEYXRlVGltZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aGlzLl9taW4gPSBOZ3hNYXRUaW1lcGlja2VyQWRhcHRlci5wYXJzZVRpbWUodmFsdWUsIHtsb2NhbGU6IHRoaXMuX2xvY2FsZSwgZm9ybWF0OiB0aGlzLmZvcm1hdH0pO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWluID0gdmFsdWU7XG4gICAgfVxuXG4gICAgQElucHV0KFwibmd4TWF0VGltZXBpY2tlclwiKVxuICAgIHNldCB0aW1lcGlja2VyKHBpY2tlcjogTmd4TWF0VGltZXBpY2tlckNvbXBvbmVudCkge1xuICAgICAgICB0aGlzLl9yZWdpc3RlclRpbWVwaWNrZXIocGlja2VyKTtcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKCF0aGlzLl92YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gTmd4TWF0VGltZXBpY2tlckFkYXB0ZXIudG9Mb2NhbGVUaW1lU3RyaW5nKHRoaXMuX3ZhbHVlLCB7Zm9ybWF0OiB0aGlzLmZvcm1hdCwgbG9jYWxlOiB0aGlzLl9sb2NhbGV9KTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB2YWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUlucHV0VmFsdWUoKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpbWUgPSBOZ3hNYXRUaW1lcGlja2VyQWRhcHRlci5mb3JtYXRUaW1lKHZhbHVlLCB7bG9jYWxlOiB0aGlzLl9sb2NhbGUsIGZvcm1hdDogdGhpcy5mb3JtYXR9KTtcbiAgICAgICAgY29uc3QgaXNBdmFpbGFibGUgPSBOZ3hNYXRUaW1lcGlja2VyQWRhcHRlci5pc1RpbWVBdmFpbGFibGUoXG4gICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAgdGhpcy5fbWluIGFzIERhdGVUaW1lLFxuICAgICAgICAgICAgdGhpcy5fbWF4IGFzIERhdGVUaW1lLFxuICAgICAgICAgICAgXCJtaW51dGVzXCIsXG4gICAgICAgICAgICB0aGlzLl90aW1lcGlja2VyLm1pbnV0ZXNHYXAsXG4gICAgICAgICAgICB0aGlzLl9mb3JtYXRcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoaXNBdmFpbGFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdGltZTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUlucHV0VmFsdWUoKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUud2FybihcIlNlbGVjdGVkIHRpbWUgZG9lc24ndCBtYXRjaCBtaW4gb3IgbWF4IHZhbHVlXCIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0IF9kZWZhdWx0VGltZSh0aW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fdGltZXBpY2tlci5kZWZhdWx0VGltZSA9IE5neE1hdFRpbWVwaWNrZXJBZGFwdGVyLmZvcm1hdFRpbWUodGltZSwge1xuICAgICAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgICAgICBmb3JtYXQ6IHRoaXMuZm9ybWF0XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRPRE86IElNUFJPVkUgREVURUNUSU5HIChJTkpFQ1QpIE1BVC1GT1JNLUZJRUxEIElGIFBSRVNFTlRcbiAgICBASG9zdEJpbmRpbmcoXCJhdHRyLmNka092ZXJsYXlPcmlnaW5cIikgY2RrT3ZlcmxheU9yaWdpbjogQ2RrT3ZlcmxheU9yaWdpbiA9XG4gICAgICAgIG5ldyBDZGtPdmVybGF5T3JpZ2luKHRoaXMuX21hdEZvcm1GaWVsZCA/IHRoaXMuX21hdEZvcm1GaWVsZC5nZXRDb25uZWN0ZWRPdmVybGF5T3JpZ2luKCkgOiB0aGlzLl9lbGVtZW50UmVmKTtcbiAgICBASW5wdXQoKSBkaXNhYmxlQ2xpY2s6IGJvb2xlYW47XG4gICAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgICBwcml2YXRlIF9mb3JtYXQgPSAxMjtcbiAgICBwcml2YXRlIF9tYXg6IHN0cmluZyB8IERhdGVUaW1lO1xuICAgIHByaXZhdGUgX21pbjogc3RyaW5nIHwgRGF0ZVRpbWU7XG4gICAgcHJpdmF0ZSBfcHJldmlvdXNGb3JtYXQ6IG51bWJlcjtcbiAgICBwcml2YXRlIF9zdWJzQ3RybCQ6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICAgIHByaXZhdGUgX3RpbWVwaWNrZXI6IE5neE1hdFRpbWVwaWNrZXJDb21wb25lbnQ7XG4gICAgcHJpdmF0ZSBfdmFsdWU6IHN0cmluZyA9IFwiXCI7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIEBPcHRpb25hbCgpIEBJbmplY3QoTWF0Rm9ybUZpZWxkKSBwcml2YXRlIF9tYXRGb3JtRmllbGQ6IE1hdEZvcm1GaWVsZCxcbiAgICAgICAgICAgICAgICBASW5qZWN0KE5HWF9NQVRfVElNRVBJQ0tFUl9MT0NBTEUpIHByaXZhdGUgX2xvY2FsZTogc3RyaW5nKSB7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBpZiAoY2hhbmdlcy52YWx1ZSAmJiBjaGFuZ2VzLnZhbHVlLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fZGVmYXVsdFRpbWUgPSBjaGFuZ2VzLnZhbHVlLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLl91bnJlZ2lzdGVyVGltZXBpY2tlcigpO1xuICAgICAgICB0aGlzLl9zdWJzQ3RybCQubmV4dCgpO1xuICAgICAgICB0aGlzLl9zdWJzQ3RybCQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKFwiY2xpY2tcIiwgW1wiJGV2ZW50XCJdKVxuICAgIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVDbGljaykge1xuICAgICAgICAgICAgdGhpcy5fdGltZXBpY2tlci5vcGVuKCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uVG91Y2hlZCA9ICgpID0+IHtcbiAgICB9XG5cbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAodmFsdWU6IGFueSkgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9vbkNoYW5nZSA9IGZuO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gICAgfVxuXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoXCJjaGFuZ2VcIiwgW1wiJGV2ZW50XCJdKVxuICAgIHVwZGF0ZVZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9vbkNoYW5nZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9kZWZhdWx0VGltZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfb25DaGFuZ2U6ICh2YWx1ZTogYW55KSA9PiB2b2lkID0gKCkgPT4ge1xuICAgIH1cblxuICAgIHByaXZhdGUgX3JlZ2lzdGVyVGltZXBpY2tlcihwaWNrZXI6IE5neE1hdFRpbWVwaWNrZXJDb21wb25lbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKHBpY2tlcikge1xuICAgICAgICAgICAgdGhpcy5fdGltZXBpY2tlciA9IHBpY2tlcjtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVwaWNrZXIucmVnaXN0ZXJJbnB1dCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVwaWNrZXIudGltZVNldFxuICAgICAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLl9zdWJzQ3RybCQpKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKHRpbWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGltZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25DaGFuZ2UodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25Ub3VjaGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlZmF1bHRUaW1lID0gdGhpcy5fdmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOZ3hNYXRUaW1lcGlja2VyQ29tcG9uZW50IGlzIG5vdCBkZWZpbmVkLlwiICtcbiAgICAgICAgICAgICAgICBcIiBQbGVhc2UgbWFrZSBzdXJlIHlvdSBwYXNzZWQgdGhlIHRpbWVwaWNrZXIgdG8gbmd4TWF0VGltZXBpY2tlciBkaXJlY3RpdmVcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF91bnJlZ2lzdGVyVGltZXBpY2tlcigpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVwaWNrZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVwaWNrZXIudW5yZWdpc3RlcklucHV0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF91cGRhdGVJbnB1dFZhbHVlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIH1cblxufVxuXG4iXX0=
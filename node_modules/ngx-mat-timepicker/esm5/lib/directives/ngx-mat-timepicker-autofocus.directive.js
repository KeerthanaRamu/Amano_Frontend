/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ngx-mat-timepicker-autofocus.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Inject, Input, Optional } from "@angular/core";
import { DOCUMENT } from "@angular/common";
var NgxMatTimepickerAutofocusDirective = /** @class */ (function () {
    function NgxMatTimepickerAutofocusDirective(_element, document) {
        this._element = _element;
        this.document = document;
        this._activeElement = this.document.activeElement;
    }
    /**
     * @return {?}
     */
    NgxMatTimepickerAutofocusDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isFocusActive) {
            // To avoid ExpressionChangedAfterItHasBeenCheckedError;
            setTimeout((/**
             * @return {?}
             */
            function () { return _this._element.nativeElement.focus({ preventScroll: true }); }));
        }
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerAutofocusDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // To avoid ExpressionChangedAfterItHasBeenCheckedError;
        setTimeout((/**
         * @return {?}
         */
        function () { return _this._activeElement.focus({ preventScroll: true }); }));
    };
    NgxMatTimepickerAutofocusDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[ngxMatTimepickerAutofocus]"
                },] }
    ];
    /** @nocollapse */
    NgxMatTimepickerAutofocusDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
    ]; };
    NgxMatTimepickerAutofocusDirective.propDecorators = {
        isFocusActive: [{ type: Input, args: ["ngxMatTimepickerAutofocus",] }]
    };
    return NgxMatTimepickerAutofocusDirective;
}());
export { NgxMatTimepickerAutofocusDirective };
if (false) {
    /** @type {?} */
    NgxMatTimepickerAutofocusDirective.prototype.isFocusActive;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerAutofocusDirective.prototype._activeElement;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerAutofocusDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerAutofocusDirective.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWF1dG9mb2N1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWF0LXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9uZ3gtbWF0LXRpbWVwaWNrZXItYXV0b2ZvY3VzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQXdCLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFFekM7SUFTSSw0Q0FBb0IsUUFBb0IsRUFBd0MsUUFBYTtRQUF6RSxhQUFRLEdBQVIsUUFBUSxDQUFZO1FBQXdDLGFBQVEsR0FBUixRQUFRLENBQUs7UUFDekYsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztJQUN0RCxDQUFDOzs7O0lBRUQsd0RBQVc7OztJQUFYO1FBQUEsaUJBS0M7UUFKRyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDcEIsd0RBQXdEO1lBQ3hELFVBQVU7OztZQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBMUQsQ0FBMEQsRUFBQyxDQUFDO1NBQ2hGO0lBQ0wsQ0FBQzs7OztJQUVELHdEQUFXOzs7SUFBWDtRQUFBLGlCQUdDO1FBRkcsd0RBQXdEO1FBQ3hELFVBQVU7OztRQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFsRCxDQUFrRCxFQUFDLENBQUM7SUFDekUsQ0FBQzs7Z0JBdkJKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsNkJBQTZCO2lCQUMxQzs7OztnQkFMa0IsVUFBVTtnREFZa0IsUUFBUSxZQUFJLE1BQU0sU0FBQyxRQUFROzs7Z0NBSnJFLEtBQUssU0FBQywyQkFBMkI7O0lBbUJ0Qyx5Q0FBQztDQUFBLEFBeEJELElBd0JDO1NBckJZLGtDQUFrQzs7O0lBRTNDLDJEQUEyRDs7Ozs7SUFFM0QsNERBQW9DOzs7OztJQUV4QixzREFBNEI7Ozs7O0lBQUUsc0RBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPcHRpb25hbH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7RE9DVU1FTlR9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6IFwiW25neE1hdFRpbWVwaWNrZXJBdXRvZm9jdXNdXCJcbn0pXG5leHBvcnQgY2xhc3MgTmd4TWF0VGltZXBpY2tlckF1dG9mb2N1c0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcblxuICAgIEBJbnB1dChcIm5neE1hdFRpbWVwaWNrZXJBdXRvZm9jdXNcIikgaXNGb2N1c0FjdGl2ZTogYm9vbGVhbjtcblxuICAgIHByaXZhdGUgX2FjdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZiwgQE9wdGlvbmFsKCkgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSB0aGlzLmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRm9jdXNBY3RpdmUpIHtcbiAgICAgICAgICAgIC8vIFRvIGF2b2lkIEV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXJyb3I7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIC8vIFRvIGF2b2lkIEV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXJyb3I7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fYWN0aXZlRWxlbWVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSkpO1xuICAgIH1cbn1cbiJdfQ==
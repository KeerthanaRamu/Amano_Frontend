/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ngx-mat-timepicker-base.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Inject, Input, Optional } from "@angular/core";
//
import { NgxMatTimepickerEventService } from "../services/ngx-mat-timepicker-event.service";
import { NgxMatTimepickerService } from "../services/ngx-mat-timepicker.service";
import { NgxMatTimepickerAdapter } from "../services/ngx-mat-timepicker-adapter";
//
import { NgxMatTimepickerUnits } from "../models/ngx-mat-timepicker-units.enum";
import { NGX_MAT_TIMEPICKER_LOCALE } from "../tokens/ngx-mat-timepicker-time-locale.token";
import { NGX_MAT_TIMEPICKER_CONFIG } from "../tokens/ngx-mat-timepicker-config.token";
//
import { Subject } from "rxjs";
import { shareReplay, takeUntil } from "rxjs/operators";
var NgxMatTimepickerBaseDirective = /** @class */ (function () {
    function NgxMatTimepickerBaseDirective(_timepickerSrv, _eventSrv, _locale, data) {
        this._timepickerSrv = _timepickerSrv;
        this._eventSrv = _eventSrv;
        this._locale = _locale;
        this.data = data;
        this.activeTimeUnit = NgxMatTimepickerUnits.HOUR;
        this.timeUnit = NgxMatTimepickerUnits;
        this._color = "primary";
        this._subsCtrl$ = new Subject();
        this.color = data.color;
        this.defaultTime = data.defaultTime;
    }
    Object.defineProperty(NgxMatTimepickerBaseDirective.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this._color;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._color = newValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerBaseDirective.prototype, "defaultTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._defaultTime;
        },
        set: /**
         * @param {?} time
         * @return {?}
         */
        function (time) {
            this._defaultTime = time;
            this._setDefaultTime(time);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @param {?} period
     * @return {?}
     */
    NgxMatTimepickerBaseDirective.prototype.changePeriod = /**
     * @param {?} period
     * @return {?}
     */
    function (period) {
        this._timepickerSrv.period = period;
        this._onTimeChange();
    };
    /**
     * @param {?} unit
     * @return {?}
     */
    NgxMatTimepickerBaseDirective.prototype.changeTimeUnit = /**
     * @param {?} unit
     * @return {?}
     */
    function (unit) {
        this.activeTimeUnit = unit;
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerBaseDirective.prototype.close = /**
     * @return {?}
     */
    function () {
        this.data.timepickerBaseRef.close();
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerBaseDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._subsCtrl$.next();
        this._subsCtrl$.complete();
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerBaseDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._defineTime();
        this.selectedHour = this._timepickerSrv.selectedHour
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.selectedMinute = this._timepickerSrv.selectedMinute
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.selectedPeriod = this._timepickerSrv.selectedPeriod
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.data.timepickerBaseRef.timeUpdated.pipe(takeUntil(this._subsCtrl$))
            .subscribe(this._setDefaultTime.bind(this));
    };
    /**
     * @param {?} hour
     * @return {?}
     */
    NgxMatTimepickerBaseDirective.prototype.onHourChange = /**
     * @param {?} hour
     * @return {?}
     */
    function (hour) {
        this._timepickerSrv.hour = hour;
        this._onTimeChange();
    };
    /**
     * @param {?} hour
     * @return {?}
     */
    NgxMatTimepickerBaseDirective.prototype.onHourSelected = /**
     * @param {?} hour
     * @return {?}
     */
    function (hour) {
        if (!this.data.hoursOnly) {
            this.changeTimeUnit(NgxMatTimepickerUnits.MINUTE);
        }
        this.data.timepickerBaseRef.hourSelected.next(hour);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxMatTimepickerBaseDirective.prototype.onKeydown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this._eventSrv.dispatchEvent(e);
        e.stopPropagation();
    };
    /**
     * @param {?} minute
     * @return {?}
     */
    NgxMatTimepickerBaseDirective.prototype.onMinuteChange = /**
     * @param {?} minute
     * @return {?}
     */
    function (minute) {
        this._timepickerSrv.minute = minute;
        this._onTimeChange();
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerBaseDirective.prototype.setTime = /**
     * @return {?}
     */
    function () {
        this.data.timepickerBaseRef.timeSet.next(this._timepickerSrv.getFullTime(this.data.format));
        this.close();
    };
    /**
     * @protected
     * @return {?}
     */
    NgxMatTimepickerBaseDirective.prototype._defineTime = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var minTime = this.data.minTime;
        if (minTime && (!this.data.time && !this.data.defaultTime)) {
            /** @type {?} */
            var time = NgxMatTimepickerAdapter.fromDateTimeToString(minTime, this.data.format);
            this._setDefaultTime(time);
        }
    };
    /**
     * @protected
     * @return {?}
     */
    NgxMatTimepickerBaseDirective.prototype._onTimeChange = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var time = NgxMatTimepickerAdapter.toLocaleTimeString(this._timepickerSrv.getFullTime(this.data.format), {
            locale: this._locale,
            format: this.data.format
        });
        this.data.timepickerBaseRef.timeChanged.emit(time);
    };
    /**
     * @protected
     * @param {?} time
     * @return {?}
     */
    NgxMatTimepickerBaseDirective.prototype._setDefaultTime = /**
     * @protected
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this._timepickerSrv.setDefaultTimeIfAvailable(time, this.data.minTime, this.data.maxTime, this.data.format, this.data.minutesGap);
    };
    NgxMatTimepickerBaseDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[ngxMatTimepickerBase]"
                },] }
    ];
    /** @nocollapse */
    NgxMatTimepickerBaseDirective.ctorParameters = function () { return [
        { type: NgxMatTimepickerService },
        { type: NgxMatTimepickerEventService },
        { type: String, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_LOCALE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_CONFIG,] }, { type: Optional }] }
    ]; };
    NgxMatTimepickerBaseDirective.propDecorators = {
        color: [{ type: Input }],
        defaultTime: [{ type: Input }],
        onKeydown: [{ type: HostListener, args: ["keydown", ["$event"],] }]
    };
    return NgxMatTimepickerBaseDirective;
}());
export { NgxMatTimepickerBaseDirective };
if (false) {
    /** @type {?} */
    NgxMatTimepickerBaseDirective.prototype.activeTimeUnit;
    /** @type {?} */
    NgxMatTimepickerBaseDirective.prototype.selectedHour;
    /** @type {?} */
    NgxMatTimepickerBaseDirective.prototype.selectedMinute;
    /** @type {?} */
    NgxMatTimepickerBaseDirective.prototype.selectedPeriod;
    /** @type {?} */
    NgxMatTimepickerBaseDirective.prototype.timeUnit;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerBaseDirective.prototype._color;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerBaseDirective.prototype._defaultTime;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerBaseDirective.prototype._subsCtrl$;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerBaseDirective.prototype._timepickerSrv;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerBaseDirective.prototype._eventSrv;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerBaseDirective.prototype._locale;
    /** @type {?} */
    NgxMatTimepickerBaseDirective.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,
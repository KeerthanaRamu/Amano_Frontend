/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ngx-mat-timepicker.utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __assign } from "tslib";
import { NgxMatTimepickerAdapter } from "../services/ngx-mat-timepicker-adapter";
import { NgxMatTimepickerFormat } from "../models/ngx-mat-timepicker-format.enum";
//
import { DateTime } from "ts-luxon";
// @dynamic
var 
// @dynamic
NgxMatTimepickerUtils = /** @class */ (function () {
    function NgxMatTimepickerUtils() {
    }
    /**
     * @param {?} hours
     * @param {?} config
     * @return {?}
     */
    NgxMatTimepickerUtils.disableHours = /**
     * @param {?} hours
     * @param {?} config
     * @return {?}
     */
    function (hours, config) {
        if (config.min || config.max) {
            return hours.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var hour = config.format === 24 ? value.time : NgxMatTimepickerAdapter.formatHour(value.time, config.format, config.period);
                /** @type {?} */
                var currentTime = DateTime.fromObject({ hour: hour }).toFormat(NgxMatTimepickerFormat.TWELVE);
                return __assign(__assign({}, value), { disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, "hours") });
            }));
        }
        return hours;
    };
    /**
     * @param {?} minutes
     * @param {?} selectedHour
     * @param {?} config
     * @return {?}
     */
    NgxMatTimepickerUtils.disableMinutes = /**
     * @param {?} minutes
     * @param {?} selectedHour
     * @param {?} config
     * @return {?}
     */
    function (minutes, selectedHour, config) {
        if (config.min || config.max) {
            /** @type {?} */
            var hour_1 = NgxMatTimepickerAdapter.formatHour(selectedHour, config.format, config.period);
            return minutes.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var currentTime = DateTime.fromObject({
                    hour: hour_1,
                    minute: value.time
                }).toFormat(NgxMatTimepickerFormat.TWELVE);
                return __assign(__assign({}, value), { disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, "minutes") });
            }));
        }
        return minutes;
    };
    /**
     * @param {?} format
     * @return {?}
     */
    NgxMatTimepickerUtils.getHours = /**
     * @param {?} format
     * @return {?}
     */
    function (format) {
        return Array(format).fill(1).map((/**
         * @param {?} v
         * @param {?} i
         * @return {?}
         */
        function (v, i) {
            /** @type {?} */
            var angleStep = 30;
            /** @type {?} */
            var time = v + i;
            /** @type {?} */
            var angle = angleStep * time;
            return { time: time === 24 ? 0 : time, angle: angle };
        }));
    };
    /**
     * @param {?=} gap
     * @return {?}
     */
    NgxMatTimepickerUtils.getMinutes = /**
     * @param {?=} gap
     * @return {?}
     */
    function (gap) {
        if (gap === void 0) { gap = 1; }
        /** @type {?} */
        var minutesCount = 60;
        /** @type {?} */
        var angleStep = 360 / minutesCount;
        /** @type {?} */
        var minutes = [];
        for (var i = 0; i < minutesCount; i++) {
            /** @type {?} */
            var angle = angleStep * i;
            if (i % gap === 0) {
                minutes.push({ time: i, angle: angle !== 0 ? angle : 360 });
            }
        }
        return minutes;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxMatTimepickerUtils.isDigit = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Allow: backspace, delete, tab, escape, enter
        if ([46, 8, 9, 27, 13].some((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n === e.keyCode; })) ||
            // Allow: Ctrl/cmd+A
            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: Ctrl/cmd+C
            (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: Ctrl/cmd+X
            (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, up, down
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            return true;
        }
        return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));
    };
    return NgxMatTimepickerUtils;
}());
// @dynamic
export { NgxMatTimepickerUtils };
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, TemplateRef } from "@angular/core";
//
import { NgxMatTimepickerPeriods } from "../../models/ngx-mat-timepicker-periods.enum";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import { NGX_MAT_TIMEPICKER_LOCALE } from "../../tokens/ngx-mat-timepicker-time-locale.token";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
//
import { DateTime, Info } from "ts-luxon";
var NgxMatTimepickerDialComponent = /** @class */ (function () {
    function NgxMatTimepickerDialComponent(_locale) {
        this._locale = _locale;
        this.hourChanged = new EventEmitter();
        this.meridiems = Info.meridiems({ locale: this._locale });
        this.minuteChanged = new EventEmitter();
        this.periodChanged = new EventEmitter();
        this.timeUnit = NgxMatTimepickerUnits;
        this.timeUnitChanged = new EventEmitter();
        this._color = "primary";
    }
    Object.defineProperty(NgxMatTimepickerDialComponent.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this._color;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._color = newValue;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @param {?} hour
     * @return {?}
     */
    NgxMatTimepickerDialComponent.prototype.changeHour = /**
     * @param {?} hour
     * @return {?}
     */
    function (hour) {
        this.hourChanged.next(hour);
    };
    /**
     * @param {?} minute
     * @return {?}
     */
    NgxMatTimepickerDialComponent.prototype.changeMinute = /**
     * @param {?} minute
     * @return {?}
     */
    function (minute) {
        this.minuteChanged.next(minute);
    };
    /**
     * @param {?} period
     * @return {?}
     */
    NgxMatTimepickerDialComponent.prototype.changePeriod = /**
     * @param {?} period
     * @return {?}
     */
    function (period) {
        this.periodChanged.next(period);
    };
    /**
     * @param {?} unit
     * @return {?}
     */
    NgxMatTimepickerDialComponent.prototype.changeTimeUnit = /**
     * @param {?} unit
     * @return {?}
     */
    function (unit) {
        this.timeUnitChanged.next(unit);
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerDialComponent.prototype.hideHint = /**
     * @return {?}
     */
    function () {
        this.isHintVisible = false;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxMatTimepickerDialComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var periodChanged = changes.period && changes.period.currentValue;
        if (periodChanged || changes.format && changes.format.currentValue) {
            /** @type {?} */
            var hours = NgxMatTimepickerUtils.getHours(this.format);
            this.hours = NgxMatTimepickerUtils.disableHours(hours, {
                min: this.minTime,
                max: this.maxTime,
                format: this.format,
                period: this.period
            });
        }
        if (periodChanged || changes.hour && changes.hour.currentValue) {
            /** @type {?} */
            var minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);
            this.minutes = NgxMatTimepickerUtils.disableMinutes(minutes, +this.hour, {
                min: this.minTime,
                max: this.maxTime,
                format: this.format,
                period: this.period
            });
        }
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerDialComponent.prototype.showHint = /**
     * @return {?}
     */
    function () {
        this.isHintVisible = true;
    };
    NgxMatTimepickerDialComponent.decorators = [
        { type: Component, args: [{
                    selector: "ngx-mat-timepicker-dial",
                    template: "<div class=\"timepicker-dial\">\n    <div class=\"timepicker-dial__container\">\n        <div class=\"timepicker-dial__time\">\n            <ngx-mat-timepicker-dial-control [timeList]=\"hours\"\n                                         [time]=\"hour\"\n                                         [timeUnit]=\"timeUnit.HOUR\"\n                                         [isActive]=\"activeTimeUnit === timeUnit.HOUR\"\n                                         [isEditable]=\"isEditable\"\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\n                                         (timeChanged)=\"changeHour($event)\"\n                                         (focused)=\"showHint()\"\n                                         (unfocused)=\"hideHint()\">\n\n            </ngx-mat-timepicker-dial-control>\n            <span>:</span>\n            <ngx-mat-timepicker-dial-control [timeList]=\"minutes\"\n                                         [time]=\"minute\"\n                                         [timeUnit]=\"timeUnit.MINUTE\"\n                                         [isActive]=\"activeTimeUnit === timeUnit.MINUTE\"\n                                         [isEditable]=\"isEditable\"\n                                         [minutesGap]=\"minutesGap\"\n                                         [disabled]=\"hoursOnly\"\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\n                                         (timeChanged)=\"changeMinute($event)\"\n                                         (focused)=\"showHint()\"\n                                         (unfocused)=\"hideHint()\">\n\n            </ngx-mat-timepicker-dial-control>\n        </div>\n        <ngx-mat-timepicker-period class=\"timepicker-dial__period\"\n                                   *ngIf=\"format !== 24\"\n                                   [selectedPeriod]=\"period\"\n                                   [activeTimeUnit]=\"activeTimeUnit\"\n                                   [maxTime]=\"maxTime\"\n                                   [minTime]=\"minTime\"\n                                   [format]=\"format\"\n                                   [hours]=\"hours\"\n                                   [minutes]=\"minutes\"\n                                   [selectedHour]=\"hour\"\n                                   [meridiems]=\"meridiems\"\n                                   (periodChanged)=\"changePeriod($event)\"></ngx-mat-timepicker-period>\n    </div>\n    <div *ngIf=\"isEditable || editableHintTmpl\"\n         [ngClass]=\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\">\n        <ng-container *ngTemplateOutlet=\"editableHintTmpl ? editableHintTmpl : editableHintDefault\"></ng-container>\n        <ng-template #editableHintDefault>\n            <small class=\"timepicker-dial__hint\"> * use arrows (<span>&#8645;</span>) to change the time</small>\n        </ng-template>\n    </div>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".timepicker-dial{text-align:center}.timepicker-dial__container{display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:transparent}.timepicker-dial__time{display:flex;align-items:baseline;line-height:normal;font-size:50px}.timepicker-dial__period{display:block;margin-left:10px}.timepicker-dial__hint-container--hidden{visibility:hidden}.timepicker-dial__hint{display:inline-block;font-size:10px}.timepicker-dial__hint span{font-size:14px}"]
                }] }
    ];
    /** @nocollapse */
    NgxMatTimepickerDialComponent.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_LOCALE,] }] }
    ]; };
    NgxMatTimepickerDialComponent.propDecorators = {
        activeTimeUnit: [{ type: Input }],
        color: [{ type: Input }],
        editableHintTmpl: [{ type: Input }],
        format: [{ type: Input }],
        hour: [{ type: Input }],
        hourChanged: [{ type: Output }],
        hoursOnly: [{ type: Input }],
        isEditable: [{ type: Input }],
        maxTime: [{ type: Input }],
        minTime: [{ type: Input }],
        minute: [{ type: Input }],
        minuteChanged: [{ type: Output }],
        minutesGap: [{ type: Input }],
        period: [{ type: Input }],
        periodChanged: [{ type: Output }],
        timeUnitChanged: [{ type: Output }]
    };
    return NgxMatTimepickerDialComponent;
}());
export { NgxMatTimepickerDialComponent };
if (false) {
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.activeTimeUnit;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.editableHintTmpl;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.format;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.hour;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.hourChanged;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.hours;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.hoursOnly;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.isEditable;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.isHintVisible;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.maxTime;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.meridiems;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.minTime;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.minute;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.minuteChanged;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.minutes;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.minutesGap;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.period;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.periodChanged;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.timeUnit;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.timeUnitChanged;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDialComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDialComponent.prototype._locale;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWRpYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hdC10aW1lcGlja2VyLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmd4LW1hdC10aW1lcGlja2VyLWRpYWwvbmd4LW1hdC10aW1lcGlja2VyLWRpYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEVBRUwsTUFBTSxFQUVOLFdBQVcsRUFDZCxNQUFNLGVBQWUsQ0FBQzs7QUFHdkIsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sOENBQThDLENBQUM7QUFDckYsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sNENBQTRDLENBQUM7QUFFakYsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sbURBQW1ELENBQUM7QUFDNUYsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sc0NBQXNDLENBQUM7O0FBRTNFLE9BQU8sRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBRXhDO0lBNkNJLHVDQUF1RCxPQUFlO1FBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQXZCNUQsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBNkIsQ0FBQztRQVF0RSxjQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQztRQUd6QyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUE2QixDQUFDO1FBSzlELGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQTJCLENBQUM7UUFFdEUsYUFBUSxHQUFHLHFCQUFxQixDQUFDO1FBQ3ZCLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQXlCLENBQUM7UUFFOUQsV0FBTSxHQUFpQixTQUFTLENBQUM7SUFHekMsQ0FB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K0ZDO1NBekZZLDZCQUE2Qjs7O0lBRXRDLHVEQUErQzs7SUFXL0MseURBQTZDOztJQUM3QywrQ0FBd0I7O0lBQ3hCLDZDQUErQjs7SUFDL0Isb0RBQXNFOztJQUV0RSw4Q0FBbUM7O0lBQ25DLGtEQUE0Qjs7SUFDNUIsbURBQTZCOztJQUU3QixzREFBdUI7O0lBQ3ZCLGdEQUEyQjs7SUFDM0Isa0RBQW1EOztJQUNuRCxnREFBMkI7O0lBQzNCLCtDQUFpQzs7SUFDakMsc0RBQXdFOztJQUN4RSxnREFBcUM7O0lBQ3JDLG1EQUE0Qjs7SUFDNUIsK0NBQXlDOztJQUV6QyxzREFBc0U7O0lBRXRFLGlEQUFpQzs7SUFDakMsd0RBQXNFOzs7OztJQUV0RSwrQ0FBeUM7Ozs7O0lBRTdCLGdEQUEwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIE91dHB1dCxcbiAgICBTaW1wbGVDaGFuZ2VzLFxuICAgIFRlbXBsYXRlUmVmXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge1RoZW1lUGFsZXR0ZX0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL2NvcmVcIjtcbi8vXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJQZXJpb2RzfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci1wZXJpb2RzLmVudW1cIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclVuaXRzfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci11bml0cy5lbnVtXCI7XG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2V9IGZyb20gXCIuLi8uLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLWNsb2NrLWZhY2UuaW50ZXJmYWNlXCI7XG5pbXBvcnQge05HWF9NQVRfVElNRVBJQ0tFUl9MT0NBTEV9IGZyb20gXCIuLi8uLi90b2tlbnMvbmd4LW1hdC10aW1lcGlja2VyLXRpbWUtbG9jYWxlLnRva2VuXCI7XG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJVdGlsc30gZnJvbSBcIi4uLy4uL3V0aWxzL25neC1tYXQtdGltZXBpY2tlci51dGlsc1wiO1xuLy9cbmltcG9ydCB7RGF0ZVRpbWUsIEluZm99IGZyb20gXCJ0cy1sdXhvblwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJuZ3gtbWF0LXRpbWVwaWNrZXItZGlhbFwiLFxuICAgIHRlbXBsYXRlVXJsOiBcIm5neC1tYXQtdGltZXBpY2tlci1kaWFsLmNvbXBvbmVudC5odG1sXCIsXG4gICAgc3R5bGVVcmxzOiBbXCJuZ3gtbWF0LXRpbWVwaWNrZXItZGlhbC5jb21wb25lbnQuc2Nzc1wiXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hNYXRUaW1lcGlja2VyRGlhbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgICBASW5wdXQoKSBhY3RpdmVUaW1lVW5pdDogTmd4TWF0VGltZXBpY2tlclVuaXRzO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgY29sb3IobmV3VmFsdWU6IFRoZW1lUGFsZXR0ZSkge1xuICAgICAgICB0aGlzLl9jb2xvciA9IG5ld1ZhbHVlO1xuICAgIH1cblxuICAgIGdldCBjb2xvcigpOiBUaGVtZVBhbGV0dGUge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sb3I7XG4gICAgfVxuXG4gICAgQElucHV0KCkgZWRpdGFibGVIaW50VG1wbDogVGVtcGxhdGVSZWY8Tm9kZT47XG4gICAgQElucHV0KCkgZm9ybWF0OiBudW1iZXI7XG4gICAgQElucHV0KCkgaG91cjogbnVtYmVyIHwgc3RyaW5nO1xuICAgIEBPdXRwdXQoKSBob3VyQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8Tmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZT4oKTtcblxuICAgIGhvdXJzOiBOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlW107XG4gICAgQElucHV0KCkgaG91cnNPbmx5OiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGlzRWRpdGFibGU6IGJvb2xlYW47XG5cbiAgICBpc0hpbnRWaXNpYmxlOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIG1heFRpbWU6IERhdGVUaW1lO1xuICAgIG1lcmlkaWVtcyA9IEluZm8ubWVyaWRpZW1zKHtsb2NhbGU6IHRoaXMuX2xvY2FsZX0pO1xuICAgIEBJbnB1dCgpIG1pblRpbWU6IERhdGVUaW1lO1xuICAgIEBJbnB1dCgpIG1pbnV0ZTogbnVtYmVyIHwgc3RyaW5nO1xuICAgIEBPdXRwdXQoKSBtaW51dGVDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlPigpO1xuICAgIG1pbnV0ZXM6IE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2VbXTtcbiAgICBASW5wdXQoKSBtaW51dGVzR2FwOiBudW1iZXI7XG4gICAgQElucHV0KCkgcGVyaW9kOiBOZ3hNYXRUaW1lcGlja2VyUGVyaW9kcztcblxuICAgIEBPdXRwdXQoKSBwZXJpb2RDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxOZ3hNYXRUaW1lcGlja2VyUGVyaW9kcz4oKTtcblxuICAgIHRpbWVVbml0ID0gTmd4TWF0VGltZXBpY2tlclVuaXRzO1xuICAgIEBPdXRwdXQoKSB0aW1lVW5pdENoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPE5neE1hdFRpbWVwaWNrZXJVbml0cz4oKTtcblxuICAgIHByaXZhdGUgX2NvbG9yOiBUaGVtZVBhbGV0dGUgPSBcInByaW1hcnlcIjtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoTkdYX01BVF9USU1FUElDS0VSX0xPQ0FMRSkgcHJpdmF0ZSBfbG9jYWxlOiBzdHJpbmcpIHtcbiAgICB9XG5cbiAgICBjaGFuZ2VIb3VyKGhvdXI6IE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2UpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ob3VyQ2hhbmdlZC5uZXh0KGhvdXIpO1xuICAgIH1cblxuICAgIGNoYW5nZU1pbnV0ZShtaW51dGU6IE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2UpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5taW51dGVDaGFuZ2VkLm5leHQobWludXRlKTtcbiAgICB9XG5cbiAgICBjaGFuZ2VQZXJpb2QocGVyaW9kOiBOZ3hNYXRUaW1lcGlja2VyUGVyaW9kcyk6IHZvaWQge1xuICAgICAgICB0aGlzLnBlcmlvZENoYW5nZWQubmV4dChwZXJpb2QpO1xuICAgIH1cblxuICAgIGNoYW5nZVRpbWVVbml0KHVuaXQ6IE5neE1hdFRpbWVwaWNrZXJVbml0cyk6IHZvaWQge1xuICAgICAgICB0aGlzLnRpbWVVbml0Q2hhbmdlZC5uZXh0KHVuaXQpO1xuICAgIH1cblxuICAgIGhpZGVIaW50KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmlzSGludFZpc2libGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGNvbnN0IHBlcmlvZENoYW5nZWQgPSBjaGFuZ2VzLnBlcmlvZCAmJiBjaGFuZ2VzLnBlcmlvZC5jdXJyZW50VmFsdWU7XG4gICAgICAgIGlmIChwZXJpb2RDaGFuZ2VkIHx8IGNoYW5nZXMuZm9ybWF0ICYmIGNoYW5nZXMuZm9ybWF0LmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgaG91cnMgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZ2V0SG91cnModGhpcy5mb3JtYXQpO1xuXG4gICAgICAgICAgICB0aGlzLmhvdXJzID0gTmd4TWF0VGltZXBpY2tlclV0aWxzLmRpc2FibGVIb3Vycyhob3Vycywge1xuICAgICAgICAgICAgICAgIG1pbjogdGhpcy5taW5UaW1lLFxuICAgICAgICAgICAgICAgIG1heDogdGhpcy5tYXhUaW1lLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogdGhpcy5mb3JtYXQsXG4gICAgICAgICAgICAgICAgcGVyaW9kOiB0aGlzLnBlcmlvZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBlcmlvZENoYW5nZWQgfHwgY2hhbmdlcy5ob3VyICYmIGNoYW5nZXMuaG91ci5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pbnV0ZXMgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZ2V0TWludXRlcyh0aGlzLm1pbnV0ZXNHYXApO1xuXG4gICAgICAgICAgICB0aGlzLm1pbnV0ZXMgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZGlzYWJsZU1pbnV0ZXMobWludXRlcywgK3RoaXMuaG91ciwge1xuICAgICAgICAgICAgICAgIG1pbjogdGhpcy5taW5UaW1lLFxuICAgICAgICAgICAgICAgIG1heDogdGhpcy5tYXhUaW1lLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogdGhpcy5mb3JtYXQsXG4gICAgICAgICAgICAgICAgcGVyaW9kOiB0aGlzLnBlcmlvZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93SGludCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pc0hpbnRWaXNpYmxlID0gdHJ1ZTtcbiAgICB9XG59XG4iXX0=
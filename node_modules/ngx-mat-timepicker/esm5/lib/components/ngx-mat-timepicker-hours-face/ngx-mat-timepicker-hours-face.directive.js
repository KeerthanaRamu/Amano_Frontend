/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, Input, Output } from "@angular/core";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
//
import { DateTime } from "ts-luxon";
var NgxMatTimepickerHoursFaceDirective = /** @class */ (function () {
    function NgxMatTimepickerHoursFaceDirective() {
        this.hourChange = new EventEmitter();
        this.hourSelected = new EventEmitter();
        this.hoursList = [];
        this._color = "primary";
        this._format = 24;
    }
    Object.defineProperty(NgxMatTimepickerHoursFaceDirective.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this._color;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._color = newValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerHoursFaceDirective.prototype, "format", {
        get: /**
         * @return {?}
         */
        function () {
            return this._format;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._format = newValue;
            this.hoursList = NgxMatTimepickerUtils.getHours(this._format);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @param {?} time
     * @return {?}
     */
    NgxMatTimepickerHoursFaceDirective.prototype.onTimeSelected = /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this.hourSelected.next(time);
    };
    NgxMatTimepickerHoursFaceDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[ngxMatTimepickerHoursFace]"
                },] }
    ];
    /** @nocollapse */
    NgxMatTimepickerHoursFaceDirective.ctorParameters = function () { return []; };
    NgxMatTimepickerHoursFaceDirective.propDecorators = {
        color: [{ type: Input }],
        format: [{ type: Input }],
        hourChange: [{ type: Output }],
        hourSelected: [{ type: Output }],
        maxTime: [{ type: Input }],
        minTime: [{ type: Input }],
        selectedHour: [{ type: Input }]
    };
    return NgxMatTimepickerHoursFaceDirective;
}());
export { NgxMatTimepickerHoursFaceDirective };
if (false) {
    /** @type {?} */
    NgxMatTimepickerHoursFaceDirective.prototype.hourChange;
    /** @type {?} */
    NgxMatTimepickerHoursFaceDirective.prototype.hourSelected;
    /** @type {?} */
    NgxMatTimepickerHoursFaceDirective.prototype.hoursList;
    /** @type {?} */
    NgxMatTimepickerHoursFaceDirective.prototype.maxTime;
    /** @type {?} */
    NgxMatTimepickerHoursFaceDirective.prototype.minTime;
    /** @type {?} */
    NgxMatTimepickerHoursFaceDirective.prototype.selectedHour;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerHoursFaceDirective.prototype._color;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerHoursFaceDirective.prototype._format;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWhvdXJzLWZhY2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hdC10aW1lcGlja2VyLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmd4LW1hdC10aW1lcGlja2VyLWhvdXJzLWZhY2Uvbmd4LW1hdC10aW1lcGlja2VyLWhvdXJzLWZhY2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFZLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUkvRSxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQzs7QUFFM0UsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUVsQztJQW1DSTtRQVhVLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBNkIsQ0FBQztRQUMzRCxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFcEQsY0FBUyxHQUFnQyxFQUFFLENBQUM7UUFLbEMsV0FBTSxHQUFpQixTQUFTLENBQUM7UUFDakMsWUFBTyxHQUFZLEVBQUUsQ0FBQztJQUdoQyxDQUFDO0lBL0JELHNCQUNJLHFEQUFLOzs7O1FBSVQ7WUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdkIsQ0FBQzs7Ozs7UUFQRCxVQUNVLFFBQXNCO1lBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO1FBQzNCLENBQUM7OztPQUFBO0lBTUQsc0JBQ0ksc0RBQU07Ozs7UUFLVjtZQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN4QixDQUFDOzs7OztRQVJELFVBQ1csUUFBaUI7WUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7WUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xFLENBQUM7OztPQUFBOzs7OztJQW9CRCwyREFBYzs7OztJQUFkLFVBQWUsSUFBWTtRQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDOztnQkF4Q0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSw2QkFBNkI7aUJBQzFDOzs7Ozt3QkFHSSxLQUFLO3lCQVNMLEtBQUs7NkJBVUwsTUFBTTsrQkFDTixNQUFNOzBCQUdOLEtBQUs7MEJBQ0wsS0FBSzsrQkFDTCxLQUFLOztJQVdWLHlDQUFDO0NBQUEsQUF6Q0QsSUF5Q0M7U0F0Q1ksa0NBQWtDOzs7SUFxQjNDLHdEQUFxRTs7SUFDckUsMERBQW9EOztJQUVwRCx1REFBNEM7O0lBQzVDLHFEQUEyQjs7SUFDM0IscURBQTJCOztJQUMzQiwwREFBaUQ7Ozs7O0lBRWpELG9EQUEyQzs7Ozs7SUFDM0MscURBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXR9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge1RoZW1lUGFsZXR0ZX0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL2NvcmVcIjtcbi8vXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2V9IGZyb20gXCIuLi8uLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLWNsb2NrLWZhY2UuaW50ZXJmYWNlXCI7XG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJVdGlsc30gZnJvbSBcIi4uLy4uL3V0aWxzL25neC1tYXQtdGltZXBpY2tlci51dGlsc1wiO1xuLy9cbmltcG9ydCB7RGF0ZVRpbWV9IGZyb20gXCJ0cy1sdXhvblwiO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogXCJbbmd4TWF0VGltZXBpY2tlckhvdXJzRmFjZV1cIlxufSlcbmV4cG9ydCBjbGFzcyBOZ3hNYXRUaW1lcGlja2VySG91cnNGYWNlRGlyZWN0aXZlIHtcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IGNvbG9yKG5ld1ZhbHVlOiBUaGVtZVBhbGV0dGUpIHtcbiAgICAgICAgdGhpcy5fY29sb3IgPSBuZXdWYWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgY29sb3IoKTogVGhlbWVQYWxldHRlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IGZvcm1hdChuZXdWYWx1ZTogMTIgfCAyNCkge1xuICAgICAgICB0aGlzLl9mb3JtYXQgPSBuZXdWYWx1ZTtcbiAgICAgICAgdGhpcy5ob3Vyc0xpc3QgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZ2V0SG91cnModGhpcy5fZm9ybWF0KTtcbiAgICB9XG5cbiAgICBnZXQgZm9ybWF0KCk6IDEyIHwgMjQge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0O1xuICAgIH1cblxuICAgIEBPdXRwdXQoKSBob3VyQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlPigpO1xuICAgIEBPdXRwdXQoKSBob3VyU2VsZWN0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcblxuICAgIGhvdXJzTGlzdDogTmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZVtdID0gW107XG4gICAgQElucHV0KCkgbWF4VGltZTogRGF0ZVRpbWU7XG4gICAgQElucHV0KCkgbWluVGltZTogRGF0ZVRpbWU7XG4gICAgQElucHV0KCkgc2VsZWN0ZWRIb3VyOiBOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlO1xuXG4gICAgcHJvdGVjdGVkIF9jb2xvcjogVGhlbWVQYWxldHRlID0gXCJwcmltYXJ5XCI7XG4gICAgcHJvdGVjdGVkIF9mb3JtYXQ6IDEyIHwgMjQgPSAyNDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cblxuICAgIG9uVGltZVNlbGVjdGVkKHRpbWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmhvdXJTZWxlY3RlZC5uZXh0KHRpbWUpO1xuICAgIH1cbn1cbiJdfQ==
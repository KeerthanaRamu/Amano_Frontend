/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from "@angular/core";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerPeriods } from "../../models/ngx-mat-timepicker-periods.enum";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
//
import { DateTime } from "ts-luxon";
var NgxMatTimepickerMinutesFaceComponent = /** @class */ (function () {
    function NgxMatTimepickerMinutesFaceComponent() {
        this.minuteChange = new EventEmitter();
        this.minutesList = [];
        this.timeUnit = NgxMatTimepickerUnits;
        this._color = "primary";
    }
    Object.defineProperty(NgxMatTimepickerMinutesFaceComponent.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this._color;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._color = newValue;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxMatTimepickerMinutesFaceComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.period && changes.period.currentValue) {
            /** @type {?} */
            var minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);
            this.minutesList = NgxMatTimepickerUtils.disableMinutes(minutes, this.selectedHour, {
                min: this.minTime,
                max: this.maxTime,
                format: this.format,
                period: this.period
            });
        }
    };
    NgxMatTimepickerMinutesFaceComponent.decorators = [
        { type: Component, args: [{
                    selector: "ngx-mat-timepicker-minutes-face",
                    template: "<ngx-mat-timepicker-face [color]=\"color\"\n                     [faceTime]=\"minutesList\"\n                     [selectedTime]=\"selectedMinute\"\n                     [minutesGap]=\"minutesGap\"\n                     (timeChange)=\"minuteChange.next($event)\"\n                     [unit]=\"timeUnit.MINUTE\"></ngx-mat-timepicker-face>\n"
                }] }
    ];
    /** @nocollapse */
    NgxMatTimepickerMinutesFaceComponent.ctorParameters = function () { return []; };
    NgxMatTimepickerMinutesFaceComponent.propDecorators = {
        color: [{ type: Input }],
        format: [{ type: Input }],
        maxTime: [{ type: Input }],
        minTime: [{ type: Input }],
        minuteChange: [{ type: Output }],
        minutesGap: [{ type: Input }],
        period: [{ type: Input }],
        selectedHour: [{ type: Input }],
        selectedMinute: [{ type: Input }]
    };
    return NgxMatTimepickerMinutesFaceComponent;
}());
export { NgxMatTimepickerMinutesFaceComponent };
if (false) {
    /** @type {?} */
    NgxMatTimepickerMinutesFaceComponent.prototype.format;
    /** @type {?} */
    NgxMatTimepickerMinutesFaceComponent.prototype.maxTime;
    /** @type {?} */
    NgxMatTimepickerMinutesFaceComponent.prototype.minTime;
    /** @type {?} */
    NgxMatTimepickerMinutesFaceComponent.prototype.minuteChange;
    /** @type {?} */
    NgxMatTimepickerMinutesFaceComponent.prototype.minutesGap;
    /** @type {?} */
    NgxMatTimepickerMinutesFaceComponent.prototype.minutesList;
    /** @type {?} */
    NgxMatTimepickerMinutesFaceComponent.prototype.period;
    /** @type {?} */
    NgxMatTimepickerMinutesFaceComponent.prototype.selectedHour;
    /** @type {?} */
    NgxMatTimepickerMinutesFaceComponent.prototype.selectedMinute;
    /** @type {?} */
    NgxMatTimepickerMinutesFaceComponent.prototype.timeUnit;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerMinutesFaceComponent.prototype._color;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLW1pbnV0ZXMtZmFjZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWF0LXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uZ3gtbWF0LXRpbWVwaWNrZXItbWludXRlcy1mYWNlL25neC1tYXQtdGltZXBpY2tlci1taW51dGVzLWZhY2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFJL0YsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sNENBQTRDLENBQUM7QUFDakYsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sOENBQThDLENBQUM7QUFDckYsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sc0NBQXNDLENBQUM7O0FBRTNFLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFbEM7SUErQkk7UUFaVSxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUE2QixDQUFDO1FBR3ZFLGdCQUFXLEdBQWdDLEVBQUUsQ0FBQztRQUs5QyxhQUFRLEdBQUcscUJBQXFCLENBQUM7UUFFekIsV0FBTSxHQUFpQixTQUFTLENBQUM7SUFHekMsQ0FBQztJQTFCRCxzQkFDSSx1REFBSzs7OztRQUlUO1lBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLENBQUM7Ozs7O1FBUEQsVUFDVSxRQUFzQjtZQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQztRQUMzQixDQUFDOzs7T0FBQTs7Ozs7SUF5QkQsMERBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQzlCLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRTs7Z0JBQ3pDLE9BQU8sR0FBRyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUNqRSxJQUFJLENBQUMsV0FBVyxHQUFHLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDaEYsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPO2dCQUNqQixHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU87Z0JBQ2pCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFDbkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO2FBQ3RCLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7Z0JBNUNKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsaUNBQWlDO29CQUMzQyxnV0FBK0Q7aUJBQ2xFOzs7Ozt3QkFHSSxLQUFLO3lCQVNMLEtBQUs7MEJBQ0wsS0FBSzswQkFDTCxLQUFLOytCQUVMLE1BQU07NkJBQ04sS0FBSzt5QkFHTCxLQUFLOytCQUNMLEtBQUs7aUNBRUwsS0FBSzs7SUFtQlYsMkNBQUM7Q0FBQSxBQTdDRCxJQTZDQztTQXpDWSxvQ0FBb0M7OztJQVc3QyxzREFBd0I7O0lBQ3hCLHVEQUEyQjs7SUFDM0IsdURBQTJCOztJQUUzQiw0REFBdUU7O0lBQ3ZFLDBEQUE0Qjs7SUFFNUIsMkRBQThDOztJQUM5QyxzREFBeUM7O0lBQ3pDLDREQUE4Qjs7SUFFOUIsOERBQW1EOztJQUNuRCx3REFBaUM7Ozs7O0lBRWpDLHNEQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgU2ltcGxlQ2hhbmdlc30gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7VGhlbWVQYWxldHRlfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvY29yZVwiO1xuLy9cbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZX0gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItY2xvY2stZmFjZS5pbnRlcmZhY2VcIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclVuaXRzfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci11bml0cy5lbnVtXCI7XG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJQZXJpb2RzfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci1wZXJpb2RzLmVudW1cIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclV0aWxzfSBmcm9tIFwiLi4vLi4vdXRpbHMvbmd4LW1hdC10aW1lcGlja2VyLnV0aWxzXCI7XG4vL1xuaW1wb3J0IHtEYXRlVGltZX0gZnJvbSBcInRzLWx1eG9uXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcIm5neC1tYXQtdGltZXBpY2tlci1taW51dGVzLWZhY2VcIixcbiAgICB0ZW1wbGF0ZVVybDogXCIuL25neC1tYXQtdGltZXBpY2tlci1taW51dGVzLWZhY2UuY29tcG9uZW50Lmh0bWxcIlxufSlcbmV4cG9ydCBjbGFzcyBOZ3hNYXRUaW1lcGlja2VyTWludXRlc0ZhY2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgY29sb3IobmV3VmFsdWU6IFRoZW1lUGFsZXR0ZSkge1xuICAgICAgICB0aGlzLl9jb2xvciA9IG5ld1ZhbHVlO1xuICAgIH1cblxuICAgIGdldCBjb2xvcigpOiBUaGVtZVBhbGV0dGUge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sb3I7XG4gICAgfVxuXG4gICAgQElucHV0KCkgZm9ybWF0OiBudW1iZXI7XG4gICAgQElucHV0KCkgbWF4VGltZTogRGF0ZVRpbWU7XG4gICAgQElucHV0KCkgbWluVGltZTogRGF0ZVRpbWU7XG5cbiAgICBAT3V0cHV0KCkgbWludXRlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlPigpO1xuICAgIEBJbnB1dCgpIG1pbnV0ZXNHYXA6IG51bWJlcjtcblxuICAgIG1pbnV0ZXNMaXN0OiBOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlW10gPSBbXTtcbiAgICBASW5wdXQoKSBwZXJpb2Q6IE5neE1hdFRpbWVwaWNrZXJQZXJpb2RzO1xuICAgIEBJbnB1dCgpIHNlbGVjdGVkSG91cjogbnVtYmVyO1xuXG4gICAgQElucHV0KCkgc2VsZWN0ZWRNaW51dGU6IE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2U7XG4gICAgdGltZVVuaXQgPSBOZ3hNYXRUaW1lcGlja2VyVW5pdHM7XG5cbiAgICBwcml2YXRlIF9jb2xvcjogVGhlbWVQYWxldHRlID0gXCJwcmltYXJ5XCI7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzLnBlcmlvZCAmJiBjaGFuZ2VzLnBlcmlvZC5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pbnV0ZXMgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZ2V0TWludXRlcyh0aGlzLm1pbnV0ZXNHYXApO1xuICAgICAgICAgICAgdGhpcy5taW51dGVzTGlzdCA9IE5neE1hdFRpbWVwaWNrZXJVdGlscy5kaXNhYmxlTWludXRlcyhtaW51dGVzLCB0aGlzLnNlbGVjdGVkSG91ciwge1xuICAgICAgICAgICAgICAgIG1pbjogdGhpcy5taW5UaW1lLFxuICAgICAgICAgICAgICAgIG1heDogdGhpcy5tYXhUaW1lLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogdGhpcy5mb3JtYXQsXG4gICAgICAgICAgICAgICAgcGVyaW9kOiB0aGlzLnBlcmlvZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiJdfQ==
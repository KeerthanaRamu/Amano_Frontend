/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-face/ngx-mat-timepicker-face.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild } from "@angular/core";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
/**
 * @param {?} angle
 * @param {?} step
 * @return {?}
 */
function roundAngle(angle, step) {
    return Math.round(angle / step) * step;
}
/**
 * @param {?} x0
 * @param {?} y0
 * @param {?} x
 * @param {?} y
 * @param {?} currentAngle
 * @return {?}
 */
function countAngleByCords(x0, y0, x, y, currentAngle) {
    if (y > y0 && x >= x0) { // II quarter
        return 180 - currentAngle;
    }
    else if (y > y0 && x < x0) { // III quarter
        return 180 + currentAngle;
    }
    else if (y < y0 && x < x0) { // IV quarter
        return 360 - currentAngle;
    }
    else { // I quarter
        return currentAngle;
    }
}
/** @type {?} */
var CLOCK_HAND_STYLES = {
    small: {
        height: "75px",
        top: "calc(50% - 75px)"
    },
    large: {
        height: "103px",
        top: "calc(50% - 103px)"
    }
};
var NgxMatTimepickerFaceComponent = /** @class */ (function () {
    function NgxMatTimepickerFaceComponent() {
        this.color = "primary";
        this.innerClockFaceSize = 85;
        this.timeChange = new EventEmitter();
        this.timeSelected = new EventEmitter();
        this.timeUnit = NgxMatTimepickerUnits;
    }
    /**
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._setClockHandPosition();
        this._addTouchEvents();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var faceTimeChanges = changes.faceTime;
        /** @type {?} */
        var selectedTimeChanges = changes.selectedTime;
        if ((faceTimeChanges && faceTimeChanges.currentValue)
            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {
            /* Set time according to passed an input value */
            this.selectedTime = this.faceTime.find((/**
             * @param {?} time
             * @return {?}
             */
            function (time) { return time.time === _this.selectedTime.time; }));
        }
        if (selectedTimeChanges && selectedTimeChanges.currentValue) {
            this._setClockHandPosition();
        }
        if (faceTimeChanges && faceTimeChanges.currentValue) {
            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError
            setTimeout((/**
             * @return {?}
             */
            function () { return _this._selectAvailableTime(); }));
        }
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._removeTouchEvents();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype.onMousedown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.preventDefault();
        this._isStarted = true;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype.onMouseup = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.preventDefault();
        this._isStarted = false;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype.selectTime = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this._isStarted && (e instanceof MouseEvent && e.type !== "click")) {
            return;
        }
        /** @type {?} */
        var clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();
        /* Get x0 and y0 of the circle */
        /** @type {?} */
        var centerX = clockFaceCords.left + clockFaceCords.width / 2;
        /** @type {?} */
        var centerY = clockFaceCords.top + clockFaceCords.height / 2;
        /* Counting the arctangent and convert it to from radian to deg */
        /** @type {?} */
        var arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;
        /* Get angle according to quadrant */
        /** @type {?} */
        var circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);
        /* Check if selected time from the inner clock face (24 hours format only) */
        /** @type {?} */
        var isInnerClockChosen = this.format && this._isInnerClockFace(centerX, centerY, e.clientX, e.clientY);
        /* Round angle according to angle step */
        /** @type {?} */
        var angleStep = this.unit === NgxMatTimepickerUnits.MINUTE ? (6 * (this.minutesGap || 1)) : 30;
        /** @type {?} */
        var roundedAngle = roundAngle(circleAngle, angleStep);
        /** @type {?} */
        var angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);
        /** @type {?} */
        var selectedTime = this.faceTime.find((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return val.angle === angle; }));
        if (selectedTime && !selectedTime.disabled) {
            this.timeChange.next(selectedTime);
            /* To let know whether user ended interaction with clock face */
            if (!this._isStarted) {
                this.timeSelected.next(selectedTime.time);
            }
        }
    };
    /**
     * @param {?} _item_
     * @param {?} time
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype.trackByTime = /**
     * @param {?} _item_
     * @param {?} time
     * @return {?}
     */
    function (_item_, time) {
        return time.time;
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype._addTouchEvents = /**
     * @private
     * @return {?}
     */
    function () {
        this._touchStartHandler = this.onMousedown.bind(this);
        this._touchEndHandler = this.onMouseup.bind(this);
        this.clockFace.nativeElement.addEventListener("touchstart", this._touchStartHandler);
        this.clockFace.nativeElement.addEventListener("touchend", this._touchEndHandler);
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype._decreaseClockHand = /**
     * @private
     * @return {?}
     */
    function () {
        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;
        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype._increaseClockHand = /**
     * @private
     * @return {?}
     */
    function () {
        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;
        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;
    };
    /**
     * @private
     * @param {?} x0
     * @param {?} y0
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype._isInnerClockFace = /**
     * @private
     * @param {?} x0
     * @param {?} y0
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function (x0, y0, x, y) {
        /* Detect whether time from the inner clock face or not (24 format only) */
        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype._removeTouchEvents = /**
     * @private
     * @return {?}
     */
    function () {
        this.clockFace.nativeElement.removeEventListener("touchstart", this._touchStartHandler);
        this.clockFace.nativeElement.removeEventListener("touchend", this._touchEndHandler);
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype._selectAvailableTime = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var currentTime = this.faceTime.find((/**
         * @param {?} time
         * @return {?}
         */
        function (time) { return _this.selectedTime.time === time.time; }));
        this.isClockFaceDisabled = this.faceTime.every((/**
         * @param {?} time
         * @return {?}
         */
        function (time) { return time.disabled; }));
        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {
            /** @type {?} */
            var availableTime = this.faceTime.find((/**
             * @param {?} time
             * @return {?}
             */
            function (time) { return !time.disabled; }));
            this.timeChange.next(availableTime);
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerFaceComponent.prototype._setClockHandPosition = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.format === 24) {
            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {
                this._decreaseClockHand();
            }
            else {
                this._increaseClockHand();
            }
        }
        this.clockHand.nativeElement.style.transform = "rotate(" + this.selectedTime.angle + "deg)";
    };
    NgxMatTimepickerFaceComponent.decorators = [
        { type: Component, args: [{
                    selector: "ngx-mat-timepicker-face",
                    template: "<ng-template #hourButton\n             let-time>\n    <button mat-mini-fab\n            class=\"mat-elevation-z0\"\n            [color]=\"(time.time | activeHour: selectedTime?.time : isClockFaceDisabled) ? color : undefined\"\n            [ngStyle]=\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\"\n            [disabled]=\"time.disabled\">\n        {{time.time | timeLocalizer: timeUnit.HOUR}}\n    </button>\n</ng-template>\n<div class=\"clock-face\"\n     #clockFace>\n    <div *ngIf=\"unit !== timeUnit.MINUTE;else minutesFace\"\n         class=\"clock-face__container\">\n        <div class=\"clock-face__number clock-face__number--outer\"\n             [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\n             *ngFor=\"let time of faceTime | slice: 0 : 12; trackBy: trackByTime\">\n            <ng-content *ngTemplateOutlet=\"hourButton; context: {$implicit: time}\"></ng-content>\n        </div>\n        <div class=\"clock-face__inner\"\n             *ngIf=\"faceTime.length > 12\">\n            <div class=\"clock-face__number clock-face__number--inner\"\n                 [style.top]=\"'calc(50% - ' + innerClockFaceSize + 'px)'\"\n                 [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\n                 [style.height.px]=\"innerClockFaceSize\"\n                 *ngFor=\"let time of faceTime | slice: 12 : 24; trackBy: trackByTime\">\n                <ng-content *ngTemplateOutlet=\"hourButton; context: {$implicit: time}\"></ng-content>\n            </div>\n        </div>\n    </div>\n    <mat-toolbar class=\"clock-face__clock-hand\"\n                 [color]=\"color\"\n                 [ngClass]=\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\"\n                 #clockHand\n                 [hidden]=\"isClockFaceDisabled\">\n        <button mat-mini-fab\n                *ngIf=\"unit === timeUnit.MINUTE\"\n                [color]=\"color\">\n            <span class=\"clock-face__clock-hand_minute_dot\"></span>\n        </button>\n    </mat-toolbar>\n    <mat-toolbar class=\"clock-face__center\"\n                 [color]=\"color\"></mat-toolbar>\n</div>\n<ng-template #minutesFace>\n    <div class=\"clock-face__container\">\n        <div class=\"clock-face__number clock-face__number--outer\"\n             [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\n             *ngFor=\"let time of faceTime; trackBy: trackByTime\">\n            <button mat-mini-fab\n                    class=\"mat-elevation-z0\"\n                    [disableRipple]=\"time.time % minutesGap !== 0\"\n                    [color]=\"(time.time | activeMinute: selectedTime?.time:minutesGap:isClockFaceDisabled) ? color : undefined\"\n                    [ngStyle]=\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\">\n                {{time.time | minutesFormatter: minutesGap | timeLocalizer: timeUnit.MINUTE}}\n            </button>\n        </div>\n    </div>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".clock-face{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;box-sizing:border-box;background-color:rgba(200,200,200,.5)!important}.clock-face__inner{position:absolute;top:0;left:0;width:100%;height:100%}.clock-face [mat-mini-fab]{box-shadow:none}.clock-face [mat-mini-fab]:not(.mat-primary):not(.mat-accent):not(.mat-warn){background:0 0}.clock-face__container{margin-left:-2px}.clock-face__number{position:absolute;transform-origin:25px 100%;width:50px;text-align:center;z-index:2;top:calc(50% - 125px);left:calc(50% - 25px)}.clock-face__number--outer{height:calc(290px / 2 - 20px)}.clock-face__number--outer>span{font-size:16px}.clock-face__number--inner>span{font-size:14px}.clock-face__clock-hand{height:103px;width:2px;padding:0;transform-origin:1px 100%;position:absolute;top:calc(50% - 103px);z-index:1}.clock-face__center{width:8px;height:8px;padding:0;position:absolute;border-radius:50%;top:50%;left:50%;margin:-4px}.clock-face__clock-hand_minute>button{position:absolute;top:-22px;left:calc(50% - 20px);box-sizing:content-box;display:flex;justify-content:center;align-items:center}.clock-face__clock-hand_minute>button .clock-face__clock-hand_minute_dot{display:block;width:4px;height:4px;background:#fff;border-radius:50%}@media (max-device-width:1023px) and (orientation:landscape){.clock-face{width:250px;height:250px}}@media screen and (max-width:360px){.clock-face{width:250px;height:250px}}"]
                }] }
    ];
    NgxMatTimepickerFaceComponent.propDecorators = {
        clockFace: [{ type: ViewChild, args: ["clockFace", { static: true },] }],
        clockHand: [{ type: ViewChild, args: ["clockHand", { static: true, read: ElementRef },] }],
        color: [{ type: Input }],
        faceTime: [{ type: Input }],
        format: [{ type: Input }],
        minutesGap: [{ type: Input }],
        selectedTime: [{ type: Input }],
        timeChange: [{ type: Output }],
        timeSelected: [{ type: Output }],
        unit: [{ type: Input }],
        onMousedown: [{ type: HostListener, args: ["mousedown", ["$event"],] }],
        onMouseup: [{ type: HostListener, args: ["mouseup", ["$event"],] }],
        selectTime: [{ type: HostListener, args: ["click", ["$event"],] }, { type: HostListener, args: ["touchmove", ["$event.changedTouches[0]"],] }, { type: HostListener, args: ["touchend", ["$event.changedTouches[0]"],] }, { type: HostListener, args: ["mousemove", ["$event"],] }]
    };
    return NgxMatTimepickerFaceComponent;
}());
export { NgxMatTimepickerFaceComponent };
if (false) {
    /** @type {?} */
    NgxMatTimepickerFaceComponent.prototype.clockFace;
    /** @type {?} */
    NgxMatTimepickerFaceComponent.prototype.clockHand;
    /** @type {?} */
    NgxMatTimepickerFaceComponent.prototype.color;
    /** @type {?} */
    NgxMatTimepickerFaceComponent.prototype.faceTime;
    /** @type {?} */
    NgxMatTimepickerFaceComponent.prototype.format;
    /** @type {?} */
    NgxMatTimepickerFaceComponent.prototype.innerClockFaceSize;
    /** @type {?} */
    NgxMatTimepickerFaceComponent.prototype.isClockFaceDisabled;
    /** @type {?} */
    NgxMatTimepickerFaceComponent.prototype.minutesGap;
    /** @type {?} */
    NgxMatTimepickerFaceComponent.prototype.selectedTime;
    /** @type {?} */
    NgxMatTimepickerFaceComponent.prototype.timeChange;
    /** @type {?} */
    NgxMatTimepickerFaceComponent.prototype.timeSelected;
    /** @type {?} */
    NgxMatTimepickerFaceComponent.prototype.timeUnit;
    /** @type {?} */
    NgxMatTimepickerFaceComponent.prototype.unit;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFaceComponent.prototype._isStarted;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFaceComponent.prototype._touchEndHandler;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFaceComponent.prototype._touchStartHandler;
}
//# sourceMappingURL=data:application/json;base64,
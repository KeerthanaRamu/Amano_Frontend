/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from "@angular/core";
//
import { NgxMatTimepickerUnits } from "../../../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerParserPipe } from "../../../pipes/ngx-mat-timepicker-parser.pipe";
import { NgxMatTimepickerUtils } from "../../../utils/ngx-mat-timepicker.utils";
/**
 * @param {?} currentTime
 * @param {?} nextTime
 * @return {?}
 */
function concatTime(currentTime, nextTime) {
    /** @type {?} */
    var isNumber = /\d/.test(nextTime);
    if (isNumber) {
        /** @type {?} */
        var time = currentTime + nextTime;
        return +time;
    }
}
var NgxMatTimepickerControlComponent = /** @class */ (function () {
    function NgxMatTimepickerControlComponent(_timeParser) {
        this._timeParser = _timeParser;
        this.id = NgxMatTimepickerControlComponent.nextId++;
        this.timeChanged = new EventEmitter();
        this._color = "primary";
        this._floatLabel = "never";
    }
    Object.defineProperty(NgxMatTimepickerControlComponent.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this._color;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._color = newValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerControlComponent.prototype, "floatLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._floatLabel;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._floatLabel = newValue;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype.changeTime = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        /** @type {?} */
        var char = String.fromCharCode(event.keyCode);
        /** @type {?} */
        var time = concatTime(String(this.time), char);
        this._changeTimeIfValid(time);
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype.decrease = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            /** @type {?} */
            var previousTime = +this.time - 1;
            if (previousTime < this.min) {
                previousTime = this.max;
            }
            if (this._isSelectedTimeDisabled(previousTime)) {
                previousTime = this._getAvailableTime(previousTime, this._getPrevAvailableTime.bind(this));
            }
            if (previousTime !== this.time) {
                this.timeChanged.emit(previousTime);
            }
        }
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype.increase = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            /** @type {?} */
            var nextTime = +this.time + 1;
            if (nextTime > this.max) {
                nextTime = this.min;
            }
            if (this._isSelectedTimeDisabled(nextTime)) {
                nextTime = this._getAvailableTime(nextTime, this._getNextAvailableTime.bind(this));
            }
            if (nextTime !== this.time) {
                this.timeChanged.emit(nextTime);
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.timeList && this.time != null) {
            if (this._isSelectedTimeDisabled(this.time)) {
                this._setAvailableTime();
            }
        }
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.isFocused = false;
        if (this._previousTime !== this.time) {
            this._changeTimeIfValid(+this.time);
        }
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        this.isFocused = true;
        this._previousTime = this.time;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype.onKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        if (!NgxMatTimepickerUtils.isDigit(event)) {
            event.preventDefault();
        }
        switch (event.key) {
            case "ArrowUp":
                this.increase();
                break;
            case "ArrowDown":
                this.decrease();
                break;
        }
        if (this.preventTyping && event.key !== "Tab") {
            event.preventDefault();
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype.onModelChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.time = +this._timeParser.transform(value, this.timeUnit);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype._changeTimeIfValid = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!isNaN(value)) {
            this.time = value;
            if (this.time > this.max) {
                /** @type {?} */
                var timeString = String(value);
                this.time = +timeString[timeString.length - 1];
            }
            if (this.time < this.min) {
                this.time = this.min;
            }
            this.timeChanged.emit(this.time);
        }
    };
    /**
     * @private
     * @param {?} currentTime
     * @param {?} fn
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype._getAvailableTime = /**
     * @private
     * @param {?} currentTime
     * @param {?} fn
     * @return {?}
     */
    function (currentTime, fn) {
        /** @type {?} */
        var currentTimeIndex = this.timeList.findIndex((/**
         * @param {?} time
         * @return {?}
         */
        function (time) { return time.time === currentTime; }));
        /** @type {?} */
        var availableTime = fn(currentTimeIndex);
        return availableTime != null ? availableTime : this.time;
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype._getNextAvailableTime = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var timeCollection = this.timeList;
        /** @type {?} */
        var maxValue = timeCollection.length;
        for (var i = index + 1; i < maxValue; i++) {
            /** @type {?} */
            var time = timeCollection[i];
            if (!time.disabled) {
                return time.time;
            }
        }
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype._getPrevAvailableTime = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        for (var i = index; i >= 0; i--) {
            /** @type {?} */
            var time = this.timeList[i];
            if (!time.disabled) {
                return time.time;
            }
        }
    };
    /**
     * @private
     * @param {?} time
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype._isSelectedTimeDisabled = /**
     * @private
     * @param {?} time
     * @return {?}
     */
    function (time) {
        return this.timeList.find((/**
         * @param {?} faceTime
         * @return {?}
         */
        function (faceTime) { return faceTime.time === time; })).disabled;
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerControlComponent.prototype._setAvailableTime = /**
     * @private
     * @return {?}
     */
    function () {
        this.time = this.timeList.find((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return !t.disabled; })).time;
        this.timeChanged.emit(this.time);
    };
    NgxMatTimepickerControlComponent.nextId = 0;
    NgxMatTimepickerControlComponent.decorators = [
        { type: Component, args: [{
                    selector: "ngx-mat-timepicker-time-control",
                    template: "<mat-form-field [color]=\"color\"\n                [floatLabel]=\"floatLabel\"\n                [ngClass]=\"{'active': isFocused}\"\n                class=\"ngx-mat-timepicker-control\">\n    <input id=\"ngx_mat_timepicker_field_{{id}}\"\n           name=\"ngx_mat_timepicker_field_{{id}}\"\n           matInput\n           maxlength=\"2\"\n           [ngModel]=\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\"\n           (ngModelChange)=\"onModelChange($event)\"\n           [placeholder]=\"placeholder\"\n           [disabled]=\"disabled\"\n           (keydown)=\"onKeydown($event)\"\n           (keypress)=\"changeTime($event)\"\n           (focus)=\"onFocus()\"\n           (blur)=\"onBlur()\" />\n    <div class=\"arrows-wrap\"\n         matSuffix>\n        <span class=\"arrow\"\n              role=\"button\"\n              (click)=\"increase()\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\n                 height=\"18\"\n                 viewBox=\"0 0 24 24\"\n                 width=\"18\">\n                <path d=\"M0 0h24v24H0z\"\n                      fill=\"none\" />\n                <path d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\" />\n            </svg>\n        </span>\n        <span class=\"arrow\"\n              role=\"button\"\n              (click)=\"decrease()\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\n                 height=\"18\"\n                 viewBox=\"0 0 24 24\"\n                 width=\"18\">\n                <path d=\"M0 0h24v24H0V0z\"\n                      fill=\"none\" />\n                <path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\" />\n            </svg>\n        </span>\n    </div>\n</mat-form-field>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [NgxMatTimepickerParserPipe],
                    styles: [".ngx-mat-timepicker-control{width:60px;min-width:60px}.ngx-mat-timepicker-control input{text-align:center}.ngx-mat-timepicker-control .arrows-wrap{position:absolute;right:0;bottom:-8px;display:flex;flex-direction:column}.ngx-mat-timepicker-control .arrows-wrap>.arrow{text-align:center;opacity:.5;height:15px;cursor:pointer;transition:opacity .2s;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-mat-timepicker-control .arrows-wrap>.arrow:hover{opacity:1}"]
                }] }
    ];
    /** @nocollapse */
    NgxMatTimepickerControlComponent.ctorParameters = function () { return [
        { type: NgxMatTimepickerParserPipe }
    ]; };
    NgxMatTimepickerControlComponent.propDecorators = {
        color: [{ type: Input }],
        disabled: [{ type: Input }],
        floatLabel: [{ type: Input }],
        max: [{ type: Input }],
        min: [{ type: Input }],
        placeholder: [{ type: Input }],
        preventTyping: [{ type: Input }],
        time: [{ type: Input }],
        timeChanged: [{ type: Output }],
        timeList: [{ type: Input }],
        timeUnit: [{ type: Input }]
    };
    return NgxMatTimepickerControlComponent;
}());
export { NgxMatTimepickerControlComponent };
if (false) {
    /** @type {?} */
    NgxMatTimepickerControlComponent.nextId;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.disabled;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.id;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.isFocused;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.max;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.min;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.placeholder;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.preventTyping;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.time;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.timeChanged;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.timeList;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.timeUnit;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerControlComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerControlComponent.prototype._floatLabel;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerControlComponent.prototype._previousTime;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerControlComponent.prototype._timeParser;
}
//# sourceMappingURL=data:application/json;base64,
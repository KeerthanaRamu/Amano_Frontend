/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __assign } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, TemplateRef, ViewEncapsulation } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
//
import { NgxMatTimepickerService } from "../../services/ngx-mat-timepicker.service";
import { NgxMatTimepickerPeriods } from "../../models/ngx-mat-timepicker-periods.enum";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerAdapter } from "../../services/ngx-mat-timepicker-adapter";
import { NGX_MAT_TIMEPICKER_LOCALE } from "../../tokens/ngx-mat-timepicker-time-locale.token";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
import { Subject } from "rxjs";
import { distinctUntilChanged, map, takeUntil, tap } from "rxjs/operators";
var NgxMatTimepickerFieldComponent = /** @class */ (function () {
    function NgxMatTimepickerFieldComponent(_timepickerService, _locale) {
        this._timepickerService = _timepickerService;
        this._locale = _locale;
        this.maxHour = 12;
        this.minHour = 1;
        this.period = NgxMatTimepickerPeriods.AM;
        this.periods = [
            NgxMatTimepickerPeriods.AM,
            NgxMatTimepickerPeriods.PM
        ];
        this.timeChanged = new EventEmitter();
        this.timeUnit = NgxMatTimepickerUnits;
        this._color = "primary";
        this._floatLabel = "never";
        this._format = 12;
        this._isFirstTimeChange = true;
        this._subsCtrl$ = new Subject();
        this._onChange = (/**
         * @return {?}
         */
        function () {
        });
    }
    Object.defineProperty(NgxMatTimepickerFieldComponent.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this._color;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._color = newValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerFieldComponent.prototype, "defaultTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._defaultTime;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._defaultTime = val;
            this._isDefaultTime = !!val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerFieldComponent.prototype, "floatLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._floatLabel;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._floatLabel = newValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerFieldComponent.prototype, "format", {
        get: /**
         * @return {?}
         */
        function () {
            return this._format;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._format = value === 24 ? 24 : 12;
            this.minHour = this._format === 12 ? 1 : 0;
            this.maxHour = this._format === 12 ? 12 : 23;
            this.hoursList = NgxMatTimepickerUtils.getHours(this._format);
            /** @type {?} */
            var isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);
            if (isDynamicallyChanged) {
                this._updateTime(this.timepickerTime);
            }
            this._previousFormat = this._format;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerFieldComponent.prototype, "max", {
        get: /**
         * @return {?}
         */
        function () {
            return this._max;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value === "string") {
                this._max = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
                return;
            }
            this._max = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerFieldComponent.prototype, "min", {
        get: /**
         * @return {?}
         */
        function () {
            return this._min;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value === "string") {
                this._min = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
                return;
            }
            this._min = value;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @param {?} hour
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype.changeHour = /**
     * @param {?} hour
     * @return {?}
     */
    function (hour) {
        this._timepickerService.hour = this.hoursList.find((/**
         * @param {?} h
         * @return {?}
         */
        function (h) { return h.time === hour; }));
        this._changeTime();
    };
    /**
     * @param {?} minute
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype.changeMinute = /**
     * @param {?} minute
     * @return {?}
     */
    function (minute) {
        this._timepickerService.minute = this.minutesList.find((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return m.time === minute; }));
        this._changeTime();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype.changePeriod = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._timepickerService.period = (/** @type {?} */ (event.value));
        this._changeTime();
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._subsCtrl$.next();
        this._subsCtrl$.complete();
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._initTime(this.defaultTime);
        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);
        this.minutesList = NgxMatTimepickerUtils.getMinutes();
        this.isTimeRangeSet = !!(this.min || this.max);
        this.hour$ = (/** @type {?} */ (this._timepickerService.selectedHour.pipe(tap((/**
         * @param {?} clockTime
         * @return {?}
         */
        function (clockTime) { return _this._selectedHour = clockTime.time; })), map(this._changeDefaultTimeValue.bind(this)), tap((/**
         * @return {?}
         */
        function () { return _this.isTimeRangeSet && _this._updateAvailableMinutes(); })))));
        this.minute$ = (/** @type {?} */ (this._timepickerService.selectedMinute.pipe(map(this._changeDefaultTimeValue.bind(this)), tap((/**
         * @return {?}
         */
        function () { return _this._isFirstTimeChange = false; })))));
        if (this.format === 12) {
            this._timepickerService.selectedPeriod.pipe(distinctUntilChanged(), tap((/**
             * @param {?} period
             * @return {?}
             */
            function (period) { return _this.period = period; })), tap((/**
             * @param {?} period
             * @return {?}
             */
            function (period) { return _this.isChangePeriodDisabled = _this._isPeriodDisabled(period); })), takeUntil(this._subsCtrl$)).subscribe((/**
             * @return {?}
             */
            function () { return _this.isTimeRangeSet && _this._updateAvailableTime(); }));
        }
    };
    /**
     * @param {?} time
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype.onTimeSet = /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this._updateTime(time);
        this._emitLocalTimeChange(time);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} _fn_
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype.registerOnTouched = /**
     * @param {?} _fn_
     * @return {?}
     */
    function (_fn_) {
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            this._initTime(val);
        }
        else {
            this._resetTime();
        }
    };
    /**
     * @private
     * @param {?} clockFaceTime
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype._changeDefaultTimeValue = /**
     * @private
     * @param {?} clockFaceTime
     * @return {?}
     */
    function (clockFaceTime) {
        if (!this._isDefaultTime && this._isFirstTimeChange) {
            return __assign(__assign({}, clockFaceTime), { time: null });
        }
        return clockFaceTime;
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype._changeTime = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var time = this._timepickerService.getFullTime(this.format);
        this.timepickerTime = time;
        this._emitLocalTimeChange(time);
    };
    /**
     * @private
     * @param {?} time
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype._emitLocalTimeChange = /**
     * @private
     * @param {?} time
     * @return {?}
     */
    function (time) {
        /** @type {?} */
        var localTime = NgxMatTimepickerAdapter.toLocaleTimeString(time, { format: this.format, locale: this._locale });
        this._onChange(localTime);
        this.timeChanged.emit(localTime);
    };
    /**
     * @private
     * @param {?} time
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype._initTime = /**
     * @private
     * @param {?} time
     * @return {?}
     */
    function (time) {
        /** @type {?} */
        var isDefaultTimeAvailable = NgxMatTimepickerAdapter
            .isTimeAvailable(time, (/** @type {?} */ (this.min)), (/** @type {?} */ (this.max)), "minutes", null, this.format);
        if (!isDefaultTimeAvailable) {
            if (this.min) {
                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString((/** @type {?} */ (this.min)), this.format));
                return;
            }
            if (this.max) {
                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString((/** @type {?} */ (this.max)), this.format));
                return;
            }
        }
        this._updateTime(time);
    };
    /**
     * @private
     * @param {?} period
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype._isPeriodDisabled = /**
     * @private
     * @param {?} period
     * @return {?}
     */
    function (period) {
        return NgxMatTimepickerUtils.disableHours(NgxMatTimepickerUtils.getHours(12), {
            min: (/** @type {?} */ (this.min)),
            max: (/** @type {?} */ (this.max)),
            format: 12,
            period: period === NgxMatTimepickerPeriods.AM ? NgxMatTimepickerPeriods.PM : NgxMatTimepickerPeriods.AM
        }).every((/**
         * @param {?} time
         * @return {?}
         */
        function (time) { return time.disabled; }));
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype._resetTime = /**
     * @private
     * @return {?}
     */
    function () {
        this._timepickerService.hour = { angle: 0, time: null };
        this._timepickerService.minute = { angle: 0, time: null };
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype._updateAvailableHours = /**
     * @private
     * @return {?}
     */
    function () {
        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {
            min: (/** @type {?} */ (this.min)),
            max: (/** @type {?} */ (this.max)),
            format: this.format,
            period: this.period
        });
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype._updateAvailableMinutes = /**
     * @private
     * @return {?}
     */
    function () {
        this.minutesList = NgxMatTimepickerUtils.disableMinutes(this.minutesList, this._selectedHour, {
            min: (/** @type {?} */ (this.min)),
            max: (/** @type {?} */ (this.max)),
            format: this.format,
            period: this.period
        });
    };
    /**
     * @private
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype._updateAvailableTime = /**
     * @private
     * @return {?}
     */
    function () {
        this._updateAvailableHours();
        if (this._selectedHour) {
            this._updateAvailableMinutes();
        }
    };
    /**
     * @private
     * @param {?} time
     * @return {?}
     */
    NgxMatTimepickerFieldComponent.prototype._updateTime = /**
     * @private
     * @param {?} time
     * @return {?}
     */
    function (time) {
        if (time) {
            /** @type {?} */
            var formattedTime = NgxMatTimepickerAdapter.formatTime(time, { locale: this._locale, format: this.format });
            this._timepickerService.setDefaultTimeIfAvailable(formattedTime, (/** @type {?} */ (this.min)), (/** @type {?} */ (this.max)), this.format);
            this.timepickerTime = formattedTime;
        }
    };
    NgxMatTimepickerFieldComponent.decorators = [
        { type: Component, args: [{
                    selector: "ngx-mat-timepicker-field",
                    template: "<div class=\"ngx-mat-timepicker\"\n     [ngClass]=\"{'ngx-mat-timepicker--disabled': disabled}\">\n    <ngx-mat-timepicker-time-control\n            class=\"ngx-mat-timepicker__control--first\"\n            [color]=\"color\"\n            [floatLabel]=\"floatLabel\"\n            [placeholder]=\"'HH'\"\n            [time]=\"(hour$ | async)?.time\"\n            [min]=\"minHour\"\n            [max]=\"maxHour\"\n            [timeUnit]=\"timeUnit.HOUR\"\n            [disabled]=\"disabled\"\n            [timeList]=\"hoursList\"\n            [preventTyping]=\"isTimeRangeSet\"\n            (timeChanged)=\"changeHour($event)\"></ngx-mat-timepicker-time-control>\n    <span class=\"separator-colon ngx-mat-timepicker__control--second\">:</span>\n    <ngx-mat-timepicker-time-control\n            class=\"ngx-mat-timepicker__control--third\"\n            [color]=\"color\"\n            [floatLabel]=\"floatLabel\"\n            [placeholder]=\"'MM'\"\n            [time]=\"(minute$ | async)?.time\"\n            [min]=\"0\"\n            [max]=\"59\"\n            [timeUnit]=\"timeUnit.MINUTE\"\n            [disabled]=\"disabled\"\n            [timeList]=\"minutesList\"\n            [preventTyping]=\"isTimeRangeSet\"\n            (timeChanged)=\"changeMinute($event)\"></ngx-mat-timepicker-time-control>\n    <mat-form-field class=\"period-select ngx-mat-timepicker__control--forth\"\n                    *ngIf=\"format !== 24\"\n                    [color]=\"color\">\n        <mat-select [disabled]=\"disabled || isChangePeriodDisabled\"\n                    (selectionChange)=\"changePeriod($event)\"\n                    [ngModel]=\"period\">\n            <mat-option *ngFor=\"let option of periods\"\n                        [value]=\"option\">{{option}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n    <ngx-mat-timepicker-toggle\n            class=\"ngx-mat-timepicker__toggle\"\n            *ngIf=\"!controlOnly\"\n            [for]=\"timepicker\"\n            [disabled]=\"disabled\">\n        <span ngxMatTimepickerToggleIcon>\n            <ng-container *ngTemplateOutlet=\"toggleIcon || defaultIcon\"></ng-container>\n        </span>\n    </ngx-mat-timepicker-toggle>\n</div>\n<ngx-mat-timepicker\n        [color]=\"color\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [theme]=\"clockTheme\"\n        [defaultTime]=\"timepickerTime\"\n        [format]=\"format\"\n        [cancelBtnTmpl]=\"cancelBtnTmpl\"\n        [confirmBtnTmpl]=\"confirmBtnTmpl\"\n        (timeSet)=\"onTimeSet($event)\"\n        #timepicker></ngx-mat-timepicker>\n\n<ng-template #defaultIcon>\n    <mat-icon>watch_later</mat-icon>\n</ng-template>\n",
                    providers: [
                        NgxMatTimepickerService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: NgxMatTimepickerFieldComponent,
                            multi: true
                        }
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    styles: [".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth,.ngx-mat-timepicker__toggle{order:4}"]
                }] }
    ];
    /** @nocollapse */
    NgxMatTimepickerFieldComponent.ctorParameters = function () { return [
        { type: NgxMatTimepickerService },
        { type: String, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_LOCALE,] }] }
    ]; };
    NgxMatTimepickerFieldComponent.propDecorators = {
        color: [{ type: Input }],
        defaultTime: [{ type: Input }],
        floatLabel: [{ type: Input }],
        format: [{ type: Input }],
        max: [{ type: Input }],
        min: [{ type: Input }],
        cancelBtnTmpl: [{ type: Input }],
        clockTheme: [{ type: Input }],
        confirmBtnTmpl: [{ type: Input }],
        controlOnly: [{ type: Input }],
        disabled: [{ type: Input }],
        timeChanged: [{ type: Output }],
        toggleIcon: [{ type: Input }]
    };
    return NgxMatTimepickerFieldComponent;
}());
export { NgxMatTimepickerFieldComponent };
if (false) {
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.cancelBtnTmpl;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.clockTheme;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.confirmBtnTmpl;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.controlOnly;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.disabled;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.hour$;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.hoursList;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.isChangePeriodDisabled;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.isTimeRangeSet;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.maxHour;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.minHour;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.minute$;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.minutesList;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.period;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.periods;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.timeChanged;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.timepickerTime;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.timeUnit;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.toggleIcon;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._defaultTime;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._floatLabel;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._format;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._isDefaultTime;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._isFirstTimeChange;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._max;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._min;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._previousFormat;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._selectedHour;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._subsCtrl$;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._timepickerService;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._locale;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-period/ngx-mat-timepicker-period.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from "@angular/core";
import { animate, sequence, style, transition, trigger } from "@angular/animations";
//
import { NgxMatTimepickerPeriods } from "../../models/ngx-mat-timepicker-periods.enum";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
//
import { DateTime } from "ts-luxon";
var NgxMatTimepickerPeriodComponent = /** @class */ (function () {
    function NgxMatTimepickerPeriodComponent() {
        this.isPeriodAvailable = true;
        this.periodChanged = new EventEmitter();
        this.timePeriod = NgxMatTimepickerPeriods;
    }
    /**
     * @return {?}
     */
    NgxMatTimepickerPeriodComponent.prototype.animationDone = /**
     * @return {?}
     */
    function () {
        this.isPeriodAvailable = true;
    };
    /**
     * @param {?} period
     * @return {?}
     */
    NgxMatTimepickerPeriodComponent.prototype.changePeriod = /**
     * @param {?} period
     * @return {?}
     */
    function (period) {
        this.isPeriodAvailable = this._isSwitchPeriodAvailable(period);
        if (this.isPeriodAvailable) {
            this.periodChanged.next(period);
        }
    };
    /**
     * @private
     * @param {?} period
     * @return {?}
     */
    NgxMatTimepickerPeriodComponent.prototype._getDisabledTimeByPeriod = /**
     * @private
     * @param {?} period
     * @return {?}
     */
    function (period) {
        switch (this.activeTimeUnit) {
            case NgxMatTimepickerUnits.HOUR:
                return NgxMatTimepickerUtils.disableHours(this.hours, {
                    min: this.minTime,
                    max: this.maxTime,
                    format: this.format,
                    period: period
                });
            case NgxMatTimepickerUnits.MINUTE:
                return NgxMatTimepickerUtils.disableMinutes(this.minutes, +this.selectedHour, {
                    min: this.minTime,
                    max: this.maxTime,
                    format: this.format,
                    period: period
                });
            default:
                throw new Error("no such NgxMatTimepickerUnits");
        }
    };
    /**
     * @private
     * @param {?} period
     * @return {?}
     */
    NgxMatTimepickerPeriodComponent.prototype._isSwitchPeriodAvailable = /**
     * @private
     * @param {?} period
     * @return {?}
     */
    function (period) {
        /** @type {?} */
        var time = this._getDisabledTimeByPeriod(period);
        return !time.every((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.disabled; }));
    };
    NgxMatTimepickerPeriodComponent.decorators = [
        { type: Component, args: [{
                    selector: "ngx-mat-timepicker-period",
                    template: "<div class=\"timepicker-period\">\n    <button class=\"timepicker-dial__item timepicker-period__btn\"\n            [ngClass]=\"{'active': selectedPeriod === timePeriod.AM}\"\n            (click)=\"changePeriod(timePeriod.AM)\"\n            type=\"button\">{{meridiems[0]}}</button>\n    <button class=\"timepicker-dial__item timepicker-period__btn\"\n            [ngClass]=\"{'active': selectedPeriod === timePeriod.PM}\"\n            (click)=\"changePeriod(timePeriod.PM)\"\n            type=\"button\">{{meridiems[1]}}</button>\n    <div class=\"timepicker-period__warning\"\n         [@scaleInOut]\n         (@scaleInOut.done)=\"animationDone()\"\n         *ngIf=\"!isPeriodAvailable\">\n        <p>Current time would be invalid in this period.</p>\n    </div>\n</div>\n",
                    animations: [
                        trigger("scaleInOut", [
                            transition(":enter", [
                                style({ transform: "scale(0)" }),
                                animate(".2s", style({ transform: "scale(1)" })),
                                sequence([
                                    animate("3s", style({ opacity: 1 })),
                                    animate(".3s", style({ opacity: 0 }))
                                ])
                            ])
                        ])
                    ],
                    styles: [".timepicker-period{display:flex;flex-direction:column;position:relative}.timepicker-period__btn{opacity:.5;padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0;border-radius:3px;transition:background-color .5s;color:inherit}.timepicker-period__btn.active{opacity:1}.timepicker-period__btn:focus{background-color:rgba(0,0,0,.07)}.timepicker-period__warning{padding:5px 10px;border-radius:3px;background-color:rgba(0,0,0,.55);position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning>p{margin:0;font-size:12px}"]
                }] }
    ];
    NgxMatTimepickerPeriodComponent.propDecorators = {
        activeTimeUnit: [{ type: Input }],
        format: [{ type: Input }],
        hours: [{ type: Input }],
        maxTime: [{ type: Input }],
        meridiems: [{ type: Input }],
        minTime: [{ type: Input }],
        minutes: [{ type: Input }],
        periodChanged: [{ type: Output }],
        selectedHour: [{ type: Input }],
        selectedPeriod: [{ type: Input }]
    };
    return NgxMatTimepickerPeriodComponent;
}());
export { NgxMatTimepickerPeriodComponent };
if (false) {
    /** @type {?} */
    NgxMatTimepickerPeriodComponent.prototype.activeTimeUnit;
    /** @type {?} */
    NgxMatTimepickerPeriodComponent.prototype.format;
    /** @type {?} */
    NgxMatTimepickerPeriodComponent.prototype.hours;
    /** @type {?} */
    NgxMatTimepickerPeriodComponent.prototype.isPeriodAvailable;
    /** @type {?} */
    NgxMatTimepickerPeriodComponent.prototype.maxTime;
    /** @type {?} */
    NgxMatTimepickerPeriodComponent.prototype.meridiems;
    /** @type {?} */
    NgxMatTimepickerPeriodComponent.prototype.minTime;
    /** @type {?} */
    NgxMatTimepickerPeriodComponent.prototype.minutes;
    /** @type {?} */
    NgxMatTimepickerPeriodComponent.prototype.periodChanged;
    /** @type {?} */
    NgxMatTimepickerPeriodComponent.prototype.selectedHour;
    /** @type {?} */
    NgxMatTimepickerPeriodComponent.prototype.selectedPeriod;
    /** @type {?} */
    NgxMatTimepickerPeriodComponent.prototype.timePeriod;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLXBlcmlvZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWF0LXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uZ3gtbWF0LXRpbWVwaWNrZXItcGVyaW9kL25neC1tYXQtdGltZXBpY2tlci1wZXJpb2QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBQyxNQUFNLHFCQUFxQixDQUFDOztBQUVsRixPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSw4Q0FBOEMsQ0FBQztBQUNyRixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSw0Q0FBNEMsQ0FBQztBQUVqRixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQzs7QUFFM0UsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUVsQztJQUFBO1FBc0JJLHNCQUFpQixHQUFHLElBQUksQ0FBQztRQUtmLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQTJCLENBQUM7UUFHdEUsZUFBVSxHQUFHLHVCQUF1QixDQUFDO0lBdUN6QyxDQUFDOzs7O0lBckNHLHVEQUFhOzs7SUFBYjtRQUNJLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFFRCxzREFBWTs7OztJQUFaLFVBQWEsTUFBK0I7UUFDeEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvRCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUN4QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNuQztJQUNMLENBQUM7Ozs7OztJQUVPLGtFQUF3Qjs7Ozs7SUFBaEMsVUFBaUMsTUFBK0I7UUFDNUQsUUFBUSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3pCLEtBQUsscUJBQXFCLENBQUMsSUFBSTtnQkFDM0IsT0FBTyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtvQkFDbEQsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPO29CQUNqQixHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU87b0JBQ2pCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtvQkFDbkIsTUFBTSxRQUFBO2lCQUNULENBQUMsQ0FBQztZQUNQLEtBQUsscUJBQXFCLENBQUMsTUFBTTtnQkFDN0IsT0FBTyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7b0JBQzFFLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTztvQkFDakIsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPO29CQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07b0JBQ25CLE1BQU0sUUFBQTtpQkFDVCxDQUFDLENBQUM7WUFDUDtnQkFDSSxNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7U0FDeEQ7SUFDTCxDQUFDOzs7Ozs7SUFFTyxrRUFBd0I7Ozs7O0lBQWhDLFVBQWlDLE1BQStCOztZQUN0RCxJQUFJLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQztRQUVsRCxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUs7Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxRQUFRLEVBQVYsQ0FBVSxFQUFDLENBQUM7SUFDeEMsQ0FBQzs7Z0JBcEVKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxpeEJBQXVEO29CQUV2RCxVQUFVLEVBQUU7d0JBQ1IsT0FBTyxDQUFDLFlBQVksRUFBRTs0QkFDbEIsVUFBVSxDQUFDLFFBQVEsRUFBRTtnQ0FDakIsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBQyxDQUFDO2dDQUM5QixPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDO2dDQUM5QyxRQUFRLENBQUM7b0NBQ0wsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBQyxPQUFPLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQztvQ0FDbEMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBQyxPQUFPLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQztpQ0FDdEMsQ0FBQzs2QkFDTCxDQUFDO3lCQUNMLENBQUM7cUJBQ0w7O2lCQUNKOzs7aUNBR0ksS0FBSzt5QkFDTCxLQUFLO3dCQUNMLEtBQUs7MEJBRUwsS0FBSzs0QkFDTCxLQUFLOzBCQUNMLEtBQUs7MEJBQ0wsS0FBSztnQ0FDTCxNQUFNOytCQUNOLEtBQUs7aUNBQ0wsS0FBSzs7SUF3Q1Ysc0NBQUM7Q0FBQSxBQXJFRCxJQXFFQztTQXBEWSwrQkFBK0I7OztJQUV4Qyx5REFBK0M7O0lBQy9DLGlEQUF3Qjs7SUFDeEIsZ0RBQTRDOztJQUM1Qyw0REFBeUI7O0lBQ3pCLGtEQUEyQjs7SUFDM0Isb0RBQTZCOztJQUM3QixrREFBMkI7O0lBQzNCLGtEQUE4Qzs7SUFDOUMsd0RBQXNFOztJQUN0RSx1REFBdUM7O0lBQ3ZDLHlEQUFpRDs7SUFDakQscURBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7YW5pbWF0ZSwgc2VxdWVuY2UsIHN0eWxlLCB0cmFuc2l0aW9uLCB0cmlnZ2VyfSBmcm9tIFwiQGFuZ3VsYXIvYW5pbWF0aW9uc1wiO1xuLy9cbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclBlcmlvZHN9IGZyb20gXCIuLi8uLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLXBlcmlvZHMuZW51bVwiO1xuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyVW5pdHN9IGZyb20gXCIuLi8uLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLXVuaXRzLmVudW1cIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZX0gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItY2xvY2stZmFjZS5pbnRlcmZhY2VcIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclV0aWxzfSBmcm9tIFwiLi4vLi4vdXRpbHMvbmd4LW1hdC10aW1lcGlja2VyLnV0aWxzXCI7XG4vL1xuaW1wb3J0IHtEYXRlVGltZX0gZnJvbSBcInRzLWx1eG9uXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcIm5neC1tYXQtdGltZXBpY2tlci1wZXJpb2RcIixcbiAgICB0ZW1wbGF0ZVVybDogXCJuZ3gtbWF0LXRpbWVwaWNrZXItcGVyaW9kLmNvbXBvbmVudC5odG1sXCIsXG4gICAgc3R5bGVVcmxzOiBbXCJuZ3gtbWF0LXRpbWVwaWNrZXItcGVyaW9kLmNvbXBvbmVudC5zY3NzXCJdLFxuICAgIGFuaW1hdGlvbnM6IFtcbiAgICAgICAgdHJpZ2dlcihcInNjYWxlSW5PdXRcIiwgW1xuICAgICAgICAgICAgdHJhbnNpdGlvbihcIjplbnRlclwiLCBbXG4gICAgICAgICAgICAgICAgc3R5bGUoe3RyYW5zZm9ybTogXCJzY2FsZSgwKVwifSksXG4gICAgICAgICAgICAgICAgYW5pbWF0ZShcIi4yc1wiLCBzdHlsZSh7dHJhbnNmb3JtOiBcInNjYWxlKDEpXCJ9KSksXG4gICAgICAgICAgICAgICAgc2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRlKFwiM3NcIiwgc3R5bGUoe29wYWNpdHk6IDF9KSksXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGUoXCIuM3NcIiwgc3R5bGUoe29wYWNpdHk6IDB9KSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIE5neE1hdFRpbWVwaWNrZXJQZXJpb2RDb21wb25lbnQge1xuXG4gICAgQElucHV0KCkgYWN0aXZlVGltZVVuaXQ6IE5neE1hdFRpbWVwaWNrZXJVbml0cztcbiAgICBASW5wdXQoKSBmb3JtYXQ6IG51bWJlcjtcbiAgICBASW5wdXQoKSBob3VyczogTmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZVtdO1xuICAgIGlzUGVyaW9kQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICBASW5wdXQoKSBtYXhUaW1lOiBEYXRlVGltZTtcbiAgICBASW5wdXQoKSBtZXJpZGllbXM6IHN0cmluZ1tdO1xuICAgIEBJbnB1dCgpIG1pblRpbWU6IERhdGVUaW1lO1xuICAgIEBJbnB1dCgpIG1pbnV0ZXM6IE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2VbXTtcbiAgICBAT3V0cHV0KCkgcGVyaW9kQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8Tmd4TWF0VGltZXBpY2tlclBlcmlvZHM+KCk7XG4gICAgQElucHV0KCkgc2VsZWN0ZWRIb3VyOiBudW1iZXIgfCBzdHJpbmc7XG4gICAgQElucHV0KCkgc2VsZWN0ZWRQZXJpb2Q6IE5neE1hdFRpbWVwaWNrZXJQZXJpb2RzO1xuICAgIHRpbWVQZXJpb2QgPSBOZ3hNYXRUaW1lcGlja2VyUGVyaW9kcztcblxuICAgIGFuaW1hdGlvbkRvbmUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaXNQZXJpb2RBdmFpbGFibGUgPSB0cnVlO1xuICAgIH1cblxuICAgIGNoYW5nZVBlcmlvZChwZXJpb2Q6IE5neE1hdFRpbWVwaWNrZXJQZXJpb2RzKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaXNQZXJpb2RBdmFpbGFibGUgPSB0aGlzLl9pc1N3aXRjaFBlcmlvZEF2YWlsYWJsZShwZXJpb2QpO1xuICAgICAgICBpZiAodGhpcy5pc1BlcmlvZEF2YWlsYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5wZXJpb2RDaGFuZ2VkLm5leHQocGVyaW9kKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX2dldERpc2FibGVkVGltZUJ5UGVyaW9kKHBlcmlvZDogTmd4TWF0VGltZXBpY2tlclBlcmlvZHMpOiBOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlW10ge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuYWN0aXZlVGltZVVuaXQpIHtcbiAgICAgICAgICAgIGNhc2UgTmd4TWF0VGltZXBpY2tlclVuaXRzLkhPVVI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5neE1hdFRpbWVwaWNrZXJVdGlscy5kaXNhYmxlSG91cnModGhpcy5ob3Vycywge1xuICAgICAgICAgICAgICAgICAgICBtaW46IHRoaXMubWluVGltZSxcbiAgICAgICAgICAgICAgICAgICAgbWF4OiB0aGlzLm1heFRpbWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogdGhpcy5mb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgIHBlcmlvZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FzZSBOZ3hNYXRUaW1lcGlja2VyVW5pdHMuTUlOVVRFOlxuICAgICAgICAgICAgICAgIHJldHVybiBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZGlzYWJsZU1pbnV0ZXModGhpcy5taW51dGVzLCArdGhpcy5zZWxlY3RlZEhvdXIsIHtcbiAgICAgICAgICAgICAgICAgICAgbWluOiB0aGlzLm1pblRpbWUsXG4gICAgICAgICAgICAgICAgICAgIG1heDogdGhpcy5tYXhUaW1lLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IHRoaXMuZm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICBwZXJpb2RcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8gc3VjaCBOZ3hNYXRUaW1lcGlja2VyVW5pdHNcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9pc1N3aXRjaFBlcmlvZEF2YWlsYWJsZShwZXJpb2Q6IE5neE1hdFRpbWVwaWNrZXJQZXJpb2RzKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHRpbWUgPSB0aGlzLl9nZXREaXNhYmxlZFRpbWVCeVBlcmlvZChwZXJpb2QpO1xuXG4gICAgICAgIHJldHVybiAhdGltZS5ldmVyeSh0ID0+IHQuZGlzYWJsZWQpO1xuICAgIH1cbn1cbiJdfQ==
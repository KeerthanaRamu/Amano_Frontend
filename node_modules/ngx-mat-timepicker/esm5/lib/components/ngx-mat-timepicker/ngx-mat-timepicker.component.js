/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker/ngx-mat-timepicker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __assign } from "tslib";
import { Component, EventEmitter, HostBinding, Input, Output, TemplateRef, ViewContainerRef } from "@angular/core";
import { Overlay } from "@angular/cdk/overlay";
import { MatDialog } from "@angular/material/dialog";
import { SmpDomService } from "smp-core-utils";
//
import { NgxMatTimepickerEventService } from "../../services/ngx-mat-timepicker-event.service";
import { NgxMatTimepickerDialogComponent } from "../ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component";
import { NGX_MAT_TIMEPICKER_CONFIG } from "../../tokens/ngx-mat-timepicker-config.token";
//
import { DateTime } from "ts-luxon";
import { Subject } from "rxjs";
/** @type {?} */
var config;
var NgxMatTimepickerComponent = /** @class */ (function () {
    function NgxMatTimepickerComponent(_vcr, _eventService, _dialog, _overlay, _domService) {
        this._vcr = _vcr;
        this._eventService = _eventService;
        this._dialog = _dialog;
        this._overlay = _overlay;
        this._domService = _domService;
        this.closed = new EventEmitter();
        this.hourSelected = new EventEmitter();
        this.hoursOnly = false;
        this.id = "ngx_mat_timepicker_" + ++NgxMatTimepickerComponent.nextId;
        this.isEsc = !0;
        this.opened = new EventEmitter();
        this.overlayPositions = [
            {
                originX: "center",
                originY: "bottom",
                overlayX: "center",
                overlayY: "top",
                offsetY: 0
            },
            {
                originX: "center",
                originY: "top",
                overlayX: "center",
                overlayY: "bottom",
                offsetY: 0
            }
        ];
        this.showPicker = !1;
        this.timeChanged = new EventEmitter();
        this.timeSet = new EventEmitter();
        this.timeUpdated = new Subject(); // used in the dialog, check if a better approach can be used
        // used in the dialog, check if a better approach can be used
        this._color = "primary";
    }
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this._color;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._color = newValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._timepickerInput && this._timepickerInput.disabled;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "format", {
        get: /**
         * @return {?}
         */
        function () {
            return this._timepickerInput ? this._timepickerInput.format : this._format;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._format = value === 24 ? 24 : 12;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "inputElement", {
        get: /**
         * @return {?}
         */
        function () {
            return this._timepickerInput && this._timepickerInput.element;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "maxTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._timepickerInput ? ((/** @type {?} */ (this._timepickerInput.max))) : this.max;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "minTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._timepickerInput ? ((/** @type {?} */ (this._timepickerInput.min))) : this.min;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "minutesGap", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minutesGap;
        },
        set: /**
         * @param {?} gap
         * @return {?}
         */
        function (gap) {
            if (gap == null) {
                return;
            }
            gap = Math.floor(gap);
            this._minutesGap = gap <= 59 ? gap : 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "overlayOrigin", {
        get: /**
         * @return {?}
         */
        function () {
            return this._timepickerInput ? this._timepickerInput.cdkOverlayOrigin : void 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "time", {
        get: /**
         * @return {?}
         */
        function () {
            return this._timepickerInput && this._timepickerInput.value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NgxMatTimepickerComponent.prototype, "ngxMatTimepickerTheme", {
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this._ngxMatTimepickerTheme = newValue;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxMatTimepickerComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        if (this.appendToInput) {
            this._overlayRef && this._overlayRef.dispose();
        }
        else {
            this._dialogRef && this._dialogRef.close();
        }
        this.showPicker = !1;
        this.closed.emit();
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        var _this = this;
        config = {
            timepickerBaseRef: this,
            time: this.time,
            defaultTime: this.defaultTime,
            maxTime: this.maxTime,
            minTime: this.minTime,
            format: this.format,
            minutesGap: this.minutesGap,
            disableAnimation: this.disableAnimation,
            cancelBtnTmpl: this.cancelBtnTmpl,
            confirmBtnTmpl: this.confirmBtnTmpl,
            editableHintTmpl: this.editableHintTmpl,
            disabled: this.disabled,
            enableKeyboardInput: this.enableKeyboardInput,
            preventOverlayClick: this.preventOverlayClick,
            appendToInput: this.appendToInput,
            hoursOnly: this.hoursOnly,
            theme: this.theme || this._ngxMatTimepickerTheme,
            timepickerClass: this.timepickerClass,
            inputElement: this.inputElement,
            color: this.color
        };
        if (this.appendToInput) {
            this.showPicker = !0;
        }
        else {
            this._dialogRef = this._dialog.open(NgxMatTimepickerDialogComponent, {
                panelClass: "ngx-mat-timepicker-dialog",
                data: __assign({}, config)
            });
            this._dialogRef
                .afterClosed()
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this.closed.emit();
            }));
        }
        this.opened.emit();
    };
    /***
     * Register an input with this timepicker.
     * input - The timepicker input to register with this timepicker
     */
    /**
     *
     * Register an input with this timepicker.
     * input - The timepicker input to register with this timepicker
     * @param {?} input
     * @return {?}
     */
    NgxMatTimepickerComponent.prototype.registerInput = /**
     *
     * Register an input with this timepicker.
     * input - The timepicker input to register with this timepicker
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (this._timepickerInput) {
            throw Error("A Timepicker can only be associated with a single input.");
        }
        this._timepickerInput = input;
    };
    /**
     * @return {?}
     */
    NgxMatTimepickerComponent.prototype.unregisterInput = /**
     * @return {?}
     */
    function () {
        this._timepickerInput = void 0;
    };
    /**
     * @param {?} time
     * @return {?}
     */
    NgxMatTimepickerComponent.prototype.updateTime = /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this.timeUpdated.next(time);
    };
    NgxMatTimepickerComponent.nextId = 0;
    NgxMatTimepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ngx-mat-timepicker",
                    template: "\n\t\t<ng-template\n\t\t\t\tcdkConnectedOverlay\n\t\t\t\t[cdkConnectedOverlayPositions]=\"overlayPositions\"\n\t\t\t\t[cdkConnectedOverlayHasBackdrop]=\"!0\"\n\t\t\t\tcdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n\t\t\t\t(backdropClick)=\"close()\"\n\t\t\t\t[cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n\t\t\t\t[cdkConnectedOverlayOpen]=\"showPicker\">\n\t\t\t<ngx-mat-timepicker-standalone></ngx-mat-timepicker-standalone>\n\t\t</ng-template>",
                    providers: [
                        {
                            provide: NGX_MAT_TIMEPICKER_CONFIG,
                            useFactory: /**
                             * @return {?}
                             */
                            function () {
                                return config;
                            }
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    NgxMatTimepickerComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: NgxMatTimepickerEventService },
        { type: MatDialog },
        { type: Overlay },
        { type: SmpDomService }
    ]; };
    NgxMatTimepickerComponent.propDecorators = {
        color: [{ type: Input }],
        format: [{ type: Input }],
        minutesGap: [{ type: Input }],
        appendToInput: [{ type: Input }],
        cancelBtnTmpl: [{ type: Input }],
        closed: [{ type: Output }],
        confirmBtnTmpl: [{ type: Input }],
        defaultTime: [{ type: Input }],
        disableAnimation: [{ type: Input }],
        editableHintTmpl: [{ type: Input }],
        enableKeyboardInput: [{ type: Input }],
        hourSelected: [{ type: Output }],
        hoursOnly: [{ type: Input }],
        id: [{ type: HostBinding, args: ["id",] }],
        isEsc: [{ type: Input }],
        max: [{ type: Input }],
        min: [{ type: Input }],
        opened: [{ type: Output }],
        preventOverlayClick: [{ type: Input }],
        theme: [{ type: Input }],
        timeChanged: [{ type: Output }],
        timepickerClass: [{ type: Input }],
        timeSet: [{ type: Output }]
    };
    return NgxMatTimepickerComponent;
}());
export { NgxMatTimepickerComponent };
if (false) {
    /** @type {?} */
    NgxMatTimepickerComponent.nextId;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.appendToInput;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.cancelBtnTmpl;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.closed;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.confirmBtnTmpl;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.defaultTime;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.disableAnimation;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.editableHintTmpl;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.enableKeyboardInput;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.hourSelected;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.hoursOnly;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.id;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.isEsc;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.max;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.min;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.opened;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.overlayPositions;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.preventOverlayClick;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.showPicker;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.theme;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.timeChanged;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.timepickerClass;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.timeSet;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.timeUpdated;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._dialogRef;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._format;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._minutesGap;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._ngxMatTimepickerTheme;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._overlayRef;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._timepickerInput;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._vcr;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._eventService;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._dialog;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._domService;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { Component, Inject, ViewEncapsulation } from "@angular/core";
import { MAT_DIALOG_DATA, MatDialogRef } from "@angular/material/dialog";
//
import { NgxMatTimepickerBaseDirective } from "../../directives/ngx-mat-timepicker-base.directive";
import { NGX_MAT_TIMEPICKER_LOCALE } from "../../tokens/ngx-mat-timepicker-time-locale.token";
import { NgxMatTimepickerService } from "../../services/ngx-mat-timepicker.service";
import { NgxMatTimepickerEventService } from "../../services/ngx-mat-timepicker-event.service";
//
var NgxMatTimepickerDialogComponent = /** @class */ (function (_super) {
    __extends(NgxMatTimepickerDialogComponent, _super);
    function NgxMatTimepickerDialogComponent(data, _dialogRef, timepickerSrv, eventSrv, locale) {
        var _this = _super.call(this, timepickerSrv, eventSrv, locale, data) || this;
        _this.data = data;
        _this._dialogRef = _dialogRef;
        return _this;
    }
    /**
     * @return {?}
     */
    NgxMatTimepickerDialogComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this._dialogRef.close();
    };
    NgxMatTimepickerDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: "ngx-mat-timepicker-dialog",
                    template: "<ng-template #cancelBtnDefault>\n    <button mat-button\n            [color]=\"color\">CANCEL\n    </button>\n</ng-template>\n<ng-template #confirmBtnDefault>\n    <button mat-button\n            [color]=\"color\">OK\n    </button>\n</ng-template>\n<div mat-dialog-content>\n    <ngx-mat-timepicker-content [appendToInput]=\"data.appendToInput\"\n                                [inputElement]=\"data.inputElement\"\n                                [ngxMatTimepickerTheme]=\"data.theme\">\n        <div class=\"timepicker\"\n             [ngClass]=\"data.timepickerClass\">\n            <mat-toolbar [color]=\"color\"\n                         class=\"timepicker-header\">\n                <ngx-mat-timepicker-dial [color]=\"color\"\n                                         [format]=\"data.format\"\n                                         [hour]=\"(selectedHour | async)?.time\"\n                                         [minute]=\"(selectedMinute | async)?.time\"\n                                         [period]=\"selectedPeriod | async\"\n                                         [activeTimeUnit]=\"activeTimeUnit\"\n                                         [minTime]=\"data.minTime\"\n                                         [maxTime]=\"data.maxTime\"\n                                         [isEditable]=\"data.enableKeyboardInput\"\n                                         [editableHintTmpl]=\"data.editableHintTmpl\"\n                                         [minutesGap]=\"data.minutesGap\"\n                                         [hoursOnly]=\"data.hoursOnly\"\n                                         (periodChanged)=\"changePeriod($event)\"\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\n                                         (hourChanged)=\"onHourChange($event)\"\n                                         (minuteChanged)=\"onMinuteChange($event)\"\n                ></ngx-mat-timepicker-dial>\n            </mat-toolbar>\n            <div class=\"timepicker__main-content\">\n                <div class=\"timepicker__body\"\n                     [ngSwitch]=\"activeTimeUnit\">\n                    <div *ngSwitchCase=\"timeUnit.HOUR\">\n                        <ngx-mat-timepicker-24-hours-face *ngIf=\"data.format === 24;else ampmHours\"\n                                                          [color]=\"color\"\n                                                          (hourChange)=\"onHourChange($event)\"\n                                                          [selectedHour]=\"selectedHour | async\"\n                                                          [minTime]=\"data.minTime\"\n                                                          [maxTime]=\"data.maxTime\"\n                                                          [format]=\"data.format\"\n                                                          (hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-24-hours-face>\n                        <ng-template #ampmHours>\n                            <ngx-mat-timepicker-12-hours-face\n                                    [color]=\"color\"\n                                    (hourChange)=\"onHourChange($event)\"\n                                    [selectedHour]=\"selectedHour | async\"\n                                    [period]=\"selectedPeriod | async\"\n                                    [minTime]=\"data.minTime\"\n                                    [maxTime]=\"data.maxTime\"\n                                    (hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-12-hours-face>\n                        </ng-template>\n                    </div>\n                    <ngx-mat-timepicker-minutes-face *ngSwitchCase=\"timeUnit.MINUTE\"\n                                                     [color]=\"color\"\n                                                     [selectedMinute]=\"selectedMinute | async\"\n                                                     [selectedHour]=\"(selectedHour | async)?.time\"\n                                                     [minTime]=\"data.minTime\"\n                                                     [maxTime]=\"data.maxTime\"\n                                                     [format]=\"data.format\"\n                                                     [period]=\"selectedPeriod | async\"\n                                                     [minutesGap]=\"data.minutesGap\"\n                                                     (minuteChange)=\"onMinuteChange($event)\"></ngx-mat-timepicker-minutes-face>\n                </div>\n            </div>\n        </div>\n    </ngx-mat-timepicker-content>\n</div>\n<div mat-dialog-actions>\n    <div (click)=\"close()\">\n        <ng-container\n                *ngTemplateOutlet=\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\"></ng-container>\n    </div>\n    <div (click)=\"setTime()\">\n        <ng-container\n                *ngTemplateOutlet=\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\"></ng-container>\n    </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["div.ngx-mat-timepicker-dialog>mat-dialog-container.mat-dialog-container{padding-top:0}div.ngx-mat-timepicker-dialog>mat-dialog-container.mat-dialog-container .mat-dialog-content{padding:0;max-height:85vh}div.ngx-mat-timepicker-dialog>mat-dialog-container.mat-dialog-container .mat-dialog-content mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}div.ngx-mat-timepicker-dialog>mat-dialog-container.mat-dialog-container .mat-dialog-content .clock-face{margin:16px}div.ngx-mat-timepicker-dialog>mat-dialog-container.mat-dialog-container div[mat-dialog-actions]{justify-content:flex-end;display:flex}"]
                }] }
    ];
    /** @nocollapse */
    NgxMatTimepickerDialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
        { type: MatDialogRef },
        { type: NgxMatTimepickerService },
        { type: NgxMatTimepickerEventService },
        { type: String, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_LOCALE,] }] }
    ]; };
    return NgxMatTimepickerDialogComponent;
}(NgxMatTimepickerBaseDirective));
export { NgxMatTimepickerDialogComponent };
if (false) {
    /** @type {?} */
    NgxMatTimepickerDialogComponent.prototype.data;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerDialogComponent.prototype._dialogRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWF0LXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uZ3gtbWF0LXRpbWVwaWNrZXItZGlhbG9nL25neC1tYXQtdGltZXBpY2tlci1kaWFsb2cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFxQixpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN0RixPQUFPLEVBQUMsZUFBZSxFQUFFLFlBQVksRUFBQyxNQUFNLDBCQUEwQixDQUFDOztBQUV2RSxPQUFPLEVBQUMsNkJBQTZCLEVBQUMsTUFBTSxvREFBb0QsQ0FBQztBQUVqRyxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSxtREFBbUQsQ0FBQztBQUM1RixPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwyQ0FBMkMsQ0FBQztBQUNsRixPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSxpREFBaUQsQ0FBQzs7QUFJN0Y7SUFNcUQsbURBQTZCO0lBRTlFLHlDQUE0QyxJQUE0QixFQUNsRCxVQUF5RCxFQUNuRSxhQUFzQyxFQUN0QyxRQUFzQyxFQUNILE1BQWM7UUFKN0QsWUFNSSxrQkFBTSxhQUFhLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FDL0M7UUFQMkMsVUFBSSxHQUFKLElBQUksQ0FBd0I7UUFDbEQsZ0JBQVUsR0FBVixVQUFVLENBQStDOztJQU0vRSxDQUFDOzs7O0lBRUQsK0NBQUs7OztJQUFMO1FBQ0ksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM1QixDQUFDOztnQkFuQkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSwyQkFBMkI7b0JBRXJDLDgrSkFBeUQ7b0JBQ3pELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDeEM7Ozs7Z0RBR2dCLE1BQU0sU0FBQyxlQUFlO2dCQWxCZCxZQUFZO2dCQUs3Qix1QkFBdUI7Z0JBQ3ZCLDRCQUE0Qjs2Q0FnQm5CLE1BQU0sU0FBQyx5QkFBeUI7O0lBU2pELHNDQUFDO0NBQUEsQUFyQkQsQ0FNcUQsNkJBQTZCLEdBZWpGO1NBZlksK0JBQStCOzs7SUFFNUIsK0NBQTREOzs7OztJQUM1RCxxREFBbUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5qZWN0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgVmlld0VuY2Fwc3VsYXRpb259IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge01BVF9ESUFMT0dfREFUQSwgTWF0RGlhbG9nUmVmfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nXCI7XG4vL1xuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyQmFzZURpcmVjdGl2ZX0gZnJvbSBcIi4uLy4uL2RpcmVjdGl2ZXMvbmd4LW1hdC10aW1lcGlja2VyLWJhc2UuZGlyZWN0aXZlXCI7XG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJDb25maWd9IGZyb20gXCIuLi8uLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLWNvbmZpZy5pbnRlcmZhY2VcIjtcbmltcG9ydCB7TkdYX01BVF9USU1FUElDS0VSX0xPQ0FMRX0gZnJvbSBcIi4uLy4uL3Rva2Vucy9uZ3gtbWF0LXRpbWVwaWNrZXItdGltZS1sb2NhbGUudG9rZW5cIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclNlcnZpY2V9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9uZ3gtbWF0LXRpbWVwaWNrZXIuc2VydmljZVwiO1xuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyRXZlbnRTZXJ2aWNlfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvbmd4LW1hdC10aW1lcGlja2VyLWV2ZW50LnNlcnZpY2VcIjtcblxuLy9cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwibmd4LW1hdC10aW1lcGlja2VyLWRpYWxvZ1wiLFxuICAgIHN0eWxlVXJsczogW1wiLi9uZ3gtbWF0LXRpbWVwaWNrZXItZGlhbG9nLmNvbXBvbmVudC5zY3NzXCJdLFxuICAgIHRlbXBsYXRlVXJsOiBcIi4vbmd4LW1hdC10aW1lcGlja2VyLWRpYWxvZy5jb21wb25lbnQuaHRtbFwiLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgTmd4TWF0VGltZXBpY2tlckRpYWxvZ0NvbXBvbmVudCBleHRlbmRzIE5neE1hdFRpbWVwaWNrZXJCYXNlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBwdWJsaWMgZGF0YTogTmd4TWF0VGltZXBpY2tlckNvbmZpZyxcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgX2RpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPE5neE1hdFRpbWVwaWNrZXJEaWFsb2dDb21wb25lbnQ+LFxuICAgICAgICAgICAgICAgIHRpbWVwaWNrZXJTcnY6IE5neE1hdFRpbWVwaWNrZXJTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIGV2ZW50U3J2OiBOZ3hNYXRUaW1lcGlja2VyRXZlbnRTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIEBJbmplY3QoTkdYX01BVF9USU1FUElDS0VSX0xPQ0FMRSkgbG9jYWxlOiBzdHJpbmcpIHtcblxuICAgICAgICBzdXBlcih0aW1lcGlja2VyU3J2LCBldmVudFNydiwgbG9jYWxlLCBkYXRhKTtcbiAgICB9XG5cbiAgICBjbG9zZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fZGlhbG9nUmVmLmNsb3NlKCk7XG4gICAgfVxuXG59XG4iXX0=
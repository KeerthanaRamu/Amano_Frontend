/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/ngx-mat-timepicker-parser.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Pipe } from "@angular/core";
//
import { NGX_MAT_TIMEPICKER_LOCALE } from "../tokens/ngx-mat-timepicker-time-locale.token";
import { NgxMatTimepickerUnits } from "../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerMeasure } from "../models/ngx-mat-timepicker-measures.enum";
//
import { DateTime } from "ts-luxon";
var NgxMatTimepickerParserPipe = /** @class */ (function () {
    function NgxMatTimepickerParserPipe(_locale) {
        this._locale = _locale;
        this._numberingSystem = (/** @type {?} */ (DateTime.local().setLocale(this._locale).resolvedLocaleOpts().numberingSystem));
    }
    /**
     * @param {?} time
     * @param {?=} timeUnit
     * @return {?}
     */
    NgxMatTimepickerParserPipe.prototype.transform = /**
     * @param {?} time
     * @param {?=} timeUnit
     * @return {?}
     */
    function (time, timeUnit) {
        if (timeUnit === void 0) { timeUnit = NgxMatTimepickerUnits.HOUR; }
        if (time == null || time === "") {
            return "";
        }
        if (!isNaN(+time)) {
            return "" + time;
        }
        if (timeUnit === NgxMatTimepickerUnits.MINUTE) {
            return this._parseTime(time, "mm", NgxMatTimepickerMeasure.minute).toString();
        }
        return this._parseTime(time, "HH", NgxMatTimepickerMeasure.hour).toString();
    };
    /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} timeMeasure
     * @return {?}
     */
    NgxMatTimepickerParserPipe.prototype._parseTime = /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} timeMeasure
     * @return {?}
     */
    function (time, format, timeMeasure) {
        /** @type {?} */
        var parsedTime = DateTime.fromFormat(String(time), format, { numberingSystem: this._numberingSystem })[timeMeasure];
        if (!isNaN(parsedTime)) {
            return parsedTime;
        }
        throw new Error("Cannot parse time - " + time);
    };
    NgxMatTimepickerParserPipe.decorators = [
        { type: Pipe, args: [{
                    name: "ngxMatTimepickerParser"
                },] },
        { type: Injectable }
    ];
    /** @nocollapse */
    NgxMatTimepickerParserPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_LOCALE,] }] }
    ]; };
    return NgxMatTimepickerParserPipe;
}());
export { NgxMatTimepickerParserPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerParserPipe.prototype._numberingSystem;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerParserPipe.prototype._locale;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLXBhcnNlci5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hdC10aW1lcGlja2VyLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL25neC1tYXQtdGltZXBpY2tlci1wYXJzZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7O0FBRXRFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLGdEQUFnRCxDQUFDO0FBQ3pGLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHlDQUF5QyxDQUFDO0FBQzlFLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDRDQUE0QyxDQUFDOztBQUVuRixPQUFPLEVBQUMsUUFBUSxFQUFrQixNQUFNLFVBQVUsQ0FBQztBQUVuRDtJQVFJLG9DQUF1RCxPQUFlO1FBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNsRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsbUJBQUEsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxlQUFlLEVBQW1CLENBQUM7SUFDN0gsQ0FBQzs7Ozs7O0lBRUQsOENBQVM7Ozs7O0lBQVQsVUFBVSxJQUFxQixFQUFFLFFBQXFDO1FBQXJDLHlCQUFBLEVBQUEsV0FBVyxxQkFBcUIsQ0FBQyxJQUFJO1FBQ2xFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO1lBQzdCLE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDZixPQUFPLEtBQUcsSUFBTSxDQUFDO1NBQ3BCO1FBRUQsSUFBSSxRQUFRLEtBQUsscUJBQXFCLENBQUMsTUFBTSxFQUFFO1lBQzNDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2pGO1FBRUQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDaEYsQ0FBQzs7Ozs7Ozs7SUFFTywrQ0FBVTs7Ozs7OztJQUFsQixVQUFtQixJQUFxQixFQUFFLE1BQWMsRUFBRSxXQUFvQzs7WUFDcEYsVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUNuSCxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sVUFBVSxDQUFDO1NBQ3JCO1FBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBdUIsSUFBTSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Z0JBbkNKLElBQUksU0FBQztvQkFDRixJQUFJLEVBQUUsd0JBQXdCO2lCQUNqQztnQkFDQSxVQUFVOzs7OzZDQUtNLE1BQU0sU0FBQyx5QkFBeUI7O0lBNkJqRCxpQ0FBQztDQUFBLEFBckNELElBcUNDO1NBakNZLDBCQUEwQjs7Ozs7O0lBRW5DLHNEQUFtRDs7Ozs7SUFFdkMsNkNBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG4vL1xuaW1wb3J0IHtOR1hfTUFUX1RJTUVQSUNLRVJfTE9DQUxFfSBmcm9tIFwiLi4vdG9rZW5zL25neC1tYXQtdGltZXBpY2tlci10aW1lLWxvY2FsZS50b2tlblwiO1xuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyVW5pdHN9IGZyb20gXCIuLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLXVuaXRzLmVudW1cIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlck1lYXN1cmV9IGZyb20gXCIuLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLW1lYXN1cmVzLmVudW1cIjtcbi8vXG5pbXBvcnQge0RhdGVUaW1lLCBOdW1iZXJpbmdTeXN0ZW19IGZyb20gXCJ0cy1sdXhvblwiO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogXCJuZ3hNYXRUaW1lcGlja2VyUGFyc2VyXCJcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmd4TWF0VGltZXBpY2tlclBhcnNlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgX251bWJlcmluZ1N5c3RlbTogTnVtYmVyaW5nU3lzdGVtO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChOR1hfTUFUX1RJTUVQSUNLRVJfTE9DQUxFKSBwcml2YXRlIF9sb2NhbGU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9udW1iZXJpbmdTeXN0ZW0gPSBEYXRlVGltZS5sb2NhbCgpLnNldExvY2FsZSh0aGlzLl9sb2NhbGUpLnJlc29sdmVkTG9jYWxlT3B0cygpLm51bWJlcmluZ1N5c3RlbSBhcyBOdW1iZXJpbmdTeXN0ZW07XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtKHRpbWU6IHN0cmluZyB8IG51bWJlciwgdGltZVVuaXQgPSBOZ3hNYXRUaW1lcGlja2VyVW5pdHMuSE9VUik6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aW1lID09IG51bGwgfHwgdGltZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKCt0aW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGAke3RpbWV9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aW1lVW5pdCA9PT0gTmd4TWF0VGltZXBpY2tlclVuaXRzLk1JTlVURSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlVGltZSh0aW1lLCBcIm1tXCIsIE5neE1hdFRpbWVwaWNrZXJNZWFzdXJlLm1pbnV0ZSkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJzZVRpbWUodGltZSwgXCJISFwiLCBOZ3hNYXRUaW1lcGlja2VyTWVhc3VyZS5ob3VyKS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3BhcnNlVGltZSh0aW1lOiBzdHJpbmcgfCBudW1iZXIsIGZvcm1hdDogc3RyaW5nLCB0aW1lTWVhc3VyZTogTmd4TWF0VGltZXBpY2tlck1lYXN1cmUpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBwYXJzZWRUaW1lID0gRGF0ZVRpbWUuZnJvbUZvcm1hdChTdHJpbmcodGltZSksIGZvcm1hdCwge251bWJlcmluZ1N5c3RlbTogdGhpcy5fbnVtYmVyaW5nU3lzdGVtfSlbdGltZU1lYXN1cmVdO1xuICAgICAgICBpZiAoIWlzTmFOKHBhcnNlZFRpbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkVGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHBhcnNlIHRpbWUgLSAke3RpbWV9YCk7XG4gICAgfVxuXG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/ngx-mat-timepicker-time-localizer.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Pipe } from "@angular/core";
//
import { NGX_MAT_TIMEPICKER_LOCALE } from "../tokens/ngx-mat-timepicker-time-locale.token";
import { NgxMatTimepickerUnits } from "../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerMeasure } from "../models/ngx-mat-timepicker-measures.enum";
//
import { DateTime } from "ts-luxon";
var NgxMatTimepickerTimeLocalizerPipe = /** @class */ (function () {
    function NgxMatTimepickerTimeLocalizerPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} time
     * @param {?} timeUnit
     * @param {?=} isKeyboardEnabled
     * @return {?}
     */
    NgxMatTimepickerTimeLocalizerPipe.prototype.transform = /**
     * @param {?} time
     * @param {?} timeUnit
     * @param {?=} isKeyboardEnabled
     * @return {?}
     */
    function (time, timeUnit, isKeyboardEnabled) {
        if (isKeyboardEnabled === void 0) { isKeyboardEnabled = false; }
        if (time == null || time === "") {
            return "";
        }
        switch (timeUnit) {
            case NgxMatTimepickerUnits.HOUR: {
                /** @type {?} */
                var format = (time === 0 || isKeyboardEnabled) ? "HH" : "H";
                return this._formatTime(NgxMatTimepickerMeasure.hour, time, format);
            }
            case NgxMatTimepickerUnits.MINUTE:
                return this._formatTime(NgxMatTimepickerMeasure.minute, time, "mm");
            default:
                throw new Error("There is no Time Unit with type " + timeUnit);
        }
    };
    /**
     * @private
     * @param {?} timeMeasure
     * @param {?} time
     * @param {?} format
     * @return {?}
     */
    NgxMatTimepickerTimeLocalizerPipe.prototype._formatTime = /**
     * @private
     * @param {?} timeMeasure
     * @param {?} time
     * @param {?} format
     * @return {?}
     */
    function (timeMeasure, time, format) {
        var _a;
        try {
            return DateTime.fromObject((_a = {}, _a[timeMeasure] = +time, _a)).setLocale(this._locale).toFormat(format);
        }
        catch (_b) {
            throw new Error("Cannot format provided time - " + time + " to locale - " + this._locale);
        }
    };
    NgxMatTimepickerTimeLocalizerPipe.decorators = [
        { type: Pipe, args: [{
                    name: "timeLocalizer"
                },] }
    ];
    /** @nocollapse */
    NgxMatTimepickerTimeLocalizerPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_LOCALE,] }] }
    ]; };
    return NgxMatTimepickerTimeLocalizerPipe;
}());
export { NgxMatTimepickerTimeLocalizerPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerTimeLocalizerPipe.prototype._locale;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLXRpbWUtbG9jYWxpemVyLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWF0LXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvbmd4LW1hdC10aW1lcGlja2VyLXRpbWUtbG9jYWxpemVyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7O0FBRTFELE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLGdEQUFnRCxDQUFDO0FBQ3pGLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHlDQUF5QyxDQUFDO0FBQzlFLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDRDQUE0QyxDQUFDOztBQUVuRixPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBRWxDO0lBS0ksMkNBQXVELE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO0lBQ3RFLENBQUM7Ozs7Ozs7SUFFRCxxREFBUzs7Ozs7O0lBQVQsVUFBVSxJQUFxQixFQUFFLFFBQStCLEVBQUUsaUJBQXlCO1FBQXpCLGtDQUFBLEVBQUEseUJBQXlCO1FBQ3ZGLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO1lBQzdCLE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFFRCxRQUFRLFFBQVEsRUFBRTtZQUNkLEtBQUsscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7O29CQUN2QixNQUFNLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRztnQkFFN0QsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDdkU7WUFDRCxLQUFLLHFCQUFxQixDQUFDLE1BQU07Z0JBQzdCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3hFO2dCQUNJLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQW1DLFFBQVUsQ0FBQyxDQUFDO1NBQ3RFO0lBQ0wsQ0FBQzs7Ozs7Ozs7SUFFTyx1REFBVzs7Ozs7OztJQUFuQixVQUFvQixXQUFvQyxFQUFFLElBQXFCLEVBQUUsTUFBYzs7UUFDM0YsSUFBSTtZQUNBLE9BQU8sUUFBUSxDQUFDLFVBQVUsV0FBRSxHQUFDLFdBQVcsSUFBRyxDQUFDLElBQUksTUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQy9GO1FBQUMsV0FBTTtZQUNKLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQWlDLElBQUkscUJBQWdCLElBQUksQ0FBQyxPQUFTLENBQUMsQ0FBQztTQUN4RjtJQUNMLENBQUM7O2dCQWhDSixJQUFJLFNBQUM7b0JBQ0YsSUFBSSxFQUFFLGVBQWU7aUJBQ3hCOzs7OzZDQUdnQixNQUFNLFNBQUMseUJBQXlCOztJQTRCakQsd0NBQUM7Q0FBQSxBQWpDRCxJQWlDQztTQTlCWSxpQ0FBaUM7Ozs7OztJQUU5QixvREFBMEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgUGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbi8vXG5pbXBvcnQge05HWF9NQVRfVElNRVBJQ0tFUl9MT0NBTEV9IGZyb20gXCIuLi90b2tlbnMvbmd4LW1hdC10aW1lcGlja2VyLXRpbWUtbG9jYWxlLnRva2VuXCI7XG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJVbml0c30gZnJvbSBcIi4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItdW5pdHMuZW51bVwiO1xuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyTWVhc3VyZX0gZnJvbSBcIi4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItbWVhc3VyZXMuZW51bVwiO1xuLy9cbmltcG9ydCB7RGF0ZVRpbWV9IGZyb20gXCJ0cy1sdXhvblwiO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogXCJ0aW1lTG9jYWxpemVyXCJcbn0pXG5leHBvcnQgY2xhc3MgTmd4TWF0VGltZXBpY2tlclRpbWVMb2NhbGl6ZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KE5HWF9NQVRfVElNRVBJQ0tFUl9MT0NBTEUpIHByaXZhdGUgX2xvY2FsZTogc3RyaW5nKSB7XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtKHRpbWU6IG51bWJlciB8IHN0cmluZywgdGltZVVuaXQ6IE5neE1hdFRpbWVwaWNrZXJVbml0cywgaXNLZXlib2FyZEVuYWJsZWQgPSBmYWxzZSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aW1lID09IG51bGwgfHwgdGltZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHRpbWVVbml0KSB7XG4gICAgICAgICAgICBjYXNlIE5neE1hdFRpbWVwaWNrZXJVbml0cy5IT1VSOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gKHRpbWUgPT09IDAgfHwgaXNLZXlib2FyZEVuYWJsZWQpID8gXCJISFwiIDogXCJIXCI7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0VGltZShOZ3hNYXRUaW1lcGlja2VyTWVhc3VyZS5ob3VyLCB0aW1lLCBmb3JtYXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBOZ3hNYXRUaW1lcGlja2VyVW5pdHMuTUlOVVRFOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXRUaW1lKE5neE1hdFRpbWVwaWNrZXJNZWFzdXJlLm1pbnV0ZSwgdGltZSwgXCJtbVwiKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSBpcyBubyBUaW1lIFVuaXQgd2l0aCB0eXBlICR7dGltZVVuaXR9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9mb3JtYXRUaW1lKHRpbWVNZWFzdXJlOiBOZ3hNYXRUaW1lcGlja2VyTWVhc3VyZSwgdGltZTogc3RyaW5nIHwgbnVtYmVyLCBmb3JtYXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbU9iamVjdCh7W3RpbWVNZWFzdXJlXTogK3RpbWV9KS5zZXRMb2NhbGUodGhpcy5fbG9jYWxlKS50b0Zvcm1hdChmb3JtYXQpO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZvcm1hdCBwcm92aWRlZCB0aW1lIC0gJHt0aW1lfSB0byBsb2NhbGUgLSAke3RoaXMuX2xvY2FsZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
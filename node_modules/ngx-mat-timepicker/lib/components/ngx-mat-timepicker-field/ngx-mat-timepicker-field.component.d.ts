import { EventEmitter, OnDestroy, OnInit, TemplateRef } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
import { MatSelectChange } from "@angular/material/select";
import { ThemePalette } from "@angular/material/core";
import { FloatLabelType } from "@angular/material/form-field";
import { NgxMatTimepickerService } from "../../services/ngx-mat-timepicker.service";
import { NgxMatTimepickerClockFace } from "../../models/ngx-mat-timepicker-clock-face.interface";
import { NgxMatTimepickerPeriods } from "../../models/ngx-mat-timepicker-periods.enum";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerTheme } from "../../models/ngx-mat-timepicker-theme.interface";
import { DateTime } from "ts-luxon";
import { Observable } from "rxjs";
import * as ɵngcc0 from '@angular/core';
export declare class NgxMatTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {
    private _timepickerService;
    private _locale;
    get color(): ThemePalette;
    set color(newValue: ThemePalette);
    get defaultTime(): string;
    set defaultTime(val: string);
    get floatLabel(): FloatLabelType;
    set floatLabel(newValue: FloatLabelType);
    get format(): number;
    set format(value: number);
    get max(): string | DateTime;
    set max(value: string | DateTime);
    get min(): string | DateTime;
    set min(value: string | DateTime);
    cancelBtnTmpl: TemplateRef<Node>;
    clockTheme: NgxMatTimepickerTheme;
    confirmBtnTmpl: TemplateRef<Node>;
    controlOnly: boolean;
    disabled: boolean;
    hour$: Observable<NgxMatTimepickerClockFace>;
    hoursList: NgxMatTimepickerClockFace[];
    isChangePeriodDisabled: boolean;
    isTimeRangeSet: boolean;
    maxHour: number;
    minHour: number;
    minute$: Observable<NgxMatTimepickerClockFace>;
    minutesList: NgxMatTimepickerClockFace[];
    period: NgxMatTimepickerPeriods;
    periods: NgxMatTimepickerPeriods[];
    timeChanged: EventEmitter<string>;
    timepickerTime: string;
    timeUnit: typeof NgxMatTimepickerUnits;
    toggleIcon: TemplateRef<HTMLObjectElement>;
    private _color;
    private _defaultTime;
    private _floatLabel;
    private _format;
    private _isDefaultTime;
    private _isFirstTimeChange;
    private _max;
    private _min;
    private _previousFormat;
    private _selectedHour;
    private _subsCtrl$;
    constructor(_timepickerService: NgxMatTimepickerService, _locale: string);
    changeHour(hour: number): void;
    changeMinute(minute: number): void;
    changePeriod(event: MatSelectChange): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    onTimeSet(time: string): void;
    registerOnChange(fn: any): void;
    registerOnTouched(_fn_: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(val: string): void;
    private _changeDefaultTimeValue;
    private _changeTime;
    private _emitLocalTimeChange;
    private _initTime;
    private _isPeriodDisabled;
    private _onChange;
    private _resetTime;
    private _updateAvailableHours;
    private _updateAvailableMinutes;
    private _updateAvailableTime;
    private _updateTime;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<NgxMatTimepickerFieldComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<NgxMatTimepickerFieldComponent, "ngx-mat-timepicker-field", never, { "color": "color"; "defaultTime": "defaultTime"; "floatLabel": "floatLabel"; "format": "format"; "max": "max"; "min": "min"; "disabled": "disabled"; "cancelBtnTmpl": "cancelBtnTmpl"; "clockTheme": "clockTheme"; "confirmBtnTmpl": "confirmBtnTmpl"; "controlOnly": "controlOnly"; "toggleIcon": "toggleIcon"; }, { "timeChanged": "timeChanged"; }, never, never>;
}

//# sourceMappingURL=ngx-mat-timepicker-field.component.d.ts.map
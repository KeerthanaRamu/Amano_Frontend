import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from "@angular/core";
import { ThemePalette } from "@angular/material/core";
import { NgxMatTimepickerClockFace } from "../../models/ngx-mat-timepicker-clock-face.interface";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import * as ɵngcc0 from '@angular/core';
export declare class NgxMatTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {
    clockFace: ElementRef;
    clockHand: ElementRef;
    color: ThemePalette;
    faceTime: NgxMatTimepickerClockFace[];
    format: number;
    innerClockFaceSize: number;
    isClockFaceDisabled: boolean;
    minutesGap: number;
    selectedTime: NgxMatTimepickerClockFace;
    timeChange: EventEmitter<NgxMatTimepickerClockFace>;
    timeSelected: EventEmitter<number>;
    timeUnit: typeof NgxMatTimepickerUnits;
    unit: NgxMatTimepickerUnits;
    private _isStarted;
    private _touchEndHandler;
    private _touchStartHandler;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onMousedown(e: any): void;
    onMouseup(e: any): void;
    selectTime(e: any): void;
    trackByTime(_item_: any, time: NgxMatTimepickerClockFace): string | number;
    private _addTouchEvents;
    private _decreaseClockHand;
    private _increaseClockHand;
    private _isInnerClockFace;
    private _removeTouchEvents;
    private _selectAvailableTime;
    private _setClockHandPosition;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<NgxMatTimepickerFaceComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<NgxMatTimepickerFaceComponent, "ngx-mat-timepicker-face", never, { "color": "color"; "selectedTime": "selectedTime"; "faceTime": "faceTime"; "format": "format"; "minutesGap": "minutesGap"; "unit": "unit"; }, { "timeChange": "timeChange"; "timeSelected": "timeSelected"; }, never, ["*", "*"]>;
}

//# sourceMappingURL=ngx-mat-timepicker-face.component.d.ts.map
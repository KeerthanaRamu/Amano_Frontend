import { EventEmitter, TemplateRef, ViewContainerRef } from "@angular/core";
import { CdkOverlayOrigin, ConnectedPosition, Overlay } from "@angular/cdk/overlay";
import { MatDialog } from "@angular/material/dialog";
import { ThemePalette } from "@angular/material/core";
import { SmpDomService } from "smp-core-utils";
import { NgxMatTimepickerEventService } from "../../services/ngx-mat-timepicker-event.service";
import { NgxMatTimepickerDirective } from "../../directives/ngx-mat-timepicker.directive";
import { NgxMatTimepickerRef } from "../../models/ngx-mat-timepicker-ref.interface";
import { NgxMatTimepickerTheme } from "../../models/ngx-mat-timepicker-theme.interface";
import { DateTime } from "ts-luxon";
import { Subject } from "rxjs";
export declare class NgxMatTimepickerComponent implements NgxMatTimepickerRef {
    private _vcr;
    private _eventService;
    private _dialog;
    private _overlay;
    private _domService;
    static nextId: number;
    set color(newValue: ThemePalette);
    get color(): ThemePalette;
    get disabled(): boolean;
    get format(): number;
    set format(value: number);
    get inputElement(): HTMLElement;
    get maxTime(): DateTime;
    get minTime(): DateTime;
    get minutesGap(): number;
    set minutesGap(gap: number);
    get overlayOrigin(): CdkOverlayOrigin;
    get time(): string;
    set ngxMatTimepickerTheme(newValue: NgxMatTimepickerTheme);
    appendToInput: boolean;
    cancelBtnTmpl: TemplateRef<Node>;
    closed: EventEmitter<void>;
    confirmBtnTmpl: TemplateRef<Node>;
    defaultTime: string;
    disableAnimation: boolean;
    editableHintTmpl: TemplateRef<Node>;
    enableKeyboardInput: boolean;
    hourSelected: EventEmitter<number>;
    hoursOnly: boolean;
    id: string;
    isEsc: boolean;
    max: DateTime;
    min: DateTime;
    opened: EventEmitter<void>;
    overlayPositions: ConnectedPosition[];
    preventOverlayClick: boolean;
    showPicker: boolean;
    theme: NgxMatTimepickerTheme;
    timeChanged: EventEmitter<string>;
    timepickerClass: string;
    timeSet: EventEmitter<string>;
    timeUpdated: Subject<string>;
    private _color;
    private _dialogRef;
    private _format;
    private _minutesGap;
    private _ngxMatTimepickerTheme;
    private _overlayRef;
    private _timepickerInput;
    constructor(_vcr: ViewContainerRef, _eventService: NgxMatTimepickerEventService, _dialog: MatDialog, _overlay: Overlay, _domService: SmpDomService);
    close(): void;
    open(): void;
    /***
     * Register an input with this timepicker.
     * input - The timepicker input to register with this timepicker
     */
    registerInput(input: NgxMatTimepickerDirective): void;
    unregisterInput(): void;
    updateTime(time: string): void;
}

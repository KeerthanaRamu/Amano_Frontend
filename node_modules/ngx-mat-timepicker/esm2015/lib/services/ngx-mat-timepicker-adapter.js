/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ngx-mat-timepicker-adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgxMatTimepickerFormat } from "../models/ngx-mat-timepicker-format.enum";
import { NgxMatTimepickerPeriods } from "../models/ngx-mat-timepicker-periods.enum";
//
import { DateTime } from "ts-luxon";
// @dynamic
export class NgxMatTimepickerAdapter {
    /**
     *
     *  Format hour according to time format (12 or 24)
     * @param {?} currentHour
     * @param {?} format
     * @param {?} period
     * @return {?}
     */
    static formatHour(currentHour, format, period) {
        if (format === 24) {
            return currentHour;
        }
        /** @type {?} */
        const hour = period === NgxMatTimepickerPeriods.AM ? currentHour : currentHour + 12;
        if (period === NgxMatTimepickerPeriods.AM && hour === 12) {
            return 0;
        }
        else if (period === NgxMatTimepickerPeriods.PM && hour === 24) {
            return 12;
        }
        return hour;
    }
    /**
     * @param {?} time
     * @param {?} opts
     * @return {?}
     */
    static formatTime(time, opts) {
        if (!time) {
            return "Invalid Time";
        }
        const { format } = opts;
        /** @type {?} */
        const parsedTime = NgxMatTimepickerAdapter.parseTime(time, opts).setLocale(NgxMatTimepickerAdapter.defaultLocale);
        if (format !== 24) {
            return parsedTime.toLocaleString(Object.assign(Object.assign({}, DateTime.TIME_SIMPLE), { hour12: format !== 24 })).replace(/\u200E/g, "");
        }
        return parsedTime.toISOTime({
            includeOffset: false,
            suppressMilliseconds: true,
            suppressSeconds: true
        }).replace(/\u200E/g, "");
    }
    /**
     * @param {?} time
     * @param {?} format
     * @return {?}
     */
    static fromDateTimeToString(time, format) {
        /** @type {?} */
        const timeFormat = format === 24 ? NgxMatTimepickerFormat.TWENTY_FOUR : NgxMatTimepickerFormat.TWELVE;
        return time.reconfigure({
            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,
            locale: NgxMatTimepickerAdapter.defaultLocale
        }).toFormat(timeFormat);
    }
    /**
     * @param {?} time
     * @param {?} before
     * @param {?} after
     * @param {?=} unit
     * @return {?}
     */
    static isBetween(time, before, after, unit = "minutes") {
        if (unit === "hours") {
            return this.isSameOrBefore(time, after, unit) && this.isSameOrAfter(time, before, unit);
        }
        if (unit === "minutes") {
            return this.isSameOrBefore(time, after) && this.isSameOrAfter(time, before);
        }
    }
    /**
     * @param {?} time
     * @param {?} compareWith
     * @param {?=} unit
     * @return {?}
     */
    static isSameOrAfter(time, compareWith, unit = "minutes") {
        if (unit === "hours") {
            return time.hour >= compareWith.hour;
        }
        if (unit === "minutes") {
            return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();
        }
    }
    /**
     * @param {?} time
     * @param {?} compareWith
     * @param {?=} unit
     * @return {?}
     */
    static isSameOrBefore(time, compareWith, unit = "minutes") {
        if (unit === "hours") {
            return time.hour <= compareWith.hour;
        }
        if (unit === "minutes") {
            return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();
        }
    }
    /**
     * @param {?} time
     * @param {?=} min
     * @param {?=} max
     * @param {?=} granularity
     * @param {?=} minutesGap
     * @param {?=} format
     * @return {?}
     */
    static isTimeAvailable(time, min, max, granularity, minutesGap, format) {
        if (!time) {
            return;
        }
        /** @type {?} */
        const convertedTime = this.parseTime(time, { format });
        /** @type {?} */
        const minutes = convertedTime.minute;
        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {
            throw new Error(`Your minutes - ${minutes} doesn\'t match your minutesGap - ${minutesGap}`);
        }
        /** @type {?} */
        const isAfter = (min && !max)
            && this.isSameOrAfter(convertedTime, min, granularity);
        /** @type {?} */
        const isBefore = (max && !min)
            && this.isSameOrBefore(convertedTime, max, granularity);
        /** @type {?} */
        const between = (min && max)
            && this.isBetween(convertedTime, min, max, granularity);
        /** @type {?} */
        const isAvailable = !min && !max;
        return isAfter || isBefore || between || isAvailable;
    }
    /**
     * @param {?} time
     * @param {?} opts
     * @return {?}
     */
    static parseTime(time, opts) {
        const { numberingSystem, locale } = NgxMatTimepickerAdapter._getLocaleOptionsByTime(time, opts);
        /** @type {?} */
        const isPeriodExist = time.split(" ").length === 2;
        /** @type {?} */
        const timeMask = isPeriodExist ? NgxMatTimepickerFormat.TWELVE_SHORT : NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;
        return DateTime.fromFormat(time, timeMask, { numberingSystem, locale });
    }
    /**
     * @param {?} time
     * @param {?=} opts
     * @return {?}
     */
    static toLocaleTimeString(time, opts = {}) {
        const { format = NgxMatTimepickerAdapter.defaultFormat, locale = NgxMatTimepickerAdapter.defaultLocale } = opts;
        /** @type {?} */
        const hourCycle = format === 24 ? "h23" : "h12";
        /** @type {?} */
        const timeFormat = Object.assign(Object.assign({}, DateTime.TIME_SIMPLE), { hourCycle });
        /** @type {?} */
        const timeMask = (format === 24) ? NgxMatTimepickerFormat.TWENTY_FOUR_SHORT : NgxMatTimepickerFormat.TWELVE_SHORT;
        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);
    }
    /**
     * @private
     * @param {?} time
     * @param {?} opts
     * @return {?}
     */
    static _getLocaleOptionsByTime(time, opts) {
        const { numberingSystem, locale } = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();
        /** @type {?} */
        const localeConfig = {
            numberingSystem: (/** @type {?} */ (numberingSystem)),
            locale
        };
        /** @type {?} */
        const defaultConfig = {
            numberingSystem: NgxMatTimepickerAdapter.defaultNumberingSistem,
            locale: NgxMatTimepickerAdapter.defaultLocale
        };
        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;
    }
}
NgxMatTimepickerAdapter.defaultFormat = 12;
NgxMatTimepickerAdapter.defaultLocale = "en-US";
NgxMatTimepickerAdapter.defaultNumberingSistem = "latn";
if (false) {
    /** @type {?} */
    NgxMatTimepickerAdapter.defaultFormat;
    /** @type {?} */
    NgxMatTimepickerAdapter.defaultLocale;
    /** @type {?} */
    NgxMatTimepickerAdapter.defaultNumberingSistem;
}
//# sourceMappingURL=data:application/json;base64,
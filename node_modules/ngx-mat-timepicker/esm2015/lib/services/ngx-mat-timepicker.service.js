/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ngx-mat-timepicker.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { BehaviorSubject } from "rxjs";
import { NgxMatTimepickerPeriods } from "../models/ngx-mat-timepicker-periods.enum";
import { NgxMatTimepickerAdapter } from "./ngx-mat-timepicker-adapter";
import { DateTime } from "ts-luxon";
import * as i0 from "@angular/core";
/** @type {?} */
const DEFAULT_HOUR = {
    time: 12,
    angle: 360
};
/** @type {?} */
const DEFAULT_MINUTE = {
    time: 0,
    angle: 360
};
export class NgxMatTimepickerService {
    constructor() {
        this._hour$ = new BehaviorSubject(DEFAULT_HOUR);
        this._minute$ = new BehaviorSubject(DEFAULT_MINUTE);
        this._period$ = new BehaviorSubject(NgxMatTimepickerPeriods.AM);
    }
    /**
     * @param {?} hour
     * @return {?}
     */
    set hour(hour) {
        this._hour$.next(hour);
    }
    /**
     * @param {?} minute
     * @return {?}
     */
    set minute(minute) {
        this._minute$.next(minute);
    }
    /**
     * @param {?} period
     * @return {?}
     */
    set period(period) {
        /** @type {?} */
        const isPeriodValid = (period === NgxMatTimepickerPeriods.AM) || (period === NgxMatTimepickerPeriods.PM);
        if (isPeriodValid) {
            this._period$.next(period);
        }
    }
    /**
     * @return {?}
     */
    get selectedHour() {
        return this._hour$.asObservable();
    }
    /**
     * @return {?}
     */
    get selectedMinute() {
        return this._minute$.asObservable();
    }
    /**
     * @return {?}
     */
    get selectedPeriod() {
        return this._period$.asObservable();
    }
    /**
     * @param {?} format
     * @return {?}
     */
    getFullTime(format) {
        /** @type {?} */
        const selectedHour = this._hour$.getValue().time;
        /** @type {?} */
        const selectedMinute = this._minute$.getValue().time;
        /** @type {?} */
        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;
        /** @type {?} */
        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;
        /** @type {?} */
        const period = format === 12 ? this._period$.getValue() : "";
        /** @type {?} */
        const time = `${hour}:${minute} ${period}`.trim();
        return NgxMatTimepickerAdapter.formatTime(time, { format });
    }
    /**
     * @param {?} time
     * @param {?} min
     * @param {?} max
     * @param {?} format
     * @param {?=} minutesGap
     * @return {?}
     */
    setDefaultTimeIfAvailable(time, min, max, format, minutesGap) {
        /* Workaround to double error message*/
        try {
            if (NgxMatTimepickerAdapter.isTimeAvailable(time, min, max, "minutes", minutesGap)) {
                this._setDefaultTime(time, format);
            }
        }
        catch (e) {
            console.error(e);
        }
    }
    /**
     * @private
     * @return {?}
     */
    _resetTime() {
        this.hour = Object.assign({}, DEFAULT_HOUR);
        this.minute = Object.assign({}, DEFAULT_MINUTE);
        this.period = NgxMatTimepickerPeriods.AM;
    }
    /**
     * @private
     * @param {?} time
     * @param {?} format
     * @return {?}
     */
    _setDefaultTime(time, format) {
        /** @type {?} */
        const defaultTime = NgxMatTimepickerAdapter.parseTime(time, { format }).toJSDate();
        // Check on null, because invalid date will be null
        if (DateTime.fromJSDate(defaultTime) !== null) {
            /** @type {?} */
            const period = time.substr(time.length - 2).toUpperCase();
            /** @type {?} */
            const hour = defaultTime.getHours();
            this.hour = Object.assign(Object.assign({}, DEFAULT_HOUR), { time: formatHourByPeriod(hour, (/** @type {?} */ (period))) });
            this.minute = Object.assign(Object.assign({}, DEFAULT_MINUTE), { time: defaultTime.getMinutes() });
            this.period = (/** @type {?} */ (period));
        }
        else {
            this._resetTime();
        }
    }
}
NgxMatTimepickerService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
/** @nocollapse */ NgxMatTimepickerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxMatTimepickerService_Factory() { return new NgxMatTimepickerService(); }, token: NgxMatTimepickerService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerService.prototype._hour$;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerService.prototype._minute$;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerService.prototype._period$;
}
/**
 *
 *  Format hour in 24hours format to meridian (AM or PM) format
 * @param {?} hour
 * @param {?} period
 * @return {?}
 */
function formatHourByPeriod(hour, period) {
    switch (period) {
        case NgxMatTimepickerPeriods.AM:
            return hour === 0 ? 12 : hour;
        case NgxMatTimepickerPeriods.PM:
            return hour === 12 ? 12 : hour - 12;
        default:
            return hour;
    }
}
//# sourceMappingURL=data:application/json;base64,
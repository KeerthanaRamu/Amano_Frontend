/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ngx-mat-timepicker-event.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
//
import { Subject } from "rxjs";
import { shareReplay } from "rxjs/operators";
import * as i0 from "@angular/core";
export class NgxMatTimepickerEventService {
    constructor() {
        this._backdropClick$ = new Subject();
        this._keydownEvent$ = new Subject();
    }
    /**
     * @return {?}
     */
    get backdropClick() {
        return this._backdropClick$.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: true }));
    }
    /**
     * @return {?}
     */
    get keydownEvent() {
        return this._keydownEvent$.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: true }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dispatchEvent(event) {
        switch (event.type) {
            case "click":
                this._backdropClick$.next((/** @type {?} */ (event)));
                break;
            case "keydown":
                this._keydownEvent$.next((/** @type {?} */ (event)));
                break;
            default:
                throw new Error("no such event type");
        }
    }
}
NgxMatTimepickerEventService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
/** @nocollapse */
NgxMatTimepickerEventService.ctorParameters = () => [];
/** @nocollapse */ NgxMatTimepickerEventService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxMatTimepickerEventService_Factory() { return new NgxMatTimepickerEventService(); }, token: NgxMatTimepickerEventService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerEventService.prototype._backdropClick$;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerEventService.prototype._keydownEvent$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWV2ZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWF0LXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbmd4LW1hdC10aW1lcGlja2VyLWV2ZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDOztBQUV6QyxPQUFPLEVBQWEsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLM0MsTUFBTSxPQUFPLDRCQUE0QjtJQWFyQztRQUhRLG9CQUFlLEdBQXdCLElBQUksT0FBTyxFQUFFLENBQUM7UUFDckQsbUJBQWMsR0FBMkIsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUcvRCxDQUFDOzs7O0lBWkQsSUFBSSxhQUFhO1FBQ2IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEcsQ0FBQzs7OztJQUVELElBQUksWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7Ozs7O0lBUUQsYUFBYSxDQUFDLEtBQWlDO1FBQzNDLFFBQVEsS0FBSyxDQUFDLElBQUksRUFBRTtZQUNoQixLQUFLLE9BQU87Z0JBQ1IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsbUJBQUEsS0FBSyxFQUFjLENBQUMsQ0FBQztnQkFDL0MsTUFBTTtZQUNWLEtBQUssU0FBUztnQkFDVixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxtQkFBQSxLQUFLLEVBQWlCLENBQUMsQ0FBQztnQkFDakQsTUFBTTtZQUNWO2dCQUNJLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUM3QztJQUNMLENBQUM7OztZQTlCSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7Ozs7Ozs7SUFXRyx1REFBNkQ7Ozs7O0lBQzdELHNEQUErRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbi8vXG5pbXBvcnQge09ic2VydmFibGUsIFN1YmplY3R9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQge3NoYXJlUmVwbGF5fSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46IFwicm9vdFwiXG59KVxuZXhwb3J0IGNsYXNzIE5neE1hdFRpbWVwaWNrZXJFdmVudFNlcnZpY2Uge1xuXG4gICAgZ2V0IGJhY2tkcm9wQ2xpY2soKTogT2JzZXJ2YWJsZTxNb3VzZUV2ZW50PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZHJvcENsaWNrJC5hc09ic2VydmFibGUoKS5waXBlKHNoYXJlUmVwbGF5KHtidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZX0pKTtcbiAgICB9XG5cbiAgICBnZXQga2V5ZG93bkV2ZW50KCk6IE9ic2VydmFibGU8S2V5Ym9hcmRFdmVudD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fa2V5ZG93bkV2ZW50JC5hc09ic2VydmFibGUoKS5waXBlKHNoYXJlUmVwbGF5KHtidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZX0pKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9iYWNrZHJvcENsaWNrJDogU3ViamVjdDxNb3VzZUV2ZW50PiA9IG5ldyBTdWJqZWN0KCk7XG4gICAgcHJpdmF0ZSBfa2V5ZG93bkV2ZW50JDogU3ViamVjdDxLZXlib2FyZEV2ZW50PiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICBkaXNwYXRjaEV2ZW50KGV2ZW50OiBLZXlib2FyZEV2ZW50IHwgTW91c2VFdmVudCk6IHZvaWQge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjbGlja1wiOlxuICAgICAgICAgICAgICAgIHRoaXMuX2JhY2tkcm9wQ2xpY2skLm5leHQoZXZlbnQgYXMgTW91c2VFdmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgICAgICAgICAgICAgIHRoaXMuX2tleWRvd25FdmVudCQubmV4dChldmVudCBhcyBLZXlib2FyZEV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8gc3VjaCBldmVudCB0eXBlXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=
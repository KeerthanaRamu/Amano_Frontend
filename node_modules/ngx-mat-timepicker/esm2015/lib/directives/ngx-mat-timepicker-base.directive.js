/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ngx-mat-timepicker-base.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Inject, Input, Optional } from "@angular/core";
//
import { NgxMatTimepickerEventService } from "../services/ngx-mat-timepicker-event.service";
import { NgxMatTimepickerService } from "../services/ngx-mat-timepicker.service";
import { NgxMatTimepickerAdapter } from "../services/ngx-mat-timepicker-adapter";
//
import { NgxMatTimepickerUnits } from "../models/ngx-mat-timepicker-units.enum";
import { NGX_MAT_TIMEPICKER_LOCALE } from "../tokens/ngx-mat-timepicker-time-locale.token";
import { NGX_MAT_TIMEPICKER_CONFIG } from "../tokens/ngx-mat-timepicker-config.token";
//
import { Subject } from "rxjs";
import { shareReplay, takeUntil } from "rxjs/operators";
export class NgxMatTimepickerBaseDirective {
    /**
     * @param {?} _timepickerSrv
     * @param {?} _eventSrv
     * @param {?} _locale
     * @param {?} data
     */
    constructor(_timepickerSrv, _eventSrv, _locale, data) {
        this._timepickerSrv = _timepickerSrv;
        this._eventSrv = _eventSrv;
        this._locale = _locale;
        this.data = data;
        this.activeTimeUnit = NgxMatTimepickerUnits.HOUR;
        this.timeUnit = NgxMatTimepickerUnits;
        this._color = "primary";
        this._subsCtrl$ = new Subject();
        this.color = data.color;
        this.defaultTime = data.defaultTime;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set color(newValue) {
        this._color = newValue;
    }
    /**
     * @return {?}
     */
    get color() {
        return this._color;
    }
    /**
     * @return {?}
     */
    get defaultTime() {
        return this._defaultTime;
    }
    /**
     * @param {?} time
     * @return {?}
     */
    set defaultTime(time) {
        this._defaultTime = time;
        this._setDefaultTime(time);
    }
    /**
     * @param {?} period
     * @return {?}
     */
    changePeriod(period) {
        this._timepickerSrv.period = period;
        this._onTimeChange();
    }
    /**
     * @param {?} unit
     * @return {?}
     */
    changeTimeUnit(unit) {
        this.activeTimeUnit = unit;
    }
    /**
     * @return {?}
     */
    close() {
        this.data.timepickerBaseRef.close();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._subsCtrl$.next();
        this._subsCtrl$.complete();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._defineTime();
        this.selectedHour = this._timepickerSrv.selectedHour
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.selectedMinute = this._timepickerSrv.selectedMinute
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.selectedPeriod = this._timepickerSrv.selectedPeriod
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        this.data.timepickerBaseRef.timeUpdated.pipe(takeUntil(this._subsCtrl$))
            .subscribe(this._setDefaultTime.bind(this));
    }
    /**
     * @param {?} hour
     * @return {?}
     */
    onHourChange(hour) {
        this._timepickerSrv.hour = hour;
        this._onTimeChange();
    }
    /**
     * @param {?} hour
     * @return {?}
     */
    onHourSelected(hour) {
        if (!this.data.hoursOnly) {
            this.changeTimeUnit(NgxMatTimepickerUnits.MINUTE);
        }
        this.data.timepickerBaseRef.hourSelected.next(hour);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeydown(e) {
        this._eventSrv.dispatchEvent(e);
        e.stopPropagation();
    }
    /**
     * @param {?} minute
     * @return {?}
     */
    onMinuteChange(minute) {
        this._timepickerSrv.minute = minute;
        this._onTimeChange();
    }
    /**
     * @return {?}
     */
    setTime() {
        this.data.timepickerBaseRef.timeSet.next(this._timepickerSrv.getFullTime(this.data.format));
        this.close();
    }
    /**
     * @protected
     * @return {?}
     */
    _defineTime() {
        /** @type {?} */
        const minTime = this.data.minTime;
        if (minTime && (!this.data.time && !this.data.defaultTime)) {
            /** @type {?} */
            const time = NgxMatTimepickerAdapter.fromDateTimeToString(minTime, this.data.format);
            this._setDefaultTime(time);
        }
    }
    /**
     * @protected
     * @return {?}
     */
    _onTimeChange() {
        /** @type {?} */
        const time = NgxMatTimepickerAdapter.toLocaleTimeString(this._timepickerSrv.getFullTime(this.data.format), {
            locale: this._locale,
            format: this.data.format
        });
        this.data.timepickerBaseRef.timeChanged.emit(time);
    }
    /**
     * @protected
     * @param {?} time
     * @return {?}
     */
    _setDefaultTime(time) {
        this._timepickerSrv.setDefaultTimeIfAvailable(time, this.data.minTime, this.data.maxTime, this.data.format, this.data.minutesGap);
    }
}
NgxMatTimepickerBaseDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ngxMatTimepickerBase]"
            },] }
];
/** @nocollapse */
NgxMatTimepickerBaseDirective.ctorParameters = () => [
    { type: NgxMatTimepickerService },
    { type: NgxMatTimepickerEventService },
    { type: String, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_LOCALE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_CONFIG,] }, { type: Optional }] }
];
NgxMatTimepickerBaseDirective.propDecorators = {
    color: [{ type: Input }],
    defaultTime: [{ type: Input }],
    onKeydown: [{ type: HostListener, args: ["keydown", ["$event"],] }]
};
if (false) {
    /** @type {?} */
    NgxMatTimepickerBaseDirective.prototype.activeTimeUnit;
    /** @type {?} */
    NgxMatTimepickerBaseDirective.prototype.selectedHour;
    /** @type {?} */
    NgxMatTimepickerBaseDirective.prototype.selectedMinute;
    /** @type {?} */
    NgxMatTimepickerBaseDirective.prototype.selectedPeriod;
    /** @type {?} */
    NgxMatTimepickerBaseDirective.prototype.timeUnit;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerBaseDirective.prototype._color;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerBaseDirective.prototype._defaultTime;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerBaseDirective.prototype._subsCtrl$;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerBaseDirective.prototype._timepickerSrv;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerBaseDirective.prototype._eventSrv;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerBaseDirective.prototype._locale;
    /** @type {?} */
    NgxMatTimepickerBaseDirective.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ngx-mat-timepicker-autofocus.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Inject, Input, Optional } from "@angular/core";
import { DOCUMENT } from "@angular/common";
export class NgxMatTimepickerAutofocusDirective {
    /**
     * @param {?} _element
     * @param {?} document
     */
    constructor(_element, document) {
        this._element = _element;
        this.document = document;
        this._activeElement = this.document.activeElement;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.isFocusActive) {
            // To avoid ExpressionChangedAfterItHasBeenCheckedError;
            setTimeout((/**
             * @return {?}
             */
            () => this._element.nativeElement.focus({ preventScroll: true })));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // To avoid ExpressionChangedAfterItHasBeenCheckedError;
        setTimeout((/**
         * @return {?}
         */
        () => this._activeElement.focus({ preventScroll: true })));
    }
}
NgxMatTimepickerAutofocusDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ngxMatTimepickerAutofocus]"
            },] }
];
/** @nocollapse */
NgxMatTimepickerAutofocusDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
NgxMatTimepickerAutofocusDirective.propDecorators = {
    isFocusActive: [{ type: Input, args: ["ngxMatTimepickerAutofocus",] }]
};
if (false) {
    /** @type {?} */
    NgxMatTimepickerAutofocusDirective.prototype.isFocusActive;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerAutofocusDirective.prototype._activeElement;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerAutofocusDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerAutofocusDirective.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWF1dG9mb2N1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWF0LXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9uZ3gtbWF0LXRpbWVwaWNrZXItYXV0b2ZvY3VzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQXdCLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFLekMsTUFBTSxPQUFPLGtDQUFrQzs7Ozs7SUFNM0MsWUFBb0IsUUFBb0IsRUFBd0MsUUFBYTtRQUF6RSxhQUFRLEdBQVIsUUFBUSxDQUFZO1FBQXdDLGFBQVEsR0FBUixRQUFRLENBQUs7UUFDekYsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztJQUN0RCxDQUFDOzs7O0lBRUQsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNwQix3REFBd0Q7WUFDeEQsVUFBVTs7O1lBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUMsQ0FBQztTQUNoRjtJQUNMLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1Asd0RBQXdEO1FBQ3hELFVBQVU7OztRQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUMsQ0FBQztJQUN6RSxDQUFDOzs7WUF2QkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSw2QkFBNkI7YUFDMUM7Ozs7WUFMa0IsVUFBVTs0Q0FZa0IsUUFBUSxZQUFJLE1BQU0sU0FBQyxRQUFROzs7NEJBSnJFLEtBQUssU0FBQywyQkFBMkI7Ozs7SUFBbEMsMkRBQTJEOzs7OztJQUUzRCw0REFBb0M7Ozs7O0lBRXhCLHNEQUE0Qjs7Ozs7SUFBRSxzREFBbUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9wdGlvbmFsfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtET0NVTUVOVH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogXCJbbmd4TWF0VGltZXBpY2tlckF1dG9mb2N1c11cIlxufSlcbmV4cG9ydCBjbGFzcyBOZ3hNYXRUaW1lcGlja2VyQXV0b2ZvY3VzRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuXG4gICAgQElucHV0KFwibmd4TWF0VGltZXBpY2tlckF1dG9mb2N1c1wiKSBpc0ZvY3VzQWN0aXZlOiBib29sZWFuO1xuXG4gICAgcHJpdmF0ZSBfYWN0aXZlRWxlbWVudDogSFRNTEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50OiBFbGVtZW50UmVmLCBAT3B0aW9uYWwoKSBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnkpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IHRoaXMuZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNGb2N1c0FjdGl2ZSkge1xuICAgICAgICAgICAgLy8gVG8gYXZvaWQgRXhwcmVzc2lvbkNoYW5nZWRBZnRlckl0SGFzQmVlbkNoZWNrZWRFcnJvcjtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgLy8gVG8gYXZvaWQgRXhwcmVzc2lvbkNoYW5nZWRBZnRlckl0SGFzQmVlbkNoZWNrZWRFcnJvcjtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLl9hY3RpdmVFbGVtZW50LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KSk7XG4gICAgfVxufVxuIl19
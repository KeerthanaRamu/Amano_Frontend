/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ngx-mat-timepicker.utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgxMatTimepickerAdapter } from "../services/ngx-mat-timepicker-adapter";
import { NgxMatTimepickerFormat } from "../models/ngx-mat-timepicker-format.enum";
//
import { DateTime } from "ts-luxon";
// @dynamic
export class NgxMatTimepickerUtils {
    /**
     * @param {?} hours
     * @param {?} config
     * @return {?}
     */
    static disableHours(hours, config) {
        if (config.min || config.max) {
            return hours.map((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                /** @type {?} */
                const hour = config.format === 24 ? value.time : NgxMatTimepickerAdapter.formatHour(value.time, config.format, config.period);
                /** @type {?} */
                const currentTime = DateTime.fromObject({ hour }).toFormat(NgxMatTimepickerFormat.TWELVE);
                return Object.assign(Object.assign({}, value), { disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, "hours") });
            }));
        }
        return hours;
    }
    /**
     * @param {?} minutes
     * @param {?} selectedHour
     * @param {?} config
     * @return {?}
     */
    static disableMinutes(minutes, selectedHour, config) {
        if (config.min || config.max) {
            /** @type {?} */
            const hour = NgxMatTimepickerAdapter.formatHour(selectedHour, config.format, config.period);
            return minutes.map((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                /** @type {?} */
                const currentTime = DateTime.fromObject({
                    hour,
                    minute: value.time
                }).toFormat(NgxMatTimepickerFormat.TWELVE);
                return Object.assign(Object.assign({}, value), { disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, "minutes") });
            }));
        }
        return minutes;
    }
    /**
     * @param {?} format
     * @return {?}
     */
    static getHours(format) {
        return Array(format).fill(1).map((/**
         * @param {?} v
         * @param {?} i
         * @return {?}
         */
        (v, i) => {
            /** @type {?} */
            const angleStep = 30;
            /** @type {?} */
            const time = v + i;
            /** @type {?} */
            const angle = angleStep * time;
            return { time: time === 24 ? 0 : time, angle };
        }));
    }
    /**
     * @param {?=} gap
     * @return {?}
     */
    static getMinutes(gap = 1) {
        /** @type {?} */
        const minutesCount = 60;
        /** @type {?} */
        const angleStep = 360 / minutesCount;
        /** @type {?} */
        const minutes = [];
        for (let i = 0; i < minutesCount; i++) {
            /** @type {?} */
            const angle = angleStep * i;
            if (i % gap === 0) {
                minutes.push({ time: i, angle: angle !== 0 ? angle : 360 });
            }
        }
        return minutes;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    static isDigit(e) {
        // Allow: backspace, delete, tab, escape, enter
        if ([46, 8, 9, 27, 13].some((/**
         * @param {?} n
         * @return {?}
         */
        n => n === e.keyCode)) ||
            // Allow: Ctrl/cmd+A
            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: Ctrl/cmd+C
            (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: Ctrl/cmd+X
            (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, up, down
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            return true;
        }
        return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));
    }
}
//# sourceMappingURL=data:application/json;base64,
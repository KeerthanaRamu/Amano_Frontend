/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/ngx-mat-timepicker-parser.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Pipe } from "@angular/core";
//
import { NGX_MAT_TIMEPICKER_LOCALE } from "../tokens/ngx-mat-timepicker-time-locale.token";
import { NgxMatTimepickerUnits } from "../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerMeasure } from "../models/ngx-mat-timepicker-measures.enum";
//
import { DateTime } from "ts-luxon";
export class NgxMatTimepickerParserPipe {
    /**
     * @param {?} _locale
     */
    constructor(_locale) {
        this._locale = _locale;
        this._numberingSystem = (/** @type {?} */ (DateTime.local().setLocale(this._locale).resolvedLocaleOpts().numberingSystem));
    }
    /**
     * @param {?} time
     * @param {?=} timeUnit
     * @return {?}
     */
    transform(time, timeUnit = NgxMatTimepickerUnits.HOUR) {
        if (time == null || time === "") {
            return "";
        }
        if (!isNaN(+time)) {
            return `${time}`;
        }
        if (timeUnit === NgxMatTimepickerUnits.MINUTE) {
            return this._parseTime(time, "mm", NgxMatTimepickerMeasure.minute).toString();
        }
        return this._parseTime(time, "HH", NgxMatTimepickerMeasure.hour).toString();
    }
    /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} timeMeasure
     * @return {?}
     */
    _parseTime(time, format, timeMeasure) {
        /** @type {?} */
        const parsedTime = DateTime.fromFormat(String(time), format, { numberingSystem: this._numberingSystem })[timeMeasure];
        if (!isNaN(parsedTime)) {
            return parsedTime;
        }
        throw new Error(`Cannot parse time - ${time}`);
    }
}
NgxMatTimepickerParserPipe.decorators = [
    { type: Pipe, args: [{
                name: "ngxMatTimepickerParser"
            },] },
    { type: Injectable }
];
/** @nocollapse */
NgxMatTimepickerParserPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_LOCALE,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerParserPipe.prototype._numberingSystem;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerParserPipe.prototype._locale;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLXBhcnNlci5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hdC10aW1lcGlja2VyLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL25neC1tYXQtdGltZXBpY2tlci1wYXJzZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7O0FBRXRFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLGdEQUFnRCxDQUFDO0FBQ3pGLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHlDQUF5QyxDQUFDO0FBQzlFLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDRDQUE0QyxDQUFDOztBQUVuRixPQUFPLEVBQUMsUUFBUSxFQUFrQixNQUFNLFVBQVUsQ0FBQztBQU1uRCxNQUFNLE9BQU8sMEJBQTBCOzs7O0lBSW5DLFlBQXVELE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ2xFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxtQkFBQSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGVBQWUsRUFBbUIsQ0FBQztJQUM3SCxDQUFDOzs7Ozs7SUFFRCxTQUFTLENBQUMsSUFBcUIsRUFBRSxRQUFRLEdBQUcscUJBQXFCLENBQUMsSUFBSTtRQUNsRSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUUsRUFBRTtZQUM3QixPQUFPLEVBQUUsQ0FBQztTQUNiO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2YsT0FBTyxHQUFHLElBQUksRUFBRSxDQUFDO1NBQ3BCO1FBRUQsSUFBSSxRQUFRLEtBQUsscUJBQXFCLENBQUMsTUFBTSxFQUFFO1lBQzNDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2pGO1FBRUQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDaEYsQ0FBQzs7Ozs7Ozs7SUFFTyxVQUFVLENBQUMsSUFBcUIsRUFBRSxNQUFjLEVBQUUsV0FBb0M7O2NBQ3BGLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFDbkgsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNwQixPQUFPLFVBQVUsQ0FBQztTQUNyQjtRQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7O1lBbkNKLElBQUksU0FBQztnQkFDRixJQUFJLEVBQUUsd0JBQXdCO2FBQ2pDO1lBQ0EsVUFBVTs7Ozt5Q0FLTSxNQUFNLFNBQUMseUJBQXlCOzs7Ozs7O0lBRjdDLHNEQUFtRDs7Ozs7SUFFdkMsNkNBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG4vL1xuaW1wb3J0IHtOR1hfTUFUX1RJTUVQSUNLRVJfTE9DQUxFfSBmcm9tIFwiLi4vdG9rZW5zL25neC1tYXQtdGltZXBpY2tlci10aW1lLWxvY2FsZS50b2tlblwiO1xuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyVW5pdHN9IGZyb20gXCIuLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLXVuaXRzLmVudW1cIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlck1lYXN1cmV9IGZyb20gXCIuLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLW1lYXN1cmVzLmVudW1cIjtcbi8vXG5pbXBvcnQge0RhdGVUaW1lLCBOdW1iZXJpbmdTeXN0ZW19IGZyb20gXCJ0cy1sdXhvblwiO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogXCJuZ3hNYXRUaW1lcGlja2VyUGFyc2VyXCJcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmd4TWF0VGltZXBpY2tlclBhcnNlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgX251bWJlcmluZ1N5c3RlbTogTnVtYmVyaW5nU3lzdGVtO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChOR1hfTUFUX1RJTUVQSUNLRVJfTE9DQUxFKSBwcml2YXRlIF9sb2NhbGU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9udW1iZXJpbmdTeXN0ZW0gPSBEYXRlVGltZS5sb2NhbCgpLnNldExvY2FsZSh0aGlzLl9sb2NhbGUpLnJlc29sdmVkTG9jYWxlT3B0cygpLm51bWJlcmluZ1N5c3RlbSBhcyBOdW1iZXJpbmdTeXN0ZW07XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtKHRpbWU6IHN0cmluZyB8IG51bWJlciwgdGltZVVuaXQgPSBOZ3hNYXRUaW1lcGlja2VyVW5pdHMuSE9VUik6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aW1lID09IG51bGwgfHwgdGltZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKCt0aW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGAke3RpbWV9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aW1lVW5pdCA9PT0gTmd4TWF0VGltZXBpY2tlclVuaXRzLk1JTlVURSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlVGltZSh0aW1lLCBcIm1tXCIsIE5neE1hdFRpbWVwaWNrZXJNZWFzdXJlLm1pbnV0ZSkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJzZVRpbWUodGltZSwgXCJISFwiLCBOZ3hNYXRUaW1lcGlja2VyTWVhc3VyZS5ob3VyKS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3BhcnNlVGltZSh0aW1lOiBzdHJpbmcgfCBudW1iZXIsIGZvcm1hdDogc3RyaW5nLCB0aW1lTWVhc3VyZTogTmd4TWF0VGltZXBpY2tlck1lYXN1cmUpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBwYXJzZWRUaW1lID0gRGF0ZVRpbWUuZnJvbUZvcm1hdChTdHJpbmcodGltZSksIGZvcm1hdCwge251bWJlcmluZ1N5c3RlbTogdGhpcy5fbnVtYmVyaW5nU3lzdGVtfSlbdGltZU1lYXN1cmVdO1xuICAgICAgICBpZiAoIWlzTmFOKHBhcnNlZFRpbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkVGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHBhcnNlIHRpbWUgLSAke3RpbWV9YCk7XG4gICAgfVxuXG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/ngx-mat-timepicker-time-formatter.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from "@angular/core";
//
import { NgxMatTimepickerUnits } from "../models/ngx-mat-timepicker-units.enum";
//
import { DateTime } from "ts-luxon";
export class NgxMatTimepickerTimeFormatterPipe {
    /**
     * @param {?} time
     * @param {?} timeUnit
     * @return {?}
     */
    transform(time, timeUnit) {
        if (time == null || time === '') {
            return time;
        }
        switch (timeUnit) {
            case NgxMatTimepickerUnits.HOUR:
                return DateTime.fromObject({ hour: +time }).toFormat("HH");
            case NgxMatTimepickerUnits.MINUTE:
                return DateTime.fromObject({ minute: +time }).toFormat("mm");
            default:
                throw new Error("no such time unit");
        }
    }
}
NgxMatTimepickerTimeFormatterPipe.decorators = [
    { type: Pipe, args: [{
                name: "timeFormatter"
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLXRpbWUtZm9ybWF0dGVyLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWF0LXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvbmd4LW1hdC10aW1lcGlja2VyLXRpbWUtZm9ybWF0dGVyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7QUFFcEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUNBQXlDLENBQUM7O0FBRWhGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFLcEMsTUFBTSxPQUFPLGlDQUFpQzs7Ozs7O0lBRTFDLFNBQVMsQ0FBQyxJQUFxQixFQUFFLFFBQStCO1FBQzVELElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO1lBQzdCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxRQUFRLFFBQVEsRUFBRTtZQUNkLEtBQUsscUJBQXFCLENBQUMsSUFBSTtnQkFDM0IsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0QsS0FBSyxxQkFBcUIsQ0FBQyxNQUFNO2dCQUM3QixPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMvRDtnQkFDSSxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDNUM7SUFDTCxDQUFDOzs7WUFqQkosSUFBSSxTQUFDO2dCQUNGLElBQUksRUFBRSxlQUFlO2FBQ3hCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG4vL1xuaW1wb3J0IHsgTmd4TWF0VGltZXBpY2tlclVuaXRzIH0gZnJvbSBcIi4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItdW5pdHMuZW51bVwiO1xuLy9cbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSBcInRzLWx1eG9uXCI7XG5cbkBQaXBlKHtcbiAgICBuYW1lOiBcInRpbWVGb3JtYXR0ZXJcIlxufSlcbmV4cG9ydCBjbGFzcyBOZ3hNYXRUaW1lcGlja2VyVGltZUZvcm1hdHRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIHRyYW5zZm9ybSh0aW1lOiBudW1iZXIgfCBzdHJpbmcsIHRpbWVVbml0OiBOZ3hNYXRUaW1lcGlja2VyVW5pdHMpOiBhbnkge1xuICAgICAgICBpZiAodGltZSA9PSBudWxsIHx8IHRpbWUgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRpbWVVbml0KSB7XG4gICAgICAgICAgICBjYXNlIE5neE1hdFRpbWVwaWNrZXJVbml0cy5IT1VSOlxuICAgICAgICAgICAgICAgIHJldHVybiBEYXRlVGltZS5mcm9tT2JqZWN0KHtob3VyOiArdGltZX0pLnRvRm9ybWF0KFwiSEhcIik7XG4gICAgICAgICAgICBjYXNlIE5neE1hdFRpbWVwaWNrZXJVbml0cy5NSU5VVEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21PYmplY3Qoe21pbnV0ZTogK3RpbWV9KS50b0Zvcm1hdChcIm1tXCIpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJubyBzdWNoIHRpbWUgdW5pdFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19
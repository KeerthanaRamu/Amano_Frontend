/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Inject, ViewEncapsulation } from "@angular/core";
import { MAT_DIALOG_DATA, MatDialogRef } from "@angular/material/dialog";
//
import { NgxMatTimepickerBaseDirective } from "../../directives/ngx-mat-timepicker-base.directive";
import { NGX_MAT_TIMEPICKER_LOCALE } from "../../tokens/ngx-mat-timepicker-time-locale.token";
import { NgxMatTimepickerService } from "../../services/ngx-mat-timepicker.service";
import { NgxMatTimepickerEventService } from "../../services/ngx-mat-timepicker-event.service";
//
export class NgxMatTimepickerDialogComponent extends NgxMatTimepickerBaseDirective {
    /**
     * @param {?} data
     * @param {?} _dialogRef
     * @param {?} timepickerSrv
     * @param {?} eventSrv
     * @param {?} locale
     */
    constructor(data, _dialogRef, timepickerSrv, eventSrv, locale) {
        super(timepickerSrv, eventSrv, locale, data);
        this.data = data;
        this._dialogRef = _dialogRef;
    }
    /**
     * @return {?}
     */
    close() {
        this._dialogRef.close();
    }
}
NgxMatTimepickerDialogComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-mat-timepicker-dialog",
                template: "<ng-template #cancelBtnDefault>\n    <button mat-button\n            [color]=\"color\">CANCEL\n    </button>\n</ng-template>\n<ng-template #confirmBtnDefault>\n    <button mat-button\n            [color]=\"color\">OK\n    </button>\n</ng-template>\n<div mat-dialog-content>\n    <ngx-mat-timepicker-content [appendToInput]=\"data.appendToInput\"\n                                [inputElement]=\"data.inputElement\"\n                                [ngxMatTimepickerTheme]=\"data.theme\">\n        <div class=\"timepicker\"\n             [ngClass]=\"data.timepickerClass\">\n            <mat-toolbar [color]=\"color\"\n                         class=\"timepicker-header\">\n                <ngx-mat-timepicker-dial [color]=\"color\"\n                                         [format]=\"data.format\"\n                                         [hour]=\"(selectedHour | async)?.time\"\n                                         [minute]=\"(selectedMinute | async)?.time\"\n                                         [period]=\"selectedPeriod | async\"\n                                         [activeTimeUnit]=\"activeTimeUnit\"\n                                         [minTime]=\"data.minTime\"\n                                         [maxTime]=\"data.maxTime\"\n                                         [isEditable]=\"data.enableKeyboardInput\"\n                                         [editableHintTmpl]=\"data.editableHintTmpl\"\n                                         [minutesGap]=\"data.minutesGap\"\n                                         [hoursOnly]=\"data.hoursOnly\"\n                                         (periodChanged)=\"changePeriod($event)\"\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\n                                         (hourChanged)=\"onHourChange($event)\"\n                                         (minuteChanged)=\"onMinuteChange($event)\"\n                ></ngx-mat-timepicker-dial>\n            </mat-toolbar>\n            <div class=\"timepicker__main-content\">\n                <div class=\"timepicker__body\"\n                     [ngSwitch]=\"activeTimeUnit\">\n                    <div *ngSwitchCase=\"timeUnit.HOUR\">\n                        <ngx-mat-timepicker-24-hours-face *ngIf=\"data.format === 24;else ampmHours\"\n                                                          [color]=\"color\"\n                                                          (hourChange)=\"onHourChange($event)\"\n                                                          [selectedHour]=\"selectedHour | async\"\n                                                          [minTime]=\"data.minTime\"\n                                                          [maxTime]=\"data.maxTime\"\n                                                          [format]=\"data.format\"\n                                                          (hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-24-hours-face>\n                        <ng-template #ampmHours>\n                            <ngx-mat-timepicker-12-hours-face\n                                    [color]=\"color\"\n                                    (hourChange)=\"onHourChange($event)\"\n                                    [selectedHour]=\"selectedHour | async\"\n                                    [period]=\"selectedPeriod | async\"\n                                    [minTime]=\"data.minTime\"\n                                    [maxTime]=\"data.maxTime\"\n                                    (hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-12-hours-face>\n                        </ng-template>\n                    </div>\n                    <ngx-mat-timepicker-minutes-face *ngSwitchCase=\"timeUnit.MINUTE\"\n                                                     [color]=\"color\"\n                                                     [selectedMinute]=\"selectedMinute | async\"\n                                                     [selectedHour]=\"(selectedHour | async)?.time\"\n                                                     [minTime]=\"data.minTime\"\n                                                     [maxTime]=\"data.maxTime\"\n                                                     [format]=\"data.format\"\n                                                     [period]=\"selectedPeriod | async\"\n                                                     [minutesGap]=\"data.minutesGap\"\n                                                     (minuteChange)=\"onMinuteChange($event)\"></ngx-mat-timepicker-minutes-face>\n                </div>\n            </div>\n        </div>\n    </ngx-mat-timepicker-content>\n</div>\n<div mat-dialog-actions>\n    <div (click)=\"close()\">\n        <ng-container\n                *ngTemplateOutlet=\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\"></ng-container>\n    </div>\n    <div (click)=\"setTime()\">\n        <ng-container\n                *ngTemplateOutlet=\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\"></ng-container>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: ["div.ngx-mat-timepicker-dialog>mat-dialog-container.mat-dialog-container{padding-top:0}div.ngx-mat-timepicker-dialog>mat-dialog-container.mat-dialog-container .mat-dialog-content{padding:0;max-height:85vh}div.ngx-mat-timepicker-dialog>mat-dialog-container.mat-dialog-container .mat-dialog-content mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}div.ngx-mat-timepicker-dialog>mat-dialog-container.mat-dialog-container .mat-dialog-content .clock-face{margin:16px}div.ngx-mat-timepicker-dialog>mat-dialog-container.mat-dialog-container div[mat-dialog-actions]{justify-content:flex-end;display:flex}"]
            }] }
];
/** @nocollapse */
NgxMatTimepickerDialogComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: MatDialogRef },
    { type: NgxMatTimepickerService },
    { type: NgxMatTimepickerEventService },
    { type: String, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_LOCALE,] }] }
];
if (false) {
    /** @type {?} */
    NgxMatTimepickerDialogComponent.prototype.data;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerDialogComponent.prototype._dialogRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWF0LXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uZ3gtbWF0LXRpbWVwaWNrZXItZGlhbG9nL25neC1tYXQtdGltZXBpY2tlci1kaWFsb2cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQXFCLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBQyxlQUFlLEVBQUUsWUFBWSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7O0FBRXZFLE9BQU8sRUFBQyw2QkFBNkIsRUFBQyxNQUFNLG9EQUFvRCxDQUFDO0FBRWpHLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLG1EQUFtRCxDQUFDO0FBQzVGLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDJDQUEyQyxDQUFDO0FBQ2xGLE9BQU8sRUFBQyw0QkFBNEIsRUFBQyxNQUFNLGlEQUFpRCxDQUFDOztBQVU3RixNQUFNLE9BQU8sK0JBQWdDLFNBQVEsNkJBQTZCOzs7Ozs7OztJQUU5RSxZQUE0QyxJQUE0QixFQUNsRCxVQUF5RCxFQUNuRSxhQUFzQyxFQUN0QyxRQUFzQyxFQUNILE1BQWM7UUFFekQsS0FBSyxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBTkwsU0FBSSxHQUFKLElBQUksQ0FBd0I7UUFDbEQsZUFBVSxHQUFWLFVBQVUsQ0FBK0M7SUFNL0UsQ0FBQzs7OztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzVCLENBQUM7OztZQW5CSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDJCQUEyQjtnQkFFckMsOCtKQUF5RDtnQkFDekQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2FBQ3hDOzs7OzRDQUdnQixNQUFNLFNBQUMsZUFBZTtZQWxCZCxZQUFZO1lBSzdCLHVCQUF1QjtZQUN2Qiw0QkFBNEI7eUNBZ0JuQixNQUFNLFNBQUMseUJBQXlCOzs7O0lBSmpDLCtDQUE0RDs7Ozs7SUFDNUQscURBQW1FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEluamVjdCwgT25EZXN0cm95LCBPbkluaXQsIFZpZXdFbmNhcHN1bGF0aW9ufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtNQVRfRElBTE9HX0RBVEEsIE1hdERpYWxvZ1JlZn0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL2RpYWxvZ1wiO1xuLy9cbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckJhc2VEaXJlY3RpdmV9IGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL25neC1tYXQtdGltZXBpY2tlci1iYXNlLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyQ29uZmlnfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci1jb25maWcuaW50ZXJmYWNlXCI7XG5pbXBvcnQge05HWF9NQVRfVElNRVBJQ0tFUl9MT0NBTEV9IGZyb20gXCIuLi8uLi90b2tlbnMvbmd4LW1hdC10aW1lcGlja2VyLXRpbWUtbG9jYWxlLnRva2VuXCI7XG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJTZXJ2aWNlfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvbmd4LW1hdC10aW1lcGlja2VyLnNlcnZpY2VcIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckV2ZW50U2VydmljZX0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL25neC1tYXQtdGltZXBpY2tlci1ldmVudC5zZXJ2aWNlXCI7XG5cbi8vXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcIm5neC1tYXQtdGltZXBpY2tlci1kaWFsb2dcIixcbiAgICBzdHlsZVVybHM6IFtcIi4vbmd4LW1hdC10aW1lcGlja2VyLWRpYWxvZy5jb21wb25lbnQuc2Nzc1wiXSxcbiAgICB0ZW1wbGF0ZVVybDogXCIuL25neC1tYXQtdGltZXBpY2tlci1kaWFsb2cuY29tcG9uZW50Lmh0bWxcIixcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIE5neE1hdFRpbWVwaWNrZXJEaWFsb2dDb21wb25lbnQgZXh0ZW5kcyBOZ3hNYXRUaW1lcGlja2VyQmFzZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHVibGljIGRhdGE6IE5neE1hdFRpbWVwaWNrZXJDb25maWcsXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIF9kaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxOZ3hNYXRUaW1lcGlja2VyRGlhbG9nQ29tcG9uZW50PixcbiAgICAgICAgICAgICAgICB0aW1lcGlja2VyU3J2OiBOZ3hNYXRUaW1lcGlja2VyU2VydmljZSxcbiAgICAgICAgICAgICAgICBldmVudFNydjogTmd4TWF0VGltZXBpY2tlckV2ZW50U2VydmljZSxcbiAgICAgICAgICAgICAgICBASW5qZWN0KE5HWF9NQVRfVElNRVBJQ0tFUl9MT0NBTEUpIGxvY2FsZTogc3RyaW5nKSB7XG5cbiAgICAgICAgc3VwZXIodGltZXBpY2tlclNydiwgZXZlbnRTcnYsIGxvY2FsZSwgZGF0YSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2RpYWxvZ1JlZi5jbG9zZSgpO1xuICAgIH1cblxufVxuIl19
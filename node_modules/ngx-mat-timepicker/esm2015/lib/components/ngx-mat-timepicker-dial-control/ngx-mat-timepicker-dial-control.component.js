/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-dial-control/ngx-mat-timepicker-dial-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ElementRef } from "@angular/core";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerParserPipe } from "../../pipes/ngx-mat-timepicker-parser.pipe";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
/**
 * @return {?}
 */
function retainSelection() {
    this.selectionStart = this.selectionEnd;
}
export class NgxMatTimepickerDialControlComponent {
    /**
     * @param {?} _elRef
     * @param {?} _timeParserPipe
     */
    constructor(_elRef, _timeParserPipe) {
        this._elRef = _elRef;
        this._timeParserPipe = _timeParserPipe;
        this.focused = new EventEmitter();
        this.timeChanged = new EventEmitter();
        this.timeUnitChanged = new EventEmitter();
        this.unfocused = new EventEmitter();
    }
    /**
     * @private
     * @return {?}
     */
    get _selectedTime() {
        if (!!this.time) {
            return this.timeList.find((/**
             * @param {?} t
             * @return {?}
             */
            t => t.time === +this.time));
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    changeTimeByKeyboard(e) {
        /** @type {?} */
        const char = String.fromCharCode(e.keyCode);
        if (isTimeDisabledToChange(this.time, char, this.timeList)) {
            e.preventDefault();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._elRef.nativeElement.querySelector("input").addEventListener("select", retainSelection, false);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._elRef.nativeElement.querySelector("input").removeEventListener("select", retainSelection);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeydown(e) {
        if (!NgxMatTimepickerUtils.isDigit(e)) {
            e.preventDefault();
        }
        else {
            this._changeTimeByArrow(e.keyCode);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onModelChange(value) {
        this.time = this._timeParserPipe.transform(value, this.timeUnit);
    }
    /**
     * @param {?} event
     * @param {?} unit
     * @return {?}
     */
    saveTimeAndChangeTimeUnit(event, unit) {
        event.preventDefault();
        this.previousTime = this.time;
        this.timeUnitChanged.next(unit);
        this.focused.next();
    }
    /**
     * @return {?}
     */
    updateTime() {
        if (this._selectedTime) {
            this.timeChanged.next(this._selectedTime);
            this.previousTime = this._selectedTime.time;
        }
    }
    /**
     * @private
     * @param {?} amount
     * @return {?}
     */
    _addTime(amount) {
        return `0${+this.time + amount}`.substr(-2);
    }
    /**
     * @private
     * @param {?} keyCode
     * @return {?}
     */
    _changeTimeByArrow(keyCode) {
        /** @type {?} */
        let time;
        // arrow up
        if (keyCode === 38) {
            time = this._addTime(this.minutesGap || 1);
        }
        // arrow down
        else if (keyCode === 40) {
            time = this._addTime(-1 * (this.minutesGap || 1));
        }
        if (!isTimeUnavailable(time, this.timeList)) {
            this.time = time;
            this.updateTime();
        }
    }
}
NgxMatTimepickerDialControlComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-mat-timepicker-dial-control",
                template: "<input class=\"timepicker-dial__control timepicker-dial__item\"\n       [ngClass]=\"{'active': isActive}\"\n       [ngModel]=\"time | timeLocalizer: timeUnit: true\"\n       (ngModelChange)=\"time = $event\"\n       [disabled]=\"disabled\"\n       (input)=\"updateTime()\"\n       (focus)=\"saveTimeAndChangeTimeUnit($event, timeUnit)\"\n       readonly\n       [ngxMatTimepickerAutofocus]=\"isActive\"\n       *ngIf=\"!isEditable;else editableTemplate\">\n\n<ng-template #editableTemplate>\n    <input class=\"timepicker-dial__control timepicker-dial__item timepicker-dial__control_editable\"\n           [ngClass]=\"{'active': isActive}\"\n           [ngModel]=\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\"\n           (ngModelChange)=\"onModelChange($event)\"\n           [disabled]=\"disabled\"\n           (input)=\"updateTime()\"\n           (focus)=\"saveTimeAndChangeTimeUnit($event, timeUnit)\"\n           [ngxMatTimepickerAutofocus]=\"isActive\"\n           (keydown)=\"onKeydown($event)\"\n           (keypress)=\"changeTimeByKeyboard($event)\">\n</ng-template>\n",
                providers: [NgxMatTimepickerParserPipe],
                styles: [".timepicker-dial__control{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:center;color:inherit}.timepicker-dial__control:focus{outline:0;background-color:rgba(0,0,0,.1)}.timepicker-dial__control:disabled{cursor:default}"]
            }] }
];
/** @nocollapse */
NgxMatTimepickerDialControlComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgxMatTimepickerParserPipe }
];
NgxMatTimepickerDialControlComponent.propDecorators = {
    disabled: [{ type: Input }],
    focused: [{ type: Output }],
    isActive: [{ type: Input }],
    isEditable: [{ type: Input }],
    minutesGap: [{ type: Input }],
    time: [{ type: Input }],
    timeChanged: [{ type: Output }],
    timeList: [{ type: Input }],
    timeUnit: [{ type: Input }],
    timeUnitChanged: [{ type: Output }],
    unfocused: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NgxMatTimepickerDialControlComponent.prototype.disabled;
    /** @type {?} */
    NgxMatTimepickerDialControlComponent.prototype.focused;
    /** @type {?} */
    NgxMatTimepickerDialControlComponent.prototype.isActive;
    /** @type {?} */
    NgxMatTimepickerDialControlComponent.prototype.isEditable;
    /** @type {?} */
    NgxMatTimepickerDialControlComponent.prototype.minutesGap;
    /** @type {?} */
    NgxMatTimepickerDialControlComponent.prototype.previousTime;
    /** @type {?} */
    NgxMatTimepickerDialControlComponent.prototype.time;
    /** @type {?} */
    NgxMatTimepickerDialControlComponent.prototype.timeChanged;
    /** @type {?} */
    NgxMatTimepickerDialControlComponent.prototype.timeList;
    /** @type {?} */
    NgxMatTimepickerDialControlComponent.prototype.timeUnit;
    /** @type {?} */
    NgxMatTimepickerDialControlComponent.prototype.timeUnitChanged;
    /** @type {?} */
    NgxMatTimepickerDialControlComponent.prototype.unfocused;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDialControlComponent.prototype._elRef;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDialControlComponent.prototype._timeParserPipe;
}
/**
 * @param {?} currentTime
 * @param {?} nextTime
 * @param {?} timeList
 * @return {?}
 */
function isTimeDisabledToChange(currentTime, nextTime, timeList) {
    /** @type {?} */
    const isNumber = /\d/.test(nextTime);
    if (isNumber) {
        /** @type {?} */
        const time = currentTime + nextTime;
        return isTimeUnavailable(time, timeList);
    }
}
/**
 * @param {?} time
 * @param {?} timeList
 * @return {?}
 */
function isTimeUnavailable(time, timeList) {
    /** @type {?} */
    const selectedTime = timeList.find((/**
     * @param {?} value
     * @return {?}
     */
    value => value.time === +time));
    return !selectedTime || (selectedTime && selectedTime.disabled);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWRpYWwtY29udHJvbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWF0LXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uZ3gtbWF0LXRpbWVwaWNrZXItZGlhbC1jb250cm9sL25neC1tYXQtdGltZXBpY2tlci1kaWFsLWNvbnRyb2wuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQWEsS0FBSyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBRzNHLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLDRDQUE0QyxDQUFDO0FBQ2pGLE9BQU8sRUFBQywwQkFBMEIsRUFBQyxNQUFNLDRDQUE0QyxDQUFDO0FBQ3RGLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHNDQUFzQyxDQUFDOzs7O0FBRTNFLFNBQVMsZUFBZTtJQUNwQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7QUFDNUMsQ0FBQztBQVFELE1BQU0sT0FBTyxvQ0FBb0M7Ozs7O0lBMkM3QyxZQUFvQixNQUFrQixFQUFVLGVBQTJDO1FBQXZFLFdBQU0sR0FBTixNQUFNLENBQVk7UUFBVSxvQkFBZSxHQUFmLGVBQWUsQ0FBNEI7UUEvQjNGLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBaUJuQyxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUE2QixDQUFDO1FBUzVELG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQXlCLENBQUM7UUFHNUQsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7SUFHckMsQ0FBQzs7Ozs7SUExQ0QsSUFBWSxhQUFhO1FBQ3JCLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSTs7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QUFDO0FBQ3BFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIElucHV0LCBPdXRwdXQsIEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXR9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG4vL1xuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci1jbG9jay1mYWNlLmludGVyZmFjZVwiO1xuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyVW5pdHN9IGZyb20gXCIuLi8uLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLXVuaXRzLmVudW1cIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclBhcnNlclBpcGV9IGZyb20gXCIuLi8uLi9waXBlcy9uZ3gtbWF0LXRpbWVwaWNrZXItcGFyc2VyLnBpcGVcIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclV0aWxzfSBmcm9tIFwiLi4vLi4vdXRpbHMvbmd4LW1hdC10aW1lcGlja2VyLnV0aWxzXCI7XG5cbmZ1bmN0aW9uIHJldGFpblNlbGVjdGlvbigpIHtcbiAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ID0gdGhpcy5zZWxlY3Rpb25FbmQ7XG59XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcIm5neC1tYXQtdGltZXBpY2tlci1kaWFsLWNvbnRyb2xcIixcbiAgICB0ZW1wbGF0ZVVybDogXCJuZ3gtbWF0LXRpbWVwaWNrZXItZGlhbC1jb250cm9sLmNvbXBvbmVudC5odG1sXCIsXG4gICAgc3R5bGVVcmxzOiBbXCJuZ3gtbWF0LXRpbWVwaWNrZXItZGlhbC1jb250cm9sLmNvbXBvbmVudC5zY3NzXCJdLFxuICAgIHByb3ZpZGVyczogW05neE1hdFRpbWVwaWNrZXJQYXJzZXJQaXBlXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hNYXRUaW1lcGlja2VyRGlhbENvbnRyb2xDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgcHJpdmF0ZSBnZXQgX3NlbGVjdGVkVGltZSgpOiBOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlIHtcbiAgICAgICAgaWYgKCEhdGhpcy50aW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lTGlzdC5maW5kKHQgPT4gdC50aW1lID09PSArdGhpcy50aW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgICBAT3V0cHV0KClcbiAgICBmb2N1c2VkID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gICAgQElucHV0KClcbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgpXG4gICAgaXNFZGl0YWJsZTogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgpXG4gICAgbWludXRlc0dhcDogbnVtYmVyO1xuXG4gICAgcHJldmlvdXNUaW1lOiBudW1iZXIgfCBzdHJpbmc7XG5cbiAgICBASW5wdXQoKVxuICAgIHRpbWU6IHN0cmluZztcblxuICAgIEBPdXRwdXQoKVxuICAgIHRpbWVDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlPigpO1xuXG4gICAgQElucHV0KClcbiAgICB0aW1lTGlzdDogTmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZVtdO1xuXG4gICAgQElucHV0KClcbiAgICB0aW1lVW5pdDogTmd4TWF0VGltZXBpY2tlclVuaXRzO1xuXG4gICAgQE91dHB1dCgpXG4gICAgdGltZVVuaXRDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxOZ3hNYXRUaW1lcGlja2VyVW5pdHM+KCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICB1bmZvY3VzZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBfdGltZVBhcnNlclBpcGU6IE5neE1hdFRpbWVwaWNrZXJQYXJzZXJQaXBlKSB7XG4gICAgfVxuXG4gICAgY2hhbmdlVGltZUJ5S2V5Ym9hcmQoZTogYW55KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUua2V5Q29kZSk7XG5cbiAgICAgICAgaWYgKGlzVGltZURpc2FibGVkVG9DaGFuZ2UodGhpcy50aW1lLCBjaGFyLCB0aGlzLnRpbWVMaXN0KSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9lbFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKS5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0XCIsIHJldGFpblNlbGVjdGlvbiwgZmFsc2UpO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9lbFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKS5yZW1vdmVFdmVudExpc3RlbmVyKFwic2VsZWN0XCIsIHJldGFpblNlbGVjdGlvbik7XG4gICAgfVxuXG4gICAgb25LZXlkb3duKGU6IGFueSk6IHZvaWQge1xuICAgICAgICBpZiAoIU5neE1hdFRpbWVwaWNrZXJVdGlscy5pc0RpZ2l0KGUpKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VUaW1lQnlBcnJvdyhlLmtleUNvZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Nb2RlbENoYW5nZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMudGltZSA9IHRoaXMuX3RpbWVQYXJzZXJQaXBlLnRyYW5zZm9ybSh2YWx1ZSwgdGhpcy50aW1lVW5pdCk7XG4gICAgfVxuXG4gICAgc2F2ZVRpbWVBbmRDaGFuZ2VUaW1lVW5pdChldmVudDogRm9jdXNFdmVudCwgdW5pdDogTmd4TWF0VGltZXBpY2tlclVuaXRzKTogdm9pZCB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMucHJldmlvdXNUaW1lID0gdGhpcy50aW1lO1xuICAgICAgICB0aGlzLnRpbWVVbml0Q2hhbmdlZC5uZXh0KHVuaXQpO1xuICAgICAgICB0aGlzLmZvY3VzZWQubmV4dCgpO1xuICAgIH1cblxuICAgIHVwZGF0ZVRpbWUoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLl9zZWxlY3RlZFRpbWUpIHtcbiAgICAgICAgICAgIHRoaXMudGltZUNoYW5nZWQubmV4dCh0aGlzLl9zZWxlY3RlZFRpbWUpO1xuICAgICAgICAgICAgdGhpcy5wcmV2aW91c1RpbWUgPSB0aGlzLl9zZWxlY3RlZFRpbWUudGltZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX2FkZFRpbWUoYW1vdW50OiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYDAkeyt0aGlzLnRpbWUgKyBhbW91bnR9YC5zdWJzdHIoLTIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2NoYW5nZVRpbWVCeUFycm93KGtleUNvZGU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBsZXQgdGltZTogc3RyaW5nO1xuXG4gICAgICAgIC8vIGFycm93IHVwXG4gICAgICAgIGlmIChrZXlDb2RlID09PSAzOCkge1xuICAgICAgICAgICAgdGltZSA9IHRoaXMuX2FkZFRpbWUodGhpcy5taW51dGVzR2FwIHx8IDEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFycm93IGRvd25cbiAgICAgICAgZWxzZSBpZiAoa2V5Q29kZSA9PT0gNDApIHtcbiAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9hZGRUaW1lKC0xICogKHRoaXMubWludXRlc0dhcCB8fCAxKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVGltZVVuYXZhaWxhYmxlKHRpbWUsIHRoaXMudGltZUxpc3QpKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVUaW1lKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gaXNUaW1lRGlzYWJsZWRUb0NoYW5nZShjdXJyZW50VGltZTogc3RyaW5nLCBuZXh0VGltZTogc3RyaW5nLCB0aW1lTGlzdDogTmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZVtdKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaXNOdW1iZXIgPSAvXFxkLy50ZXN0KG5leHRUaW1lKTtcblxuICAgIGlmIChpc051bWJlcikge1xuICAgICAgICBjb25zdCB0aW1lID0gY3VycmVudFRpbWUgKyBuZXh0VGltZTtcblxuICAgICAgICByZXR1cm4gaXNUaW1lVW5hdmFpbGFibGUodGltZSwgdGltZUxpc3QpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNUaW1lVW5hdmFpbGFibGUodGltZTogc3RyaW5nLCB0aW1lTGlzdDogTmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZVtdKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgc2VsZWN0ZWRUaW1lID0gdGltZUxpc3QuZmluZCh2YWx1ZSA9PiB2YWx1ZS50aW1lID09PSArdGltZSk7XG5cbiAgICByZXR1cm4gIXNlbGVjdGVkVGltZSB8fCAoc2VsZWN0ZWRUaW1lICYmIHNlbGVjdGVkVGltZS5kaXNhYmxlZCk7XG59XG4iXX0=
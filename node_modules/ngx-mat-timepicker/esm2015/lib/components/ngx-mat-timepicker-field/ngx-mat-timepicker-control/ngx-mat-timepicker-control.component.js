/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-control/ngx-mat-timepicker-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from "@angular/core";
//
import { NgxMatTimepickerUnits } from "../../../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerParserPipe } from "../../../pipes/ngx-mat-timepicker-parser.pipe";
import { NgxMatTimepickerUtils } from "../../../utils/ngx-mat-timepicker.utils";
/**
 * @param {?} currentTime
 * @param {?} nextTime
 * @return {?}
 */
function concatTime(currentTime, nextTime) {
    /** @type {?} */
    const isNumber = /\d/.test(nextTime);
    if (isNumber) {
        /** @type {?} */
        const time = currentTime + nextTime;
        return +time;
    }
}
export class NgxMatTimepickerControlComponent {
    /**
     * @param {?} _timeParser
     */
    constructor(_timeParser) {
        this._timeParser = _timeParser;
        this.id = NgxMatTimepickerControlComponent.nextId++;
        this.timeChanged = new EventEmitter();
        this._color = "primary";
        this._floatLabel = "never";
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set color(newValue) {
        this._color = newValue;
    }
    /**
     * @return {?}
     */
    get color() {
        return this._color;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set floatLabel(newValue) {
        this._floatLabel = newValue;
    }
    /**
     * @return {?}
     */
    get floatLabel() {
        return this._floatLabel;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changeTime(event) {
        event.stopPropagation();
        /** @type {?} */
        const char = String.fromCharCode(event.keyCode);
        /** @type {?} */
        const time = concatTime(String(this.time), char);
        this._changeTimeIfValid(time);
    }
    /**
     * @return {?}
     */
    decrease() {
        if (!this.disabled) {
            /** @type {?} */
            let previousTime = +this.time - 1;
            if (previousTime < this.min) {
                previousTime = this.max;
            }
            if (this._isSelectedTimeDisabled(previousTime)) {
                previousTime = this._getAvailableTime(previousTime, this._getPrevAvailableTime.bind(this));
            }
            if (previousTime !== this.time) {
                this.timeChanged.emit(previousTime);
            }
        }
    }
    /**
     * @return {?}
     */
    increase() {
        if (!this.disabled) {
            /** @type {?} */
            let nextTime = +this.time + 1;
            if (nextTime > this.max) {
                nextTime = this.min;
            }
            if (this._isSelectedTimeDisabled(nextTime)) {
                nextTime = this._getAvailableTime(nextTime, this._getNextAvailableTime.bind(this));
            }
            if (nextTime !== this.time) {
                this.timeChanged.emit(nextTime);
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.timeList && this.time != null) {
            if (this._isSelectedTimeDisabled(this.time)) {
                this._setAvailableTime();
            }
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isFocused = false;
        if (this._previousTime !== this.time) {
            this._changeTimeIfValid(+this.time);
        }
    }
    /**
     * @return {?}
     */
    onFocus() {
        this.isFocused = true;
        this._previousTime = this.time;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeydown(event) {
        event.stopPropagation();
        if (!NgxMatTimepickerUtils.isDigit(event)) {
            event.preventDefault();
        }
        switch (event.key) {
            case "ArrowUp":
                this.increase();
                break;
            case "ArrowDown":
                this.decrease();
                break;
        }
        if (this.preventTyping && event.key !== "Tab") {
            event.preventDefault();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onModelChange(value) {
        this.time = +this._timeParser.transform(value, this.timeUnit);
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _changeTimeIfValid(value) {
        if (!isNaN(value)) {
            this.time = value;
            if (this.time > this.max) {
                /** @type {?} */
                const timeString = String(value);
                this.time = +timeString[timeString.length - 1];
            }
            if (this.time < this.min) {
                this.time = this.min;
            }
            this.timeChanged.emit(this.time);
        }
    }
    /**
     * @private
     * @param {?} currentTime
     * @param {?} fn
     * @return {?}
     */
    _getAvailableTime(currentTime, fn) {
        /** @type {?} */
        const currentTimeIndex = this.timeList.findIndex((/**
         * @param {?} time
         * @return {?}
         */
        time => time.time === currentTime));
        /** @type {?} */
        const availableTime = fn(currentTimeIndex);
        return availableTime != null ? availableTime : this.time;
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    _getNextAvailableTime(index) {
        /** @type {?} */
        const timeCollection = this.timeList;
        /** @type {?} */
        const maxValue = timeCollection.length;
        for (let i = index + 1; i < maxValue; i++) {
            /** @type {?} */
            const time = timeCollection[i];
            if (!time.disabled) {
                return time.time;
            }
        }
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    _getPrevAvailableTime(index) {
        for (let i = index; i >= 0; i--) {
            /** @type {?} */
            const time = this.timeList[i];
            if (!time.disabled) {
                return time.time;
            }
        }
    }
    /**
     * @private
     * @param {?} time
     * @return {?}
     */
    _isSelectedTimeDisabled(time) {
        return this.timeList.find((/**
         * @param {?} faceTime
         * @return {?}
         */
        (faceTime) => faceTime.time === time)).disabled;
    }
    /**
     * @private
     * @return {?}
     */
    _setAvailableTime() {
        this.time = this.timeList.find((/**
         * @param {?} t
         * @return {?}
         */
        t => !t.disabled)).time;
        this.timeChanged.emit(this.time);
    }
}
NgxMatTimepickerControlComponent.nextId = 0;
NgxMatTimepickerControlComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-mat-timepicker-time-control",
                template: "<mat-form-field [color]=\"color\"\n                [floatLabel]=\"floatLabel\"\n                [ngClass]=\"{'active': isFocused}\"\n                class=\"ngx-mat-timepicker-control\">\n    <input id=\"ngx_mat_timepicker_field_{{id}}\"\n           name=\"ngx_mat_timepicker_field_{{id}}\"\n           matInput\n           maxlength=\"2\"\n           [ngModel]=\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\"\n           (ngModelChange)=\"onModelChange($event)\"\n           [placeholder]=\"placeholder\"\n           [disabled]=\"disabled\"\n           (keydown)=\"onKeydown($event)\"\n           (keypress)=\"changeTime($event)\"\n           (focus)=\"onFocus()\"\n           (blur)=\"onBlur()\" />\n    <div class=\"arrows-wrap\"\n         matSuffix>\n        <span class=\"arrow\"\n              role=\"button\"\n              (click)=\"increase()\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\n                 height=\"18\"\n                 viewBox=\"0 0 24 24\"\n                 width=\"18\">\n                <path d=\"M0 0h24v24H0z\"\n                      fill=\"none\" />\n                <path d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\" />\n            </svg>\n        </span>\n        <span class=\"arrow\"\n              role=\"button\"\n              (click)=\"decrease()\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\n                 height=\"18\"\n                 viewBox=\"0 0 24 24\"\n                 width=\"18\">\n                <path d=\"M0 0h24v24H0V0z\"\n                      fill=\"none\" />\n                <path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\" />\n            </svg>\n        </span>\n    </div>\n</mat-form-field>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [NgxMatTimepickerParserPipe],
                styles: [".ngx-mat-timepicker-control{width:60px;min-width:60px}.ngx-mat-timepicker-control input{text-align:center}.ngx-mat-timepicker-control .arrows-wrap{position:absolute;right:0;bottom:-8px;display:flex;flex-direction:column}.ngx-mat-timepicker-control .arrows-wrap>.arrow{text-align:center;opacity:.5;height:15px;cursor:pointer;transition:opacity .2s;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-mat-timepicker-control .arrows-wrap>.arrow:hover{opacity:1}"]
            }] }
];
/** @nocollapse */
NgxMatTimepickerControlComponent.ctorParameters = () => [
    { type: NgxMatTimepickerParserPipe }
];
NgxMatTimepickerControlComponent.propDecorators = {
    color: [{ type: Input }],
    disabled: [{ type: Input }],
    floatLabel: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    placeholder: [{ type: Input }],
    preventTyping: [{ type: Input }],
    time: [{ type: Input }],
    timeChanged: [{ type: Output }],
    timeList: [{ type: Input }],
    timeUnit: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxMatTimepickerControlComponent.nextId;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.disabled;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.id;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.isFocused;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.max;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.min;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.placeholder;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.preventTyping;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.time;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.timeChanged;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.timeList;
    /** @type {?} */
    NgxMatTimepickerControlComponent.prototype.timeUnit;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerControlComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerControlComponent.prototype._floatLabel;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerControlComponent.prototype._previousTime;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerControlComponent.prototype._timeParser;
}
//# sourceMappingURL=data:application/json;base64,
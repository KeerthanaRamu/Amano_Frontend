/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-field/ngx-mat-timepicker-field.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, TemplateRef, ViewEncapsulation } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
//
import { NgxMatTimepickerService } from "../../services/ngx-mat-timepicker.service";
import { NgxMatTimepickerPeriods } from "../../models/ngx-mat-timepicker-periods.enum";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerAdapter } from "../../services/ngx-mat-timepicker-adapter";
import { NGX_MAT_TIMEPICKER_LOCALE } from "../../tokens/ngx-mat-timepicker-time-locale.token";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
import { Subject } from "rxjs";
import { distinctUntilChanged, map, takeUntil, tap } from "rxjs/operators";
export class NgxMatTimepickerFieldComponent {
    /**
     * @param {?} _timepickerService
     * @param {?} _locale
     */
    constructor(_timepickerService, _locale) {
        this._timepickerService = _timepickerService;
        this._locale = _locale;
        this.maxHour = 12;
        this.minHour = 1;
        this.period = NgxMatTimepickerPeriods.AM;
        this.periods = [
            NgxMatTimepickerPeriods.AM,
            NgxMatTimepickerPeriods.PM
        ];
        this.timeChanged = new EventEmitter();
        this.timeUnit = NgxMatTimepickerUnits;
        this._color = "primary";
        this._floatLabel = "never";
        this._format = 12;
        this._isFirstTimeChange = true;
        this._subsCtrl$ = new Subject();
        this._onChange = (/**
         * @return {?}
         */
        () => {
        });
    }
    /**
     * @return {?}
     */
    get color() {
        return this._color;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set color(newValue) {
        this._color = newValue;
    }
    /**
     * @return {?}
     */
    get defaultTime() {
        return this._defaultTime;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set defaultTime(val) {
        this._defaultTime = val;
        this._isDefaultTime = !!val;
    }
    /**
     * @return {?}
     */
    get floatLabel() {
        return this._floatLabel;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set floatLabel(newValue) {
        this._floatLabel = newValue;
    }
    /**
     * @return {?}
     */
    get format() {
        return this._format;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set format(value) {
        this._format = value === 24 ? 24 : 12;
        this.minHour = this._format === 12 ? 1 : 0;
        this.maxHour = this._format === 12 ? 12 : 23;
        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);
        /** @type {?} */
        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);
        if (isDynamicallyChanged) {
            this._updateTime(this.timepickerTime);
        }
        this._previousFormat = this._format;
    }
    /**
     * @return {?}
     */
    get max() {
        return this._max;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        if (typeof value === "string") {
            this._max = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
            return;
        }
        this._max = value;
    }
    /**
     * @return {?}
     */
    get min() {
        return this._min;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        if (typeof value === "string") {
            this._min = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
            return;
        }
        this._min = value;
    }
    /**
     * @param {?} hour
     * @return {?}
     */
    changeHour(hour) {
        this._timepickerService.hour = this.hoursList.find((/**
         * @param {?} h
         * @return {?}
         */
        h => h.time === hour));
        this._changeTime();
    }
    /**
     * @param {?} minute
     * @return {?}
     */
    changeMinute(minute) {
        this._timepickerService.minute = this.minutesList.find((/**
         * @param {?} m
         * @return {?}
         */
        m => m.time === minute));
        this._changeTime();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changePeriod(event) {
        this._timepickerService.period = (/** @type {?} */ (event.value));
        this._changeTime();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._subsCtrl$.next();
        this._subsCtrl$.complete();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._initTime(this.defaultTime);
        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);
        this.minutesList = NgxMatTimepickerUtils.getMinutes();
        this.isTimeRangeSet = !!(this.min || this.max);
        this.hour$ = (/** @type {?} */ (this._timepickerService.selectedHour.pipe(tap((/**
         * @param {?} clockTime
         * @return {?}
         */
        (clockTime) => this._selectedHour = clockTime.time)), map(this._changeDefaultTimeValue.bind(this)), tap((/**
         * @return {?}
         */
        () => this.isTimeRangeSet && this._updateAvailableMinutes())))));
        this.minute$ = (/** @type {?} */ (this._timepickerService.selectedMinute.pipe(map(this._changeDefaultTimeValue.bind(this)), tap((/**
         * @return {?}
         */
        () => this._isFirstTimeChange = false)))));
        if (this.format === 12) {
            this._timepickerService.selectedPeriod.pipe(distinctUntilChanged(), tap((/**
             * @param {?} period
             * @return {?}
             */
            (period) => this.period = period)), tap((/**
             * @param {?} period
             * @return {?}
             */
            period => this.isChangePeriodDisabled = this._isPeriodDisabled(period))), takeUntil(this._subsCtrl$)).subscribe((/**
             * @return {?}
             */
            () => this.isTimeRangeSet && this._updateAvailableTime()));
        }
    }
    /**
     * @param {?} time
     * @return {?}
     */
    onTimeSet(time) {
        this._updateTime(time);
        this._emitLocalTimeChange(time);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} _fn_
     * @return {?}
     */
    registerOnTouched(_fn_) {
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            this._initTime(val);
        }
        else {
            this._resetTime();
        }
    }
    /**
     * @private
     * @param {?} clockFaceTime
     * @return {?}
     */
    _changeDefaultTimeValue(clockFaceTime) {
        if (!this._isDefaultTime && this._isFirstTimeChange) {
            return Object.assign(Object.assign({}, clockFaceTime), { time: null });
        }
        return clockFaceTime;
    }
    /**
     * @private
     * @return {?}
     */
    _changeTime() {
        /** @type {?} */
        const time = this._timepickerService.getFullTime(this.format);
        this.timepickerTime = time;
        this._emitLocalTimeChange(time);
    }
    /**
     * @private
     * @param {?} time
     * @return {?}
     */
    _emitLocalTimeChange(time) {
        /** @type {?} */
        const localTime = NgxMatTimepickerAdapter.toLocaleTimeString(time, { format: this.format, locale: this._locale });
        this._onChange(localTime);
        this.timeChanged.emit(localTime);
    }
    /**
     * @private
     * @param {?} time
     * @return {?}
     */
    _initTime(time) {
        /** @type {?} */
        const isDefaultTimeAvailable = NgxMatTimepickerAdapter
            .isTimeAvailable(time, (/** @type {?} */ (this.min)), (/** @type {?} */ (this.max)), "minutes", null, this.format);
        if (!isDefaultTimeAvailable) {
            if (this.min) {
                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString((/** @type {?} */ (this.min)), this.format));
                return;
            }
            if (this.max) {
                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString((/** @type {?} */ (this.max)), this.format));
                return;
            }
        }
        this._updateTime(time);
    }
    /**
     * @private
     * @param {?} period
     * @return {?}
     */
    _isPeriodDisabled(period) {
        return NgxMatTimepickerUtils.disableHours(NgxMatTimepickerUtils.getHours(12), {
            min: (/** @type {?} */ (this.min)),
            max: (/** @type {?} */ (this.max)),
            format: 12,
            period: period === NgxMatTimepickerPeriods.AM ? NgxMatTimepickerPeriods.PM : NgxMatTimepickerPeriods.AM
        }).every((/**
         * @param {?} time
         * @return {?}
         */
        time => time.disabled));
    }
    /**
     * @private
     * @return {?}
     */
    _resetTime() {
        this._timepickerService.hour = { angle: 0, time: null };
        this._timepickerService.minute = { angle: 0, time: null };
    }
    /**
     * @private
     * @return {?}
     */
    _updateAvailableHours() {
        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {
            min: (/** @type {?} */ (this.min)),
            max: (/** @type {?} */ (this.max)),
            format: this.format,
            period: this.period
        });
    }
    /**
     * @private
     * @return {?}
     */
    _updateAvailableMinutes() {
        this.minutesList = NgxMatTimepickerUtils.disableMinutes(this.minutesList, this._selectedHour, {
            min: (/** @type {?} */ (this.min)),
            max: (/** @type {?} */ (this.max)),
            format: this.format,
            period: this.period
        });
    }
    /**
     * @private
     * @return {?}
     */
    _updateAvailableTime() {
        this._updateAvailableHours();
        if (this._selectedHour) {
            this._updateAvailableMinutes();
        }
    }
    /**
     * @private
     * @param {?} time
     * @return {?}
     */
    _updateTime(time) {
        if (time) {
            /** @type {?} */
            const formattedTime = NgxMatTimepickerAdapter.formatTime(time, { locale: this._locale, format: this.format });
            this._timepickerService.setDefaultTimeIfAvailable(formattedTime, (/** @type {?} */ (this.min)), (/** @type {?} */ (this.max)), this.format);
            this.timepickerTime = formattedTime;
        }
    }
}
NgxMatTimepickerFieldComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-mat-timepicker-field",
                template: "<div class=\"ngx-mat-timepicker\"\n     [ngClass]=\"{'ngx-mat-timepicker--disabled': disabled}\">\n    <ngx-mat-timepicker-time-control\n            class=\"ngx-mat-timepicker__control--first\"\n            [color]=\"color\"\n            [floatLabel]=\"floatLabel\"\n            [placeholder]=\"'HH'\"\n            [time]=\"(hour$ | async)?.time\"\n            [min]=\"minHour\"\n            [max]=\"maxHour\"\n            [timeUnit]=\"timeUnit.HOUR\"\n            [disabled]=\"disabled\"\n            [timeList]=\"hoursList\"\n            [preventTyping]=\"isTimeRangeSet\"\n            (timeChanged)=\"changeHour($event)\"></ngx-mat-timepicker-time-control>\n    <span class=\"separator-colon ngx-mat-timepicker__control--second\">:</span>\n    <ngx-mat-timepicker-time-control\n            class=\"ngx-mat-timepicker__control--third\"\n            [color]=\"color\"\n            [floatLabel]=\"floatLabel\"\n            [placeholder]=\"'MM'\"\n            [time]=\"(minute$ | async)?.time\"\n            [min]=\"0\"\n            [max]=\"59\"\n            [timeUnit]=\"timeUnit.MINUTE\"\n            [disabled]=\"disabled\"\n            [timeList]=\"minutesList\"\n            [preventTyping]=\"isTimeRangeSet\"\n            (timeChanged)=\"changeMinute($event)\"></ngx-mat-timepicker-time-control>\n    <mat-form-field class=\"period-select ngx-mat-timepicker__control--forth\"\n                    *ngIf=\"format !== 24\"\n                    [color]=\"color\">\n        <mat-select [disabled]=\"disabled || isChangePeriodDisabled\"\n                    (selectionChange)=\"changePeriod($event)\"\n                    [ngModel]=\"period\">\n            <mat-option *ngFor=\"let option of periods\"\n                        [value]=\"option\">{{option}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n    <ngx-mat-timepicker-toggle\n            class=\"ngx-mat-timepicker__toggle\"\n            *ngIf=\"!controlOnly\"\n            [for]=\"timepicker\"\n            [disabled]=\"disabled\">\n        <span ngxMatTimepickerToggleIcon>\n            <ng-container *ngTemplateOutlet=\"toggleIcon || defaultIcon\"></ng-container>\n        </span>\n    </ngx-mat-timepicker-toggle>\n</div>\n<ngx-mat-timepicker\n        [color]=\"color\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [theme]=\"clockTheme\"\n        [defaultTime]=\"timepickerTime\"\n        [format]=\"format\"\n        [cancelBtnTmpl]=\"cancelBtnTmpl\"\n        [confirmBtnTmpl]=\"confirmBtnTmpl\"\n        (timeSet)=\"onTimeSet($event)\"\n        #timepicker></ngx-mat-timepicker>\n\n<ng-template #defaultIcon>\n    <mat-icon>watch_later</mat-icon>\n</ng-template>\n",
                providers: [
                    NgxMatTimepickerService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: NgxMatTimepickerFieldComponent,
                        multi: true
                    }
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth,.ngx-mat-timepicker__toggle{order:4}"]
            }] }
];
/** @nocollapse */
NgxMatTimepickerFieldComponent.ctorParameters = () => [
    { type: NgxMatTimepickerService },
    { type: String, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_LOCALE,] }] }
];
NgxMatTimepickerFieldComponent.propDecorators = {
    color: [{ type: Input }],
    defaultTime: [{ type: Input }],
    floatLabel: [{ type: Input }],
    format: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    cancelBtnTmpl: [{ type: Input }],
    clockTheme: [{ type: Input }],
    confirmBtnTmpl: [{ type: Input }],
    controlOnly: [{ type: Input }],
    disabled: [{ type: Input }],
    timeChanged: [{ type: Output }],
    toggleIcon: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.cancelBtnTmpl;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.clockTheme;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.confirmBtnTmpl;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.controlOnly;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.disabled;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.hour$;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.hoursList;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.isChangePeriodDisabled;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.isTimeRangeSet;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.maxHour;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.minHour;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.minute$;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.minutesList;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.period;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.periods;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.timeChanged;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.timepickerTime;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.timeUnit;
    /** @type {?} */
    NgxMatTimepickerFieldComponent.prototype.toggleIcon;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._defaultTime;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._floatLabel;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._format;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._isDefaultTime;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._isFirstTimeChange;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._max;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._min;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._previousFormat;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._selectedHour;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._subsCtrl$;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._timepickerService;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerFieldComponent.prototype._locale;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWZpZWxkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tYXQtdGltZXBpY2tlci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL25neC1tYXQtdGltZXBpY2tlci1maWVsZC9uZ3gtbWF0LXRpbWVwaWNrZXItZmllbGQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEVBR0wsTUFBTSxFQUNOLFdBQVcsRUFDWCxpQkFBaUIsRUFDcEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUF1QixpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDOztBQUt2RSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwyQ0FBMkMsQ0FBQztBQUVsRixPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSw4Q0FBOEMsQ0FBQztBQUNyRixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSw0Q0FBNEMsQ0FBQztBQUVqRixPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwyQ0FBMkMsQ0FBQztBQUNsRixPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSxtREFBbUQsQ0FBQztBQUM1RixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUczRSxPQUFPLEVBQWEsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBaUJ6RSxNQUFNLE9BQU8sOEJBQThCOzs7OztJQTBIdkMsWUFBb0Isa0JBQTJDLEVBQ1IsT0FBZTtRQURsRCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXlCO1FBQ1IsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQTdCdEUsWUFBTyxHQUFH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SUFDaEMsdURBQThCOzs7OztJQUM5QixvREFBbUM7Ozs7O0lBZ0luQyxtREFDQzs7Ozs7SUEvSFcsNERBQW1EOzs7OztJQUNuRCxpREFBMEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9uRGVzdHJveSxcbiAgICBPbkluaXQsXG4gICAgT3V0cHV0LFxuICAgIFRlbXBsYXRlUmVmLFxuICAgIFZpZXdFbmNhcHN1bGF0aW9uXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge0NvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUn0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQge01hdFNlbGVjdENoYW5nZX0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL3NlbGVjdFwiO1xuaW1wb3J0IHtUaGVtZVBhbGV0dGV9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9jb3JlXCI7XG5pbXBvcnQge0Zsb2F0TGFiZWxUeXBlfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvZm9ybS1maWVsZFwiO1xuLy9cbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclNlcnZpY2V9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9uZ3gtbWF0LXRpbWVwaWNrZXIuc2VydmljZVwiO1xuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci1jbG9jay1mYWNlLmludGVyZmFjZVwiO1xuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyUGVyaW9kc30gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItcGVyaW9kcy5lbnVtXCI7XG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJVbml0c30gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItdW5pdHMuZW51bVwiO1xuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyVGhlbWV9IGZyb20gXCIuLi8uLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLXRoZW1lLmludGVyZmFjZVwiO1xuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyQWRhcHRlcn0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL25neC1tYXQtdGltZXBpY2tlci1hZGFwdGVyXCI7XG5pbXBvcnQge05HWF9NQVRfVElNRVBJQ0tFUl9MT0NBTEV9IGZyb20gXCIuLi8uLi90b2tlbnMvbmd4LW1hdC10aW1lcGlja2VyLXRpbWUtbG9jYWxlLnRva2VuXCI7XG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJVdGlsc30gZnJvbSBcIi4uLy4uL3V0aWxzL25neC1tYXQtdGltZXBpY2tlci51dGlsc1wiO1xuLy9cbmltcG9ydCB7RGF0ZVRpbWV9IGZyb20gXCJ0cy1sdXhvblwiO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBTdWJqZWN0fSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCB0YWtlVW50aWwsIHRhcH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcIm5neC1tYXQtdGltZXBpY2tlci1maWVsZFwiLFxuICAgIHRlbXBsYXRlVXJsOiBcIi4vbmd4LW1hdC10aW1lcGlja2VyLWZpZWxkLmNvbXBvbmVudC5odG1sXCIsXG4gICAgc3R5bGVVcmxzOiBbXCIuL25neC1tYXQtdGltZXBpY2tlci1maWVsZC5jb21wb25lbnQuc2Nzc1wiXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgTmd4TWF0VGltZXBpY2tlclNlcnZpY2UsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IE5neE1hdFRpbWVwaWNrZXJGaWVsZENvbXBvbmVudCxcbiAgICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH1cbiAgICBdLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgTmd4TWF0VGltZXBpY2tlckZpZWxkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcblxuICAgIGdldCBjb2xvcigpOiBUaGVtZVBhbGV0dGUge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sb3I7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgY29sb3IobmV3VmFsdWU6IFRoZW1lUGFsZXR0ZSkge1xuICAgICAgICB0aGlzLl9jb2xvciA9IG5ld1ZhbHVlO1xuICAgIH1cblxuICAgIGdldCBkZWZhdWx0VGltZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFRpbWU7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgZGVmYXVsdFRpbWUodmFsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fZGVmYXVsdFRpbWUgPSB2YWw7XG4gICAgICAgIHRoaXMuX2lzRGVmYXVsdFRpbWUgPSAhIXZhbDtcbiAgICB9XG5cbiAgICBnZXQgZmxvYXRMYWJlbCgpOiBGbG9hdExhYmVsVHlwZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mbG9hdExhYmVsO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IGZsb2F0TGFiZWwobmV3VmFsdWU6IEZsb2F0TGFiZWxUeXBlKSB7XG4gICAgICAgIHRoaXMuX2Zsb2F0TGFiZWwgPSBuZXdWYWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgZm9ybWF0KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXQ7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgZm9ybWF0KHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fZm9ybWF0ID0gdmFsdWUgPT09IDI0ID8gMjQgOiAxMjtcbiAgICAgICAgdGhpcy5taW5Ib3VyID0gdGhpcy5fZm9ybWF0ID09PSAxMiA/IDEgOiAwO1xuICAgICAgICB0aGlzLm1heEhvdXIgPSB0aGlzLl9mb3JtYXQgPT09IDEyID8gMTIgOiAyMztcbiAgICAgICAgdGhpcy5ob3Vyc0xpc3QgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZ2V0SG91cnModGhpcy5fZm9ybWF0KTtcbiAgICAgICAgY29uc3QgaXNEeW5hbWljYWxseUNoYW5nZWQgPSB2YWx1ZSAmJiAodGhpcy5fcHJldmlvdXNGb3JtYXQgJiYgdGhpcy5fcHJldmlvdXNGb3JtYXQgIT09IHRoaXMuX2Zvcm1hdCk7XG5cbiAgICAgICAgaWYgKGlzRHluYW1pY2FsbHlDaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVUaW1lKHRoaXMudGltZXBpY2tlclRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzRm9ybWF0ID0gdGhpcy5fZm9ybWF0O1xuICAgIH1cblxuICAgIGdldCBtYXgoKTogc3RyaW5nIHwgRGF0ZVRpbWUge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWF4O1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IG1heCh2YWx1ZTogc3RyaW5nIHwgRGF0ZVRpbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhpcy5fbWF4ID0gTmd4TWF0VGltZXBpY2tlckFkYXB0ZXIucGFyc2VUaW1lKHZhbHVlLCB7bG9jYWxlOiB0aGlzLl9sb2NhbGUsIGZvcm1hdDogdGhpcy5mb3JtYXR9KTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21heCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCBtaW4oKTogc3RyaW5nIHwgRGF0ZVRpbWUge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWluO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IG1pbih2YWx1ZTogc3RyaW5nIHwgRGF0ZVRpbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhpcy5fbWluID0gTmd4TWF0VGltZXBpY2tlckFkYXB0ZXIucGFyc2VUaW1lKHZhbHVlLCB7bG9jYWxlOiB0aGlzLl9sb2NhbGUsIGZvcm1hdDogdGhpcy5mb3JtYXR9KTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21pbiA9IHZhbHVlO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgY2FuY2VsQnRuVG1wbDogVGVtcGxhdGVSZWY8Tm9kZT47XG5cbiAgICBASW5wdXQoKVxuICAgIGNsb2NrVGhlbWU6IE5neE1hdFRpbWVwaWNrZXJUaGVtZTtcblxuICAgIEBJbnB1dCgpXG4gICAgY29uZmlybUJ0blRtcGw6IFRlbXBsYXRlUmVmPE5vZGU+O1xuXG4gICAgQElucHV0KClcbiAgICBjb250cm9sT25seTogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGhvdXIkOiBPYnNlcnZhYmxlPE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2U+O1xuXG4gICAgaG91cnNMaXN0OiBOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlW107XG4gICAgaXNDaGFuZ2VQZXJpb2REaXNhYmxlZDogYm9vbGVhbjtcbiAgICBpc1RpbWVSYW5nZVNldDogYm9vbGVhbjtcbiAgICBtYXhIb3VyID0gMTI7XG4gICAgbWluSG91ciA9IDE7XG4gICAgbWludXRlJDogT2JzZXJ2YWJsZTxOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlPjtcbiAgICBtaW51dGVzTGlzdDogTmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZVtdO1xuICAgIHBlcmlvZDogTmd4TWF0VGltZXBpY2tlclBlcmlvZHMgPSBOZ3hNYXRUaW1lcGlja2VyUGVyaW9kcy5BTTtcbiAgICBwZXJpb2RzOiBOZ3hNYXRUaW1lcGlja2VyUGVyaW9kc1tdID0gW1xuICAgICAgICBOZ3hNYXRUaW1lcGlja2VyUGVyaW9kcy5BTSxcbiAgICAgICAgTmd4TWF0VGltZXBpY2tlclBlcmlvZHMuUE1cbiAgICBdO1xuXG4gICAgQE91dHB1dCgpIHRpbWVDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gICAgdGltZXBpY2tlclRpbWU6IHN0cmluZztcblxuICAgIHRpbWVVbml0ID0gTmd4TWF0VGltZXBpY2tlclVuaXRzO1xuICAgIEBJbnB1dCgpIHRvZ2dsZUljb246IFRlbXBsYXRlUmVmPEhUTUxPYmplY3RFbGVtZW50PjtcblxuICAgIHByaXZhdGUgX2NvbG9yOiBUaGVtZVBhbGV0dGUgPSBcInByaW1hcnlcIjtcbiAgICBwcml2YXRlIF9kZWZhdWx0VGltZTogc3RyaW5nO1xuICAgIHByaXZhdGUgX2Zsb2F0TGFiZWw6IEZsb2F0TGFiZWxUeXBlID0gXCJuZXZlclwiO1xuICAgIHByaXZhdGUgX2Zvcm1hdCA9IDEyO1xuICAgIHByaXZhdGUgX2lzRGVmYXVsdFRpbWU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfaXNGaXJzdFRpbWVDaGFuZ2U6IGJvb2xlYW4gPSB0cnVlO1xuICAgIHByaXZhdGUgX21heDogc3RyaW5nIHwgRGF0ZVRpbWU7XG4gICAgcHJpdmF0ZSBfbWluOiBzdHJpbmcgfCBEYXRlVGltZTtcbiAgICBwcml2YXRlIF9wcmV2aW91c0Zvcm1hdDogbnVtYmVyO1xuICAgIHByaXZhdGUgX3NlbGVjdGVkSG91cjogbnVtYmVyO1xuICAgIHByaXZhdGUgX3N1YnNDdHJsJCA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF90aW1lcGlja2VyU2VydmljZTogTmd4TWF0VGltZXBpY2tlclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgQEluamVjdChOR1hfTUFUX1RJTUVQSUNLRVJfTE9DQUxFKSBwcml2YXRlIF9sb2NhbGU6IHN0cmluZykge1xuICAgIH1cblxuICAgIGNoYW5nZUhvdXIoaG91cjogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3RpbWVwaWNrZXJTZXJ2aWNlLmhvdXIgPSB0aGlzLmhvdXJzTGlzdC5maW5kKGggPT4gaC50aW1lID09PSBob3VyKTtcbiAgICAgICAgdGhpcy5fY2hhbmdlVGltZSgpO1xuICAgIH1cblxuICAgIGNoYW5nZU1pbnV0ZShtaW51dGU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLl90aW1lcGlja2VyU2VydmljZS5taW51dGUgPSB0aGlzLm1pbnV0ZXNMaXN0LmZpbmQobSA9PiBtLnRpbWUgPT09IG1pbnV0ZSk7XG4gICAgICAgIHRoaXMuX2NoYW5nZVRpbWUoKTtcbiAgICB9XG5cbiAgICBjaGFuZ2VQZXJpb2QoZXZlbnQ6IE1hdFNlbGVjdENoYW5nZSk6IHZvaWQge1xuICAgICAgICB0aGlzLl90aW1lcGlja2VyU2VydmljZS5wZXJpb2QgPSBldmVudC52YWx1ZSBhcyBOZ3hNYXRUaW1lcGlja2VyUGVyaW9kcztcbiAgICAgICAgdGhpcy5fY2hhbmdlVGltZSgpO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9zdWJzQ3RybCQubmV4dCgpO1xuICAgICAgICB0aGlzLl9zdWJzQ3RybCQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5faW5pdFRpbWUodGhpcy5kZWZhdWx0VGltZSk7XG5cbiAgICAgICAgdGhpcy5ob3Vyc0xpc3QgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZ2V0SG91cnModGhpcy5fZm9ybWF0KTtcbiAgICAgICAgdGhpcy5taW51dGVzTGlzdCA9IE5neE1hdFRpbWVwaWNrZXJVdGlscy5nZXRNaW51dGVzKCk7XG4gICAgICAgIHRoaXMuaXNUaW1lUmFuZ2VTZXQgPSAhISh0aGlzLm1pbiB8fCB0aGlzLm1heCk7XG5cbiAgICAgICAgdGhpcy5ob3VyJCA9IHRoaXMuX3RpbWVwaWNrZXJTZXJ2aWNlLnNlbGVjdGVkSG91ci5waXBlKFxuICAgICAgICAgICAgdGFwKChjbG9ja1RpbWU6IE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2UpID0+IHRoaXMuX3NlbGVjdGVkSG91ciA9IGNsb2NrVGltZS50aW1lKSxcbiAgICAgICAgICAgIG1hcCh0aGlzLl9jaGFuZ2VEZWZhdWx0VGltZVZhbHVlLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgdGFwKCgpID0+IHRoaXMuaXNUaW1lUmFuZ2VTZXQgJiYgdGhpcy5fdXBkYXRlQXZhaWxhYmxlTWludXRlcygpKVxuICAgICAgICApIGFzIE9ic2VydmFibGU8Tmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZT47XG4gICAgICAgIHRoaXMubWludXRlJCA9IHRoaXMuX3RpbWVwaWNrZXJTZXJ2aWNlLnNlbGVjdGVkTWludXRlLnBpcGUoXG4gICAgICAgICAgICBtYXAodGhpcy5fY2hhbmdlRGVmYXVsdFRpbWVWYWx1ZS5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIHRhcCgoKSA9PiB0aGlzLl9pc0ZpcnN0VGltZUNoYW5nZSA9IGZhbHNlKVxuICAgICAgICApIGFzIE9ic2VydmFibGU8Tmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZT47XG5cbiAgICAgICAgaWYgKHRoaXMuZm9ybWF0ID09PSAxMikge1xuICAgICAgICAgICAgdGhpcy5fdGltZXBpY2tlclNlcnZpY2Uuc2VsZWN0ZWRQZXJpb2QucGlwZShcbiAgICAgICAgICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZDxOZ3hNYXRUaW1lcGlja2VyUGVyaW9kcz4oKSxcbiAgICAgICAgICAgICAgICB0YXAoKHBlcmlvZDogTmd4TWF0VGltZXBpY2tlclBlcmlvZHMpID0+IHRoaXMucGVyaW9kID0gcGVyaW9kKSxcbiAgICAgICAgICAgICAgICB0YXAocGVyaW9kID0+IHRoaXMuaXNDaGFuZ2VQZXJpb2REaXNhYmxlZCA9IHRoaXMuX2lzUGVyaW9kRGlzYWJsZWQocGVyaW9kKSksXG4gICAgICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuX3N1YnNDdHJsJClcbiAgICAgICAgICAgICkuc3Vic2NyaWJlKCgpID0+IHRoaXMuaXNUaW1lUmFuZ2VTZXQgJiYgdGhpcy5fdXBkYXRlQXZhaWxhYmxlVGltZSgpKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgb25UaW1lU2V0KHRpbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLl91cGRhdGVUaW1lKHRpbWUpO1xuICAgICAgICB0aGlzLl9lbWl0TG9jYWxUaW1lQ2hhbmdlKHRpbWUpO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9vbkNoYW5nZSA9IGZuO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKF9mbl86IGFueSk6IHZvaWQge1xuICAgIH1cblxuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgICB9XG5cbiAgICB3cml0ZVZhbHVlKHZhbDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2luaXRUaW1lKHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNldFRpbWUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX2NoYW5nZURlZmF1bHRUaW1lVmFsdWUoY2xvY2tGYWNlVGltZTogTmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZSk6IE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2Uge1xuICAgICAgICBpZiAoIXRoaXMuX2lzRGVmYXVsdFRpbWUgJiYgdGhpcy5faXNGaXJzdFRpbWVDaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiB7Li4uY2xvY2tGYWNlVGltZSwgdGltZTogbnVsbH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2xvY2tGYWNlVGltZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9jaGFuZ2VUaW1lKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB0aW1lID0gdGhpcy5fdGltZXBpY2tlclNlcnZpY2UuZ2V0RnVsbFRpbWUodGhpcy5mb3JtYXQpO1xuICAgICAgICB0aGlzLnRpbWVwaWNrZXJUaW1lID0gdGltZTtcblxuICAgICAgICB0aGlzLl9lbWl0TG9jYWxUaW1lQ2hhbmdlKHRpbWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2VtaXRMb2NhbFRpbWVDaGFuZ2UodGltZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGxvY2FsVGltZSA9IE5neE1hdFRpbWVwaWNrZXJBZGFwdGVyLnRvTG9jYWxlVGltZVN0cmluZyh0aW1lLCB7Zm9ybWF0OiB0aGlzLmZvcm1hdCwgbG9jYWxlOiB0aGlzLl9sb2NhbGV9KTtcblxuICAgICAgICB0aGlzLl9vbkNoYW5nZShsb2NhbFRpbWUpO1xuICAgICAgICB0aGlzLnRpbWVDaGFuZ2VkLmVtaXQobG9jYWxUaW1lKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9pbml0VGltZSh0aW1lKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGlzRGVmYXVsdFRpbWVBdmFpbGFibGUgPSBOZ3hNYXRUaW1lcGlja2VyQWRhcHRlclxuICAgICAgICAuaXNUaW1lQXZhaWxhYmxlKHRpbWUsIHRoaXMubWluIGFzIERhdGVUaW1lLCB0aGlzLm1heCBhcyBEYXRlVGltZSwgXCJtaW51dGVzXCIsIG51bGwsIHRoaXMuZm9ybWF0KTtcbiAgICAgICAgaWYgKCFpc0RlZmF1bHRUaW1lQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5taW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVUaW1lKE5neE1hdFRpbWVwaWNrZXJBZGFwdGVyLmZyb21EYXRlVGltZVRvU3RyaW5nKHRoaXMubWluIGFzIERhdGVUaW1lLCB0aGlzLmZvcm1hdCkpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubWF4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGltZShOZ3hNYXRUaW1lcGlja2VyQWRhcHRlci5mcm9tRGF0ZVRpbWVUb1N0cmluZyh0aGlzLm1heCBhcyBEYXRlVGltZSwgdGhpcy5mb3JtYXQpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cGRhdGVUaW1lKHRpbWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2lzUGVyaW9kRGlzYWJsZWQocGVyaW9kKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZGlzYWJsZUhvdXJzKE5neE1hdFRpbWVwaWNrZXJVdGlscy5nZXRIb3VycygxMiksIHtcbiAgICAgICAgICAgIG1pbjogdGhpcy5taW4gYXMgRGF0ZVRpbWUsXG4gICAgICAgICAgICBtYXg6IHRoaXMubWF4IGFzIERhdGVUaW1lLFxuICAgICAgICAgICAgZm9ybWF0OiAxMixcbiAgICAgICAgICAgIHBlcmlvZDogcGVyaW9kID09PSBOZ3hNYXRUaW1lcGlja2VyUGVyaW9kcy5BTSA/IE5neE1hdFRpbWVwaWNrZXJQZXJpb2RzLlBNIDogTmd4TWF0VGltZXBpY2tlclBlcmlvZHMuQU1cbiAgICAgICAgfSkuZXZlcnkodGltZSA9PiB0aW1lLmRpc2FibGVkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9vbkNoYW5nZTogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQgPSAoKSA9PiB7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfcmVzZXRUaW1lKCk6IHZvaWQge1xuICAgICAgICB0aGlzLl90aW1lcGlja2VyU2VydmljZS5ob3VyID0ge2FuZ2xlOiAwLCB0aW1lOiBudWxsfTtcbiAgICAgICAgdGhpcy5fdGltZXBpY2tlclNlcnZpY2UubWludXRlID0ge2FuZ2xlOiAwLCB0aW1lOiBudWxsfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF91cGRhdGVBdmFpbGFibGVIb3VycygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ob3Vyc0xpc3QgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZGlzYWJsZUhvdXJzKHRoaXMuaG91cnNMaXN0LCB7XG4gICAgICAgICAgICBtaW46IHRoaXMubWluIGFzIERhdGVUaW1lLFxuICAgICAgICAgICAgbWF4OiB0aGlzLm1heCBhcyBEYXRlVGltZSxcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5mb3JtYXQsXG4gICAgICAgICAgICBwZXJpb2Q6IHRoaXMucGVyaW9kXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3VwZGF0ZUF2YWlsYWJsZU1pbnV0ZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMubWludXRlc0xpc3QgPSBOZ3hNYXRUaW1lcGlja2VyVXRpbHMuZGlzYWJsZU1pbnV0ZXModGhpcy5taW51dGVzTGlzdCwgdGhpcy5fc2VsZWN0ZWRIb3VyLCB7XG4gICAgICAgICAgICBtaW46IHRoaXMubWluIGFzIERhdGVUaW1lLFxuICAgICAgICAgICAgbWF4OiB0aGlzLm1heCBhcyBEYXRlVGltZSxcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5mb3JtYXQsXG4gICAgICAgICAgICBwZXJpb2Q6IHRoaXMucGVyaW9kXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3VwZGF0ZUF2YWlsYWJsZVRpbWUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUF2YWlsYWJsZUhvdXJzKCk7XG4gICAgICAgIGlmICh0aGlzLl9zZWxlY3RlZEhvdXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUF2YWlsYWJsZU1pbnV0ZXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX3VwZGF0ZVRpbWUodGltZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aW1lKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRUaW1lID0gTmd4TWF0VGltZXBpY2tlckFkYXB0ZXIuZm9ybWF0VGltZSh0aW1lLCB7bG9jYWxlOiB0aGlzLl9sb2NhbGUsIGZvcm1hdDogdGhpcy5mb3JtYXR9KTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVwaWNrZXJTZXJ2aWNlLnNldERlZmF1bHRUaW1lSWZBdmFpbGFibGUoZm9ybWF0dGVkVGltZSwgdGhpcy5taW4gYXMgRGF0ZVRpbWUsIHRoaXMubWF4IGFzIERhdGVUaW1lLCB0aGlzLmZvcm1hdCk7XG4gICAgICAgICAgICB0aGlzLnRpbWVwaWNrZXJUaW1lID0gZm9ybWF0dGVkVGltZTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19
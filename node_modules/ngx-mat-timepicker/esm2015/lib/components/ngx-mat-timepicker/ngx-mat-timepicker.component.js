/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker/ngx-mat-timepicker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, HostBinding, Input, Output, TemplateRef, ViewContainerRef } from "@angular/core";
import { Overlay } from "@angular/cdk/overlay";
import { MatDialog } from "@angular/material/dialog";
import { SmpDomService } from "smp-core-utils";
//
import { NgxMatTimepickerEventService } from "../../services/ngx-mat-timepicker-event.service";
import { NgxMatTimepickerDialogComponent } from "../ngx-mat-timepicker-dialog/ngx-mat-timepicker-dialog.component";
import { NGX_MAT_TIMEPICKER_CONFIG } from "../../tokens/ngx-mat-timepicker-config.token";
//
import { DateTime } from "ts-luxon";
import { Subject } from "rxjs";
/** @type {?} */
let config;
export class NgxMatTimepickerComponent {
    /**
     * @param {?} _vcr
     * @param {?} _eventService
     * @param {?} _dialog
     * @param {?} _overlay
     * @param {?} _domService
     */
    constructor(_vcr, _eventService, _dialog, _overlay, _domService) {
        this._vcr = _vcr;
        this._eventService = _eventService;
        this._dialog = _dialog;
        this._overlay = _overlay;
        this._domService = _domService;
        this.closed = new EventEmitter();
        this.hourSelected = new EventEmitter();
        this.hoursOnly = false;
        this.id = `ngx_mat_timepicker_${++NgxMatTimepickerComponent.nextId}`;
        this.isEsc = !0;
        this.opened = new EventEmitter();
        this.overlayPositions = [
            {
                originX: "center",
                originY: "bottom",
                overlayX: "center",
                overlayY: "top",
                offsetY: 0
            },
            {
                originX: "center",
                originY: "top",
                overlayX: "center",
                overlayY: "bottom",
                offsetY: 0
            }
        ];
        this.showPicker = !1;
        this.timeChanged = new EventEmitter();
        this.timeSet = new EventEmitter();
        this.timeUpdated = new Subject(); // used in the dialog, check if a better approach can be used
        // used in the dialog, check if a better approach can be used
        this._color = "primary";
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set color(newValue) {
        this._color = newValue;
    }
    /**
     * @return {?}
     */
    get color() {
        return this._color;
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._timepickerInput && this._timepickerInput.disabled;
    }
    /**
     * @return {?}
     */
    get format() {
        return this._timepickerInput ? this._timepickerInput.format : this._format;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set format(value) {
        this._format = value === 24 ? 24 : 12;
    }
    /**
     * @return {?}
     */
    get inputElement() {
        return this._timepickerInput && this._timepickerInput.element;
    }
    /**
     * @return {?}
     */
    get maxTime() {
        return this._timepickerInput ? ((/** @type {?} */ (this._timepickerInput.max))) : this.max;
    }
    /**
     * @return {?}
     */
    get minTime() {
        return this._timepickerInput ? ((/** @type {?} */ (this._timepickerInput.min))) : this.min;
    }
    /**
     * @return {?}
     */
    get minutesGap() {
        return this._minutesGap;
    }
    /**
     * @param {?} gap
     * @return {?}
     */
    set minutesGap(gap) {
        if (gap == null) {
            return;
        }
        gap = Math.floor(gap);
        this._minutesGap = gap <= 59 ? gap : 1;
    }
    /**
     * @return {?}
     */
    get overlayOrigin() {
        return this._timepickerInput ? this._timepickerInput.cdkOverlayOrigin : void 0;
    }
    /**
     * @return {?}
     */
    get time() {
        return this._timepickerInput && this._timepickerInput.value;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set ngxMatTimepickerTheme(newValue) {
        this._ngxMatTimepickerTheme = newValue;
    }
    /**
     * @return {?}
     */
    close() {
        if (this.appendToInput) {
            this._overlayRef && this._overlayRef.dispose();
        }
        else {
            this._dialogRef && this._dialogRef.close();
        }
        this.showPicker = !1;
        this.closed.emit();
    }
    /**
     * @return {?}
     */
    open() {
        config = {
            timepickerBaseRef: this,
            time: this.time,
            defaultTime: this.defaultTime,
            maxTime: this.maxTime,
            minTime: this.minTime,
            format: this.format,
            minutesGap: this.minutesGap,
            disableAnimation: this.disableAnimation,
            cancelBtnTmpl: this.cancelBtnTmpl,
            confirmBtnTmpl: this.confirmBtnTmpl,
            editableHintTmpl: this.editableHintTmpl,
            disabled: this.disabled,
            enableKeyboardInput: this.enableKeyboardInput,
            preventOverlayClick: this.preventOverlayClick,
            appendToInput: this.appendToInput,
            hoursOnly: this.hoursOnly,
            theme: this.theme || this._ngxMatTimepickerTheme,
            timepickerClass: this.timepickerClass,
            inputElement: this.inputElement,
            color: this.color
        };
        if (this.appendToInput) {
            this.showPicker = !0;
        }
        else {
            this._dialogRef = this._dialog.open(NgxMatTimepickerDialogComponent, {
                panelClass: "ngx-mat-timepicker-dialog",
                data: Object.assign({}, config)
            });
            this._dialogRef
                .afterClosed()
                .subscribe((/**
             * @return {?}
             */
            () => {
                this.closed.emit();
            }));
        }
        this.opened.emit();
    }
    /**
     *
     * Register an input with this timepicker.
     * input - The timepicker input to register with this timepicker
     * @param {?} input
     * @return {?}
     */
    registerInput(input) {
        if (this._timepickerInput) {
            throw Error("A Timepicker can only be associated with a single input.");
        }
        this._timepickerInput = input;
    }
    /**
     * @return {?}
     */
    unregisterInput() {
        this._timepickerInput = void 0;
    }
    /**
     * @param {?} time
     * @return {?}
     */
    updateTime(time) {
        this.timeUpdated.next(time);
    }
}
NgxMatTimepickerComponent.nextId = 0;
NgxMatTimepickerComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-mat-timepicker",
                template: `
		<ng-template
				cdkConnectedOverlay
				[cdkConnectedOverlayPositions]="overlayPositions"
				[cdkConnectedOverlayHasBackdrop]="!0"
				cdkConnectedOverlayBackdropClass="cdk-overlay-transparent-backdrop"
				(backdropClick)="close()"
				[cdkConnectedOverlayOrigin]="overlayOrigin"
				[cdkConnectedOverlayOpen]="showPicker">
			<ngx-mat-timepicker-standalone></ngx-mat-timepicker-standalone>
		</ng-template>`,
                providers: [
                    {
                        provide: NGX_MAT_TIMEPICKER_CONFIG, /**
                         * @return {?}
                         */
                        useFactory() {
                            return config;
                        }
                    }
                ]
            }] }
];
/** @nocollapse */
NgxMatTimepickerComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: NgxMatTimepickerEventService },
    { type: MatDialog },
    { type: Overlay },
    { type: SmpDomService }
];
NgxMatTimepickerComponent.propDecorators = {
    color: [{ type: Input }],
    format: [{ type: Input }],
    minutesGap: [{ type: Input }],
    appendToInput: [{ type: Input }],
    cancelBtnTmpl: [{ type: Input }],
    closed: [{ type: Output }],
    confirmBtnTmpl: [{ type: Input }],
    defaultTime: [{ type: Input }],
    disableAnimation: [{ type: Input }],
    editableHintTmpl: [{ type: Input }],
    enableKeyboardInput: [{ type: Input }],
    hourSelected: [{ type: Output }],
    hoursOnly: [{ type: Input }],
    id: [{ type: HostBinding, args: ["id",] }],
    isEsc: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    opened: [{ type: Output }],
    preventOverlayClick: [{ type: Input }],
    theme: [{ type: Input }],
    timeChanged: [{ type: Output }],
    timepickerClass: [{ type: Input }],
    timeSet: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NgxMatTimepickerComponent.nextId;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.appendToInput;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.cancelBtnTmpl;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.closed;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.confirmBtnTmpl;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.defaultTime;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.disableAnimation;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.editableHintTmpl;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.enableKeyboardInput;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.hourSelected;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.hoursOnly;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.id;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.isEsc;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.max;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.min;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.opened;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.overlayPositions;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.preventOverlayClick;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.showPicker;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.theme;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.timeChanged;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.timepickerClass;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.timeSet;
    /** @type {?} */
    NgxMatTimepickerComponent.prototype.timeUpdated;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._dialogRef;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._format;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._minutesGap;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._ngxMatTimepickerTheme;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._overlayRef;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._timepickerInput;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._vcr;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._eventService;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._dialog;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerComponent.prototype._domService;
}
//# sourceMappingURL=data:application/json;base64,
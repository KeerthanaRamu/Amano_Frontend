/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-hours-face/ngx-mat-timepicker-hours-face.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, Input, Output } from "@angular/core";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
//
import { DateTime } from "ts-luxon";
export class NgxMatTimepickerHoursFaceDirective {
    constructor() {
        this.hourChange = new EventEmitter();
        this.hourSelected = new EventEmitter();
        this.hoursList = [];
        this._color = "primary";
        this._format = 24;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set color(newValue) {
        this._color = newValue;
    }
    /**
     * @return {?}
     */
    get color() {
        return this._color;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set format(newValue) {
        this._format = newValue;
        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);
    }
    /**
     * @return {?}
     */
    get format() {
        return this._format;
    }
    /**
     * @param {?} time
     * @return {?}
     */
    onTimeSelected(time) {
        this.hourSelected.next(time);
    }
}
NgxMatTimepickerHoursFaceDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ngxMatTimepickerHoursFace]"
            },] }
];
/** @nocollapse */
NgxMatTimepickerHoursFaceDirective.ctorParameters = () => [];
NgxMatTimepickerHoursFaceDirective.propDecorators = {
    color: [{ type: Input }],
    format: [{ type: Input }],
    hourChange: [{ type: Output }],
    hourSelected: [{ type: Output }],
    maxTime: [{ type: Input }],
    minTime: [{ type: Input }],
    selectedHour: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxMatTimepickerHoursFaceDirective.prototype.hourChange;
    /** @type {?} */
    NgxMatTimepickerHoursFaceDirective.prototype.hourSelected;
    /** @type {?} */
    NgxMatTimepickerHoursFaceDirective.prototype.hoursList;
    /** @type {?} */
    NgxMatTimepickerHoursFaceDirective.prototype.maxTime;
    /** @type {?} */
    NgxMatTimepickerHoursFaceDirective.prototype.minTime;
    /** @type {?} */
    NgxMatTimepickerHoursFaceDirective.prototype.selectedHour;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerHoursFaceDirective.prototype._color;
    /**
     * @type {?}
     * @protected
     */
    NgxMatTimepickerHoursFaceDirective.prototype._format;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWhvdXJzLWZhY2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hdC10aW1lcGlja2VyLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmd4LW1hdC10aW1lcGlja2VyLWhvdXJzLWZhY2Uvbmd4LW1hdC10aW1lcGlja2VyLWhvdXJzLWZhY2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFZLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUkvRSxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQzs7QUFFM0UsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUtsQyxNQUFNLE9BQU8sa0NBQWtDO0lBZ0MzQztRQVhVLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBNkIsQ0FBQztRQUMzRCxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFcEQsY0FBUyxHQUFnQyxFQUFFLENBQUM7UUFLbEMsV0FBTSxHQUFpQixTQUFTLENBQUM7UUFDakMsWUFBTyxHQUFZLEVBQUUsQ0FBQztJQUdoQyxDQUFDOzs7OztJQS9CRCxJQUNJLEtBQUssQ0FBQyxRQUFzQjtRQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDOzs7O0lBRUQsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBRUQsSUFDSSxNQUFNLENBQUMsUUFBaUI7UUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Ozs7SUFFRCxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFnQkQsY0FBYyxDQUFDLElBQVk7UUFDdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQzs7O1lBeENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsNkJBQTZCO2FBQzFDOzs7OztvQkFHSSxLQUFLO3FCQVNMLEtBQUs7eUJBVUwsTUFBTTsyQkFDTixNQUFNO3NCQUdOLEtBQUs7c0JBQ0wsS0FBSzsyQkFDTCxLQUFLOzs7O0lBTk4sd0RBQXFFOztJQUNyRSwwREFBb0Q7O0lBRXBELHVEQUE0Qzs7SUFDNUMscURBQTJCOztJQUMzQixxREFBMkI7O0lBQzNCLDBEQUFpRDs7Ozs7SUFFakQsb0RBQTJDOzs7OztJQUMzQyxxREFBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7VGhlbWVQYWxldHRlfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvY29yZVwiO1xuLy9cbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZX0gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItY2xvY2stZmFjZS5pbnRlcmZhY2VcIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclV0aWxzfSBmcm9tIFwiLi4vLi4vdXRpbHMvbmd4LW1hdC10aW1lcGlja2VyLnV0aWxzXCI7XG4vL1xuaW1wb3J0IHtEYXRlVGltZX0gZnJvbSBcInRzLWx1eG9uXCI7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiBcIltuZ3hNYXRUaW1lcGlja2VySG91cnNGYWNlXVwiXG59KVxuZXhwb3J0IGNsYXNzIE5neE1hdFRpbWVwaWNrZXJIb3Vyc0ZhY2VEaXJlY3RpdmUge1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgY29sb3IobmV3VmFsdWU6IFRoZW1lUGFsZXR0ZSkge1xuICAgICAgICB0aGlzLl9jb2xvciA9IG5ld1ZhbHVlO1xuICAgIH1cblxuICAgIGdldCBjb2xvcigpOiBUaGVtZVBhbGV0dGUge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sb3I7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgZm9ybWF0KG5ld1ZhbHVlOiAxMiB8IDI0KSB7XG4gICAgICAgIHRoaXMuX2Zvcm1hdCA9IG5ld1ZhbHVlO1xuICAgICAgICB0aGlzLmhvdXJzTGlzdCA9IE5neE1hdFRpbWVwaWNrZXJVdGlscy5nZXRIb3Vycyh0aGlzLl9mb3JtYXQpO1xuICAgIH1cblxuICAgIGdldCBmb3JtYXQoKTogMTIgfCAyNCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXQ7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpIGhvdXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2U+KCk7XG4gICAgQE91dHB1dCgpIGhvdXJTZWxlY3RlZCA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gICAgaG91cnNMaXN0OiBOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlW10gPSBbXTtcbiAgICBASW5wdXQoKSBtYXhUaW1lOiBEYXRlVGltZTtcbiAgICBASW5wdXQoKSBtaW5UaW1lOiBEYXRlVGltZTtcbiAgICBASW5wdXQoKSBzZWxlY3RlZEhvdXI6IE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2U7XG5cbiAgICBwcm90ZWN0ZWQgX2NvbG9yOiBUaGVtZVBhbGV0dGUgPSBcInByaW1hcnlcIjtcbiAgICBwcm90ZWN0ZWQgX2Zvcm1hdDogMTIgfCAyNCA9IDI0O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgb25UaW1lU2VsZWN0ZWQodGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaG91clNlbGVjdGVkLm5leHQodGltZSk7XG4gICAgfVxufVxuIl19
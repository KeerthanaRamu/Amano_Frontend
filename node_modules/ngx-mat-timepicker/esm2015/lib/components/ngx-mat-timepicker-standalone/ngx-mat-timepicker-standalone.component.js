/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-standalone/ngx-mat-timepicker-standalone.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Inject, ViewEncapsulation } from "@angular/core";
//
import { NgxMatTimepickerService } from "../../services/ngx-mat-timepicker.service";
import { NgxMatTimepickerEventService } from "../../services/ngx-mat-timepicker-event.service";
import { NgxMatTimepickerBaseDirective } from "../../directives/ngx-mat-timepicker-base.directive";
import { NGX_MAT_TIMEPICKER_LOCALE } from "../../tokens/ngx-mat-timepicker-time-locale.token";
import { NGX_MAT_TIMEPICKER_CONFIG } from "../../tokens/ngx-mat-timepicker-config.token";
export class NgxMatTimepickerStandaloneComponent extends NgxMatTimepickerBaseDirective {
    /**
     * @param {?} data
     * @param {?} timepickerSrv
     * @param {?} eventSrv
     * @param {?} locale
     */
    constructor(data, timepickerSrv, eventSrv, locale) {
        super(timepickerSrv, eventSrv, locale, data);
        this.data = data;
    }
    /**
     * @return {?}
     */
    close() {
        this.data.timepickerBaseRef.close();
    }
}
NgxMatTimepickerStandaloneComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-mat-timepicker-standalone",
                template: "<ng-template #cancelBtnDefault>\n\t<button mat-button\n\t\t\t[color]=\"color\">CANCEL\n\t</button>\n</ng-template>\n<ng-template #confirmBtnDefault>\n\t<button mat-button\n\t\t\t[color]=\"color\">OK\n\t</button>\n</ng-template>\n<div cdkTrapFocus\n\t cdkTrapFocusAutoCapture>\n\t<ngx-mat-timepicker-content [appendToInput]=\"data.appendToInput\"\n\t\t\t\t\t\t\t\t[inputElement]=\"data.inputElement\"\n\t\t\t\t\t\t\t\t[ngxMatTimepickerTheme]=\"data.theme\">\n\t\t<div class=\"timepicker\"\n\t\t\t [ngClass]=\"data.timepickerClass\">\n\t\t\t<mat-toolbar [color]=\"color\"\n\t\t\t\t\t\t class=\"timepicker-header\">\n\t\t\t\t<ngx-mat-timepicker-dial [color]=\"color\"\n\t\t\t\t\t\t\t\t\t\t [format]=\"data.format\"\n\t\t\t\t\t\t\t\t\t\t [hour]=\"(selectedHour | async)?.time\"\n\t\t\t\t\t\t\t\t\t\t [minute]=\"(selectedMinute | async)?.time\"\n\t\t\t\t\t\t\t\t\t\t [period]=\"selectedPeriod | async\"\n\t\t\t\t\t\t\t\t\t\t [activeTimeUnit]=\"activeTimeUnit\"\n\t\t\t\t\t\t\t\t\t\t [minTime]=\"data.minTime\"\n\t\t\t\t\t\t\t\t\t\t [maxTime]=\"data.maxTime\"\n\t\t\t\t\t\t\t\t\t\t [isEditable]=\"data.enableKeyboardInput\"\n\t\t\t\t\t\t\t\t\t\t [editableHintTmpl]=\"data.editableHintTmpl\"\n\t\t\t\t\t\t\t\t\t\t [minutesGap]=\"data.minutesGap\"\n\t\t\t\t\t\t\t\t\t\t [hoursOnly]=\"data.hoursOnly\"\n\t\t\t\t\t\t\t\t\t\t (periodChanged)=\"changePeriod($event)\"\n\t\t\t\t\t\t\t\t\t\t (timeUnitChanged)=\"changeTimeUnit($event)\"\n\t\t\t\t\t\t\t\t\t\t (hourChanged)=\"onHourChange($event)\"\n\t\t\t\t\t\t\t\t\t\t (minuteChanged)=\"onMinuteChange($event)\">\n\t\t\t\t</ngx-mat-timepicker-dial>\n\t\t\t</mat-toolbar>\n\t\t\t<div class=\"timepicker__main-content\">\n\t\t\t\t<div class=\"timepicker__body\"\n\t\t\t\t\t [ngSwitch]=\"activeTimeUnit\">\n\t\t\t\t\t<div *ngSwitchCase=\"timeUnit.HOUR\">\n\t\t\t\t\t\t<ngx-mat-timepicker-24-hours-face *ngIf=\"data.format === 24;else ampmHours\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  [color]=\"color\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  (hourChange)=\"onHourChange($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  [selectedHour]=\"selectedHour | async\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  [minTime]=\"data.minTime\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  [maxTime]=\"data.maxTime\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  [format]=\"data.format\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  (hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-24-hours-face>\n\t\t\t\t\t\t<ng-template #ampmHours>\n\t\t\t\t\t\t\t<ngx-mat-timepicker-12-hours-face\n\t\t\t\t\t\t\t\t\t[color]=\"color\"\n\t\t\t\t\t\t\t\t\t(hourChange)=\"onHourChange($event)\"\n\t\t\t\t\t\t\t\t\t[selectedHour]=\"selectedHour | async\"\n\t\t\t\t\t\t\t\t\t[period]=\"selectedPeriod | async\"\n\t\t\t\t\t\t\t\t\t[minTime]=\"data.minTime\"\n\t\t\t\t\t\t\t\t\t[maxTime]=\"data.maxTime\"\n\t\t\t\t\t\t\t\t\t(hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-12-hours-face>\n\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ngx-mat-timepicker-minutes-face *ngSwitchCase=\"timeUnit.MINUTE\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t [color]=\"color\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t [selectedMinute]=\"selectedMinute | async\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t [selectedHour]=\"(selectedHour | async)?.time\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t [minTime]=\"data.minTime\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t [maxTime]=\"data.maxTime\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t [format]=\"data.format\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t [period]=\"selectedPeriod | async\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t [minutesGap]=\"data.minutesGap\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t (minuteChange)=\"onMinuteChange($event)\"></ngx-mat-timepicker-minutes-face>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</ngx-mat-timepicker-content>\n\n\t<div class=\"ngx-mat-timepicker-standalone-actions\">\n\t\t<div (click)=\"close()\">\n\t\t\t<ng-container\n\t\t\t\t\t*ngTemplateOutlet=\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\"></ng-container>\n\t\t</div>\n\t\t<div (click)=\"setTime()\">\n\t\t\t<ng-container\n\t\t\t\t\t*ngTemplateOutlet=\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\"></ng-container>\n\t\t</div>\n\t</div>\n</div>\n",
                // tslint:disable-next-line:no-host-metadata-property
                host: {
                    "[class.mat-app-background]": "true"
                },
                encapsulation: ViewEncapsulation.None,
                styles: ["ngx-mat-timepicker-standalone{display:block;border-radius:4px;box-shadow:0 0 5px 2px rgba(0,0,0,.25);overflow:hidden}ngx-mat-timepicker-standalone ngx-mat-timepicker-content{display:block}ngx-mat-timepicker-standalone ngx-mat-timepicker-content mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-standalone ngx-mat-timepicker-content .clock-face{margin:16px}ngx-mat-timepicker-standalone .ngx-mat-timepicker-standalone-actions{display:flex;flex-direction:row;justify-content:flex-end;padding:0 16px 16px}"]
            }] }
];
/** @nocollapse */
NgxMatTimepickerStandaloneComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_CONFIG,] }] },
    { type: NgxMatTimepickerService },
    { type: NgxMatTimepickerEventService },
    { type: String, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_LOCALE,] }] }
];
if (false) {
    /** @type {?} */
    NgxMatTimepickerStandaloneComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLXN0YW5kYWxvbmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hdC10aW1lcGlja2VyLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmd4LW1hdC10aW1lcGlja2VyLXN0YW5kYWxvbmUvbmd4LW1hdC10aW1lcGlja2VyLXN0YW5kYWxvbmUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7O0FBRW5FLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDJDQUEyQyxDQUFDO0FBQ2xGLE9BQU8sRUFBQyw0QkFBNEIsRUFBQyxNQUFNLGlEQUFpRCxDQUFDO0FBRTdGLE9BQU8sRUFBQyw2QkFBNkIsRUFBQyxNQUFNLG9EQUFvRCxDQUFDO0FBQ2pHLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLG1EQUFtRCxDQUFDO0FBQzVGLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLDhDQUE4QyxDQUFDO0FBWXZGLE1BQU0sT0FBTyxtQ0FBb0MsU0FBUSw2QkFBNkI7Ozs7Ozs7SUFFbEYsWUFBc0QsSUFBNEIsRUFDdEUsYUFBc0MsRUFDdEMsUUFBc0MsRUFDSCxNQUFjO1FBRXpELEtBQUssQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUxLLFNBQUksR0FBSixJQUFJLENBQXdCO0lBTWxGLENBQUM7Ozs7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN4QyxDQUFDOzs7WUF0QkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwrQkFBK0I7Z0JBQ3pDLDI5SEFBMkQ7O2dCQUczRCxJQUFJLEVBQUU7b0JBQ0osNEJBQTRCLEVBQUUsTUFBTTtpQkFDckM7Z0JBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2FBQ3hDOzs7OzRDQUdnQixNQUFNLFNBQUMseUJBQXlCO1lBbkJ6Qyx1QkFBdUI7WUFDdkIsNEJBQTRCO3lDQXFCbkIsTUFBTSxTQUFDLHlCQUF5Qjs7OztJQUhqQyxtREFBc0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5qZWN0LCBWaWV3RW5jYXBzdWxhdGlvbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbi8vXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJTZXJ2aWNlfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvbmd4LW1hdC10aW1lcGlja2VyLnNlcnZpY2VcIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckV2ZW50U2VydmljZX0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL25neC1tYXQtdGltZXBpY2tlci1ldmVudC5zZXJ2aWNlXCI7XG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJDb25maWd9IGZyb20gXCIuLi8uLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLWNvbmZpZy5pbnRlcmZhY2VcIjtcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckJhc2VEaXJlY3RpdmV9IGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL25neC1tYXQtdGltZXBpY2tlci1iYXNlLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHtOR1hfTUFUX1RJTUVQSUNLRVJfTE9DQUxFfSBmcm9tIFwiLi4vLi4vdG9rZW5zL25neC1tYXQtdGltZXBpY2tlci10aW1lLWxvY2FsZS50b2tlblwiO1xuaW1wb3J0IHtOR1hfTUFUX1RJTUVQSUNLRVJfQ09ORklHfSBmcm9tIFwiLi4vLi4vdG9rZW5zL25neC1tYXQtdGltZXBpY2tlci1jb25maWcudG9rZW5cIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwibmd4LW1hdC10aW1lcGlja2VyLXN0YW5kYWxvbmVcIixcbiAgICB0ZW1wbGF0ZVVybDogXCJuZ3gtbWF0LXRpbWVwaWNrZXItc3RhbmRhbG9uZS5jb21wb25lbnQuaHRtbFwiLFxuICAgIHN0eWxlVXJsczogW1wibmd4LW1hdC10aW1lcGlja2VyLXN0YW5kYWxvbmUuY29tcG9uZW50LnNjc3NcIl0sXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWhvc3QtbWV0YWRhdGEtcHJvcGVydHlcbiAgICBob3N0OiB7XG4gICAgICBcIltjbGFzcy5tYXQtYXBwLWJhY2tncm91bmRdXCI6IFwidHJ1ZVwiXG4gICAgfSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIE5neE1hdFRpbWVwaWNrZXJTdGFuZGFsb25lQ29tcG9uZW50IGV4dGVuZHMgTmd4TWF0VGltZXBpY2tlckJhc2VEaXJlY3RpdmUge1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChOR1hfTUFUX1RJTUVQSUNLRVJfQ09ORklHKSBwdWJsaWMgZGF0YTogTmd4TWF0VGltZXBpY2tlckNvbmZpZyxcbiAgICAgICAgICAgICAgICB0aW1lcGlja2VyU3J2OiBOZ3hNYXRUaW1lcGlja2VyU2VydmljZSxcbiAgICAgICAgICAgICAgICBldmVudFNydjogTmd4TWF0VGltZXBpY2tlckV2ZW50U2VydmljZSxcbiAgICAgICAgICAgICAgICBASW5qZWN0KE5HWF9NQVRfVElNRVBJQ0tFUl9MT0NBTEUpIGxvY2FsZTogc3RyaW5nKSB7XG5cbiAgICAgICAgc3VwZXIodGltZXBpY2tlclNydiwgZXZlbnRTcnYsIGxvY2FsZSwgZGF0YSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGF0YS50aW1lcGlja2VyQmFzZVJlZi5jbG9zZSgpO1xuICAgIH1cbn1cbiJdfQ==
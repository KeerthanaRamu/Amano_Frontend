/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, TemplateRef } from "@angular/core";
//
import { NgxMatTimepickerPeriods } from "../../models/ngx-mat-timepicker-periods.enum";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import { NGX_MAT_TIMEPICKER_LOCALE } from "../../tokens/ngx-mat-timepicker-time-locale.token";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
//
import { DateTime, Info } from "ts-luxon";
export class NgxMatTimepickerDialComponent {
    /**
     * @param {?} _locale
     */
    constructor(_locale) {
        this._locale = _locale;
        this.hourChanged = new EventEmitter();
        this.meridiems = Info.meridiems({ locale: this._locale });
        this.minuteChanged = new EventEmitter();
        this.periodChanged = new EventEmitter();
        this.timeUnit = NgxMatTimepickerUnits;
        this.timeUnitChanged = new EventEmitter();
        this._color = "primary";
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set color(newValue) {
        this._color = newValue;
    }
    /**
     * @return {?}
     */
    get color() {
        return this._color;
    }
    /**
     * @param {?} hour
     * @return {?}
     */
    changeHour(hour) {
        this.hourChanged.next(hour);
    }
    /**
     * @param {?} minute
     * @return {?}
     */
    changeMinute(minute) {
        this.minuteChanged.next(minute);
    }
    /**
     * @param {?} period
     * @return {?}
     */
    changePeriod(period) {
        this.periodChanged.next(period);
    }
    /**
     * @param {?} unit
     * @return {?}
     */
    changeTimeUnit(unit) {
        this.timeUnitChanged.next(unit);
    }
    /**
     * @return {?}
     */
    hideHint() {
        this.isHintVisible = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const periodChanged = changes.period && changes.period.currentValue;
        if (periodChanged || changes.format && changes.format.currentValue) {
            /** @type {?} */
            const hours = NgxMatTimepickerUtils.getHours(this.format);
            this.hours = NgxMatTimepickerUtils.disableHours(hours, {
                min: this.minTime,
                max: this.maxTime,
                format: this.format,
                period: this.period
            });
        }
        if (periodChanged || changes.hour && changes.hour.currentValue) {
            /** @type {?} */
            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);
            this.minutes = NgxMatTimepickerUtils.disableMinutes(minutes, +this.hour, {
                min: this.minTime,
                max: this.maxTime,
                format: this.format,
                period: this.period
            });
        }
    }
    /**
     * @return {?}
     */
    showHint() {
        this.isHintVisible = true;
    }
}
NgxMatTimepickerDialComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-mat-timepicker-dial",
                template: "<div class=\"timepicker-dial\">\n    <div class=\"timepicker-dial__container\">\n        <div class=\"timepicker-dial__time\">\n            <ngx-mat-timepicker-dial-control [timeList]=\"hours\"\n                                         [time]=\"hour\"\n                                         [timeUnit]=\"timeUnit.HOUR\"\n                                         [isActive]=\"activeTimeUnit === timeUnit.HOUR\"\n                                         [isEditable]=\"isEditable\"\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\n                                         (timeChanged)=\"changeHour($event)\"\n                                         (focused)=\"showHint()\"\n                                         (unfocused)=\"hideHint()\">\n\n            </ngx-mat-timepicker-dial-control>\n            <span>:</span>\n            <ngx-mat-timepicker-dial-control [timeList]=\"minutes\"\n                                         [time]=\"minute\"\n                                         [timeUnit]=\"timeUnit.MINUTE\"\n                                         [isActive]=\"activeTimeUnit === timeUnit.MINUTE\"\n                                         [isEditable]=\"isEditable\"\n                                         [minutesGap]=\"minutesGap\"\n                                         [disabled]=\"hoursOnly\"\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\n                                         (timeChanged)=\"changeMinute($event)\"\n                                         (focused)=\"showHint()\"\n                                         (unfocused)=\"hideHint()\">\n\n            </ngx-mat-timepicker-dial-control>\n        </div>\n        <ngx-mat-timepicker-period class=\"timepicker-dial__period\"\n                                   *ngIf=\"format !== 24\"\n                                   [selectedPeriod]=\"period\"\n                                   [activeTimeUnit]=\"activeTimeUnit\"\n                                   [maxTime]=\"maxTime\"\n                                   [minTime]=\"minTime\"\n                                   [format]=\"format\"\n                                   [hours]=\"hours\"\n                                   [minutes]=\"minutes\"\n                                   [selectedHour]=\"hour\"\n                                   [meridiems]=\"meridiems\"\n                                   (periodChanged)=\"changePeriod($event)\"></ngx-mat-timepicker-period>\n    </div>\n    <div *ngIf=\"isEditable || editableHintTmpl\"\n         [ngClass]=\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\">\n        <ng-container *ngTemplateOutlet=\"editableHintTmpl ? editableHintTmpl : editableHintDefault\"></ng-container>\n        <ng-template #editableHintDefault>\n            <small class=\"timepicker-dial__hint\"> * use arrows (<span>&#8645;</span>) to change the time</small>\n        </ng-template>\n    </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".timepicker-dial{text-align:center}.timepicker-dial__container{display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:transparent}.timepicker-dial__time{display:flex;align-items:baseline;line-height:normal;font-size:50px}.timepicker-dial__period{display:block;margin-left:10px}.timepicker-dial__hint-container--hidden{visibility:hidden}.timepicker-dial__hint{display:inline-block;font-size:10px}.timepicker-dial__hint span{font-size:14px}"]
            }] }
];
/** @nocollapse */
NgxMatTimepickerDialComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [NGX_MAT_TIMEPICKER_LOCALE,] }] }
];
NgxMatTimepickerDialComponent.propDecorators = {
    activeTimeUnit: [{ type: Input }],
    color: [{ type: Input }],
    editableHintTmpl: [{ type: Input }],
    format: [{ type: Input }],
    hour: [{ type: Input }],
    hourChanged: [{ type: Output }],
    hoursOnly: [{ type: Input }],
    isEditable: [{ type: Input }],
    maxTime: [{ type: Input }],
    minTime: [{ type: Input }],
    minute: [{ type: Input }],
    minuteChanged: [{ type: Output }],
    minutesGap: [{ type: Input }],
    period: [{ type: Input }],
    periodChanged: [{ type: Output }],
    timeUnitChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.activeTimeUnit;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.editableHintTmpl;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.format;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.hour;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.hourChanged;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.hours;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.hoursOnly;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.isEditable;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.isHintVisible;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.maxTime;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.meridiems;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.minTime;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.minute;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.minuteChanged;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.minutes;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.minutesGap;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.period;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.periodChanged;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.timeUnit;
    /** @type {?} */
    NgxMatTimepickerDialComponent.prototype.timeUnitChanged;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDialComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    NgxMatTimepickerDialComponent.prototype._locale;
}
//# sourceMappingURL=data:application/json;base64,
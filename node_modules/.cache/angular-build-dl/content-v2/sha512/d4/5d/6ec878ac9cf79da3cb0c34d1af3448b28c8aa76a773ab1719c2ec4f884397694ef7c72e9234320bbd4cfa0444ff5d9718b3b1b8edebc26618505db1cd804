{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/chips.js"],"names":["_c0","MatChipSelectionChange","source","selected","isUserInput","MAT_CHIP_REMOVE","InjectionToken","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MatChipBase","_elementRef","_MatChipMixinBase","mixinTabIndex","mixinColor","mixinDisableRipple","MatChipAvatar","ɵfac","MatChipAvatar_Factory","t","ɵdir","type","selectors","hostAttrs","features","provide","useExisting","ngDevMode","Directive","args","selector","host","providers","MatChipTrailingIcon","MatChipTrailingIcon_Factory","MatChip","elementRef","_ngZone","platform","globalRippleOptions","_changeDetectorRef","_document","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","_selected","_selectable","_disabled","_removable","_onFocus","Subject","_onBlur","selectionChange","EventEmitter","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","classList","add","nativeElement","appendChild","_chipRipple","RippleRenderer","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","disabled","disableRipple","value","coercedValue","coerceBooleanProperty","_dispatchSelectionChange","_value","undefined","textContent","selectable","toString","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","emit","chip","_removeTriggerEvents","markForCheck","focus","next","removable","event","preventDefault","stopPropagation","keyCode","DELETE","BACKSPACE","remove","SPACE","toggleSelected","onStable","pipe","take","subscribe","run","MatChip_Factory","MAT_RIPPLE_GLOBAL_OPTIONS","DOCUMENT","ANIMATION_MODULE_TYPE","contentQueries","MatChip_ContentQueries","rf","ctx","dirIndex","_t","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","MatChip_HostBindings","MatChip_click_HostBindingHandler","$event","_handleClick","MatChip_keydown_HostBindingHandler","_handleKeydown","MatChip_focus_HostBindingHandler","MatChip_blur_HostBindingHandler","_blur","ariaSelected","inputs","color","outputs","exportAs","ctorParameters","ElementRef","NgZone","Platform","decorators","Optional","Inject","ChangeDetectorRef","String","Attribute","propDecorators","ContentChild","Input","Output","MatChipRemove","_parentChip","nodeName","setAttribute","parentChip","MatChipRemove_Factory","MatChipRemove_HostBindings","MatChipRemove_click_HostBindingHandler","MAT_CHIPS_DEFAULT_OPTIONS","_MatChipListBase","mixinErrorState","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","nextUniqueId$1","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","ariaOrientation","change","valueChange","valueAccessor","_a","_b","multiple","_selectionModel","empty","_syncChipsState","fn","_initializeSelection","writeValue","_chipInput","id","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","chips","length","forEach","merge","map","_keyManager","FocusKeyManager","withWrap","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","takeUntil","dir","tabOut","_allowFocusEscape","changes","startWith","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","SelectionModel","updateErrorState","complete","_dropSubscriptions","inputElement","ids","_ariaDescribedby","join","_setSelectionByValue","isDisabled","_originatesFromChip","options","setFirstItemActive","_focusInput","target","contains","onKeydown","newChipIndex","Math","min","setActiveItem","index","_clearSelection","deselect","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","selectViaInteraction","select","skip","clear","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","isSelected","_propagateChanges","chipFocusChanges","chipIndex","toArray","indexOf","_isValidIndex","updateActiveItem","chipBlurChanges","chipRemoveChanges","currentElement","parentElement","some","MatChipList_Factory","ɵcmp","MatChipList_ContentQueries","MatChipList_HostBindings","MatChipList_focus_HostBindingHandler","MatChipList_blur_HostBindingHandler","MatChipList_keydown_HostBindingHandler","_keydown","role","required","errorState","compareWith","errorStateMatcher","MatFormFieldControl","ngContentSelectors","decls","vars","consts","template","MatChipList_Template","styles","encapsulation","changeDetection","Directionality","NgForm","FormGroupDirective","ErrorStateMatcher","NgControl","Self","ContentChildren","descendants","Component","ViewEncapsulation","ChangeDetectionStrategy","nextUniqueId","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_focusLastChipOnBackspace","TAB","hasModifierKey","setLastItemActive","_emitChipEnd","addOnBlur","_isSeparatorKey","input","chipInput","Set","has","MatChipInput_Factory","MatChipInput_HostBindings","MatChipInput_keydown_HostBindingHandler","MatChipInput_keyup_HostBindingHandler","_keyup","MatChipInput_blur_HostBindingHandler","MatChipInput_focus_HostBindingHandler","_focus","MatChipInput_input_HostBindingHandler","_onInput","invalid","chipList","CHIP_DECLARATIONS","ɵ0","ENTER","MatChipsModule","MatChipsModule_Factory","ɵmod","ɵinj","useValue","imports","MatCommonModule","NgModule","exports","declarations","ngJitMode"],"mappings":"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","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_chips_js-es5.js","sourcesContent":["import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' },\n                providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }]\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' },\n                providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }]\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(elementRef);\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._animationsDisabled ||\n            !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n    get selected() { return this._selected; }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() { return this._chipListDisabled || this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() { return this._removable; }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatChip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MAT_CHIP_AVATAR,] }],\n    trailingIcon: [{ type: ContentChild, args: [MAT_CHIP_TRAILING_ICON,] }],\n    removeIcon: [{ type: ContentChild, args: [MAT_CHIP_REMOVE,] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    disabled: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MAT_CHIP_AVATAR]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_TRAILING_ICON]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_REMOVE]\n        }] }); })();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatChipRemove.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }])] });\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                },\n                providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }]\n            }]\n    }], function () { return [{ type: MatChip }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nconst _MatChipListBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? (((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || []) :\n            (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() { return this.empty ? null : 'listbox'; }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._value; }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() { return this._selectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId++}`;\n        this._disabled = false;\n        this.inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /** Whether the input is disabled. */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Whether the input is empty. */\n    get empty() { return !this.inputElement.value; }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.chipEnd.complete();\n    }\n    ngAfterContentInit() {\n        this._focusLastChipOnBackspace = this.empty;\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        if (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n                this._chipList._allowFocusEscape();\n            }\n            // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n            // We focus the last chip on backspace only after the user has released the backspace button,\n            // and the input is empty (see behaviour in _keyup)\n            if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n                this._chipList._keyManager.setLastItemActive();\n                event.preventDefault();\n                return;\n            }\n            else {\n                this._focusLastChipOnBackspace = false;\n            }\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keyup(event) {\n        // Allow user to move focus to chips next time he presses backspace\n        if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n            this._focusLastChipOnBackspace = true;\n            event.preventDefault();\n        }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._focusLastChipOnBackspace = this.empty;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this.inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({\n                input: this.inputElement,\n                value: this.inputElement.value,\n                chipInput: this,\n            });\n            event === null || event === void 0 ? void 0 : event.preventDefault();\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this.inputElement.focus(options);\n    }\n    /** Clears the input */\n    clear() {\n        this.inputElement.value = '';\n        this._focusLastChipOnBackspace = true;\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"keyup\", function MatChipInput_keyup_HostBindingHandler($event) { return ctx._keyup($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(keyup)': '_keyup($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {\n}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); };\nMatChipsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ɵ0\n        }\n    ], imports: [[MatCommonModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ɵ0\n                    }\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };\n\n//# sourceMappingURL=chips.js.map"]}
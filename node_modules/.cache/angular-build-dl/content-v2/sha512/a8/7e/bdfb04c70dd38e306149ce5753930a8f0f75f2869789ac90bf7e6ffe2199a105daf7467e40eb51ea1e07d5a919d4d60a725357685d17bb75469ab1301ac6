{"version":3,"sources":["webpack:///src/app/admin/package/add-package/add-package.component.html","webpack:///src/app/admin/package/add-package/add-package.component.ts","webpack:///src/app/admin/package/edit-package/edit-package.component.html","webpack:///src/app/admin/package/edit-package/edit-package.component.ts","webpack:///src/app/admin/package/package-list/package-list.component.html","webpack:///src/app/admin/package/package-list/package-list.component.ts","webpack:///src/app/admin/package/package-routing.module.ts","webpack:///src/app/admin/package/package.module.ts","webpack:///src/app/admin/package/package.service.ts"],"names":["autocompleteObjectValidator","control","value","AddPackageComponent","cdRef","fb","languageService","toastrService","packageService","router","selectable","removable","separatorKeysCodes","ENTER","COMMA","license_selected","show2Phase","show3Phase","translateVal","localStorage","lang","license_type","FormControl","validators","Validators","package_type","payment_phase","Editor","validation_msgs","type","message","getPackageTypeList","getLicenseClassList","getPaymentPhases","getClientCodeForFolder","sessionStorage","client","subscribe","res","clientCode","client_code","addPackageForm","group","package_price","package_offers","package_english","package_malay","promo_discount","package_desc_english","package_desc_malay","final_package_price","first_phase_amount","second_phase_amount","third_phase_amount","package_phase_desc_english","package_phase_desc_malay","package_image","package_image_name","global_view","languageChanged","getPakageTypeList","packageTypeData","packageTypeList","valueChanges","pipe","startWith","map","name","_filterPackageType","slice","licenseTypeData","console","log","licenseTypeList","fruit","_filterLicenseType","paymentPhaseData","paymentPhaseList","_filterpaymentPhase","user","license_class","filterValue","toLowerCase","filter","option","includes","event","input","trim","push","setValue","license","index","indexOf","splice","newValue","viewValue","licenceInput","nativeElement","length","packageObj","elem","id","requestAnimationFrame","openAuto","matACTrigger","trigger","openPanel","focus","formData","FormData","append","JSON","stringify","currentUser","setPackageDetails","success","reset","navigate","error","reader","FileReader","target","files","file","readAsDataURL","onload","patchValue","add","selectedListType","onFileChangePackageImage","selectedPaymentPhase","goBack","EditPackageComponent","route","packageId","snapshot","paramMap","get","editPackageForm","prev_package_english","prev_package_malay","getPackageToEdit","resObj","licenseObj","license_data","package_type_id","paymentObj","license_list","package_preview","result","updatePackageDetails","PackageListComponent","httpClient","dialog","snackBar","modalService","columns","data","filteredData","loadData","getPackageListPerClient","i","val","colsAmt","keys","Object","item","toString","table","offset","row","rowIndex","deleteRecord","open","ariaLabelledBy","rowToDelete","deletePackageDetails","dismissAll","DatatableComponent","filterDatatable","addNewPackage","refresh","routes","path","component","PackageRoutingModule","RouterModule","PackageModule","PackageService","NgxDatatableModule","MatChipsModule","CKEditorModule","CommonModule","FormsModule","ReactiveFormsModule","MatTableModule","MatPaginatorModule","MatFormFieldModule","MatInputModule","MatSnackBarModule","MatButtonModule","MatIconModule","MatDialogModule","MatSortModule","MatToolbarModule","MatSelectModule","MatDatepickerModule","MatCheckboxModule","MatTabsModule","MatMenuModule","MaterialFileInputModule","MatProgressSpinnerModule","MatStepperModule","NgxMaskModule","TranslateModule","MatAutocompleteModule","http","licenseData","authToken","post","environment"],"mappings":"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","file":"src_app_admin_package_package_module_ts-es5.js","sourcesContent":["<section class=\"content\">\n        <div class=\"container-fluid\">\n            <div class=\"block-header\">\n                <div class=\"row\">\n                    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                        <ul class=\"breadcrumb breadcrumb-style \">\n                            <li class=\"breadcrumb-item\">\n                                <h4 class=\"page-title\">{{'PACKAGE.TITLE' | translate}}</h4>\n                            </li>\n                           \n                        </ul>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row clearfix\">\n                <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12\">\n                    <div class=\"card\">\n                        <div class=\"header\">\n                            <h2>{{'PACKAGE.TITLE' | translate}}</h2>\n                            \n                        </div>\n                        <div class=\"body\">\n                            <form class=\"m-4\" [formGroup]=\"addPackageForm\">\n                                <div class=\"row\">\n                                    <div class=\"col-4\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-chip-list #chipList aria-label=\"Fruit selection\">\n                                                    <mat-chip\n                                                        *ngFor=\"let licenseDt of license_selected\"\n                                                        [selectable]=\"selectable\"\n                                                        [removable]=\"removable\"\n                                                        (removed)=\"remove(licenseDt)\">\n                                                        {{licenseDt}}\n                                                        <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon> \n                                                    </mat-chip> \n                                                    <mat-label>{{'PACKAGE.LIST.LICENSE-TYPE' | translate}}*</mat-label>\n                                                    <input type=\"text\" matInput \n                                                    #licenceInput\n                                                    #autocompleteTrigger=\"matAutocompleteTrigger\"\n                                                    [matChipInputFor]=\"chipList\"\n                                                    [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n                                                    (matChipInputTokenEnd)=\"add($event)\"\n                                                    [formControl]=\"license_type\" [matAutocomplete]=\"autoLicense\">\n                                            </mat-chip-list>\n                                            <mat-autocomplete #autoLicense=\"matAutocomplete\" (optionSelected)=\"selectedListType($event)\" autoActiveFirstOption>\n                                            <mat-option *ngFor=\"let option of licenseTypeList | async\" [value]=\"option.license_class\">\n                                                    <mat-checkbox color=\"primary\" style=\"padding: 0 12px;\" [checked]=\"license_selected.indexOf(option.license_class) >= 0\"></mat-checkbox>\n                                                {{option.license_class}}\n                                            </mat-option>\n                                            </mat-autocomplete>\n                                            <button mat-icon-button matSuffix style=\"width: 34px; height: 34px;\" (click)=\"openAuto(autocompleteTrigger)\"> <mat-icon style=\"width: 34px;\">expand_more</mat-icon></button>\n                                            <mat-error *ngIf=\"license_selected.length == 0\">\n                                                        {{'PACKAGE.LIST.LICENSE-TYPE' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PACKAGE-TYPE' | translate}}*</mat-label>\n                                            <input type=\"text\" matInput [formControl]=\"package_type\" [matAutocomplete]=\"autoPackage\">                                            \n                                            <mat-autocomplete #autoPackage=\"matAutocomplete\" [displayWith]=\"displayFnPackageType\">\n                                                <mat-option *ngFor=\"let option of packageTypeList | async\" [value]=\"option\">\n                                                    {{option[translateVal]}}\n                                                </mat-option>\n                                                </mat-autocomplete>\n                                                <mat-error *ngFor=\"let validation of validation_msgs.package_type\">\n                                                    <div *ngIf=\"package_type.hasError(validation.type)\">\n                                                      {{validation.message}}\n                                                    </div>\n                                                </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PACKAGE-IMAGE' | translate}}</mat-label>\n                                                <ngx-mat-file-input formControlName=\"package_image_name\"  (change)=\"onFileChangePackageImage($event)\" required>\n                                                </ngx-mat-file-input>\n                                                <mat-icon matSuffix>cloud_upload</mat-icon>\n                                            <mat-error *ngIf=\"addPackageForm.get('package_image_name').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PACKAGE-IMAGE' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                        <div class=\"col-4\">\n                                            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                                <mat-label>{{'PACKAGE.LIST.PACKAGE-OFFERS' | translate}}</mat-label>\n                                                <!-- <input matInput formControlName=\"package_offers\">     \n                                                                                        -->\n                                                <mat-select formControlName=\"package_offers\" required>\n                                                    <mat-option value=\"Affordable\">{{'PACKAGE.LIST.AFFORDABLE' | translate}}</mat-option>\n                                                    <mat-option value=\"Premium\">{{'PACKAGE.LIST.PREMIUM' | translate}}</mat-option>\n                                                </mat-select> \n                                                <mat-error *ngIf=\"addPackageForm.get('package_offers').hasError('required')\">\n                                                        {{'PACKAGE.LIST.PACKAGE-OFFERS' | translate}} is required\n                                                </mat-error>\n                                            </mat-form-field>\n                                        </div> \n                                        <div class=\"col-4\">\n                                            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                                <mat-label>{{'PACKAGE.LIST.PACKAGE-ENG' | translate}}*</mat-label>\n                                                <input matInput formControlName=\"package_english\">                                            \n                                                <mat-error *ngIf=\"addPackageForm.get('package_english').hasError('required')\">\n                                                        {{'PACKAGE.LIST.PACKAGE-ENG' | translate}} is required\n                                                </mat-error>\n                                            </mat-form-field>\n                                        </div> \n                                        <div class=\"col-4\">\n                                            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                                <mat-label>{{'PACKAGE.LIST.PACKAGE-MALAY' | translate}}*</mat-label>\n                                                <input matInput formControlName=\"package_malay\">                                            \n                                                <mat-error *ngIf=\"addPackageForm.get('package_malay').hasError('required')\">\n                                                        {{'PACKAGE.LIST.PACKAGE-MALAY' | translate}} is required\n                                                </mat-error>\n                                            </mat-form-field>\n                                        </div>\n                                        \n                                    </div>\n                                <div class=\"row\">\n                                    <div class=\"col-3\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PACKAGE-PRICE' | translate}}*</mat-label>\n                                            <input matInput formControlName=\"package_price\">                                            \n                                            <mat-error *ngIf=\"addPackageForm.get('package_price').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PACKAGE-PRICE' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-3\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PROMO-DIS' | translate}}*</mat-label>\n                                            <input matInput formControlName=\"promo_discount\">                                            \n                                            <mat-error *ngIf=\"addPackageForm.get('promo_discount').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PROMO-DIS' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-3\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.FIANL-PACKAGE-PRICE' | translate}}*</mat-label>\n                                            <input matInput formControlName=\"final_package_price\">                                            \n                                            <mat-error *ngIf=\"addPackageForm.get('final_package_price').hasError('required')\">\n                                                    {{'PACKAGE.LIST.FIANL-PACKAGE-PRICE' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-3\">\n                                            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                                <mat-label>{{'PACKAGE.LIST.PAYMENT-PHASE' | translate}}*</mat-label>\n                                                <input type=\"text\" matInput [formControl]=\"payment_phase\" [matAutocomplete]=\"autoPaymentPhase\">                                            \n                                                <mat-autocomplete #autoPaymentPhase=\"matAutocomplete\"  (optionSelected)=\"selectedPaymentPhase()\" [displayWith]=\"displayFnPaymentPhase\">\n                                                    <mat-option *ngFor=\"let option of paymentPhaseList | async\" [value]=\"option\">\n                                                        {{option[translateVal]}}\n                                                    </mat-option>\n                                                    </mat-autocomplete>\n                                                <mat-error *ngFor=\"let validation of validation_msgs.payment_phase\">\n                                                    <div *ngIf=\"payment_phase.hasError(validation.type)\">\n                                                      {{validation.message}}\n                                                    </div>\n                                                </mat-error>  \n                                            </mat-form-field>\n                                        </div> \n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-3\" *ngIf=\"show2Phase\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PAYMENT-PHASE-AMT-1' | translate}}*</mat-label>\n                                            <input matInput formControlName=\"first_phase_amount\">                                            \n                                            <mat-error *ngIf=\"addPackageForm.get('first_phase_amount').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PAYMENT-PHASE-AMT-1' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-3\" *ngIf=\"show2Phase\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PAYMENT-PHASE-AMT-2' | translate}}*</mat-label>\n                                            <input matInput formControlName=\"second_phase_amount\">                                            \n                                            <mat-error *ngIf=\"addPackageForm.get('second_phase_amount').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PAYMENT-PHASE-AMT-2' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-3\" *ngIf=\"show3Phase\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PAYMENT-PHASE-AMT-3' | translate}}*</mat-label>\n                                            <input matInput formControlName=\"third_phase_amount\">                                            \n                                            <mat-error *ngIf=\"addPackageForm.get('third_phase_amount').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PAYMENT-PHASE-AMT-3' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-3\">\n                                        <mat-checkbox class=\"example-margin\" formControlName=\"global_view\">{{'PACKAGE.LIST.GLOBAL-VIEW' | translate}}</mat-checkbox>     \n                                    </div>\n                                </div>\n                                 <div class=\"row\">\n                                    <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n                                            <mat-label>{{'PACKAGE.LIST.PACKAGE-DESC-ENG' | translate}}*</mat-label>\n                                            <ckeditor [editor]=\"Editor\" formControlName=\"package_desc_english\"></ckeditor>\n                                            <mat-error *ngIf=\"addPackageForm.get('package_desc_english').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PACKAGE-DESC-ENG' | translate}} is required\n                                            </mat-error>\n                                    </div>\n                                    <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n                                        <mat-label>{{'PACKAGE.LIST.PACKAGE-DESC-MALAY' | translate}}*</mat-label>\n                                        <ckeditor [editor]=\"Editor\" formControlName=\"package_desc_malay\"></ckeditor>\n                                        <mat-error *ngIf=\"addPackageForm.get('package_desc_malay').hasError('required')\">\n                                                {{'PACKAGE.LIST.PACKAGE-DESC-MALAY' | translate}} is required\n                                        </mat-error>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n                                            <mat-label>{{'PACKAGE.LIST.PACKAGE-PHASE-DESC-ENG' | translate}}*</mat-label>\n                                            <ckeditor [editor]=\"Editor\" formControlName=\"package_phase_desc_english\"></ckeditor>\n                                            <mat-error *ngIf=\"addPackageForm.get('package_phase_desc_english').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PACKAGE-PHASE-DESC-ENG' | translate}} is required\n                                            </mat-error>\n                                    </div>\n                                    <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n                                        <mat-label>{{'PACKAGE.LIST.PACKAGE-PHASE-DESC-MALAY' | translate}}*</mat-label>\n                                        <ckeditor [editor]=\"Editor\" formControlName=\"package_phase_desc_malay\"></ckeditor>\n                                        <mat-error *ngIf=\"addPackageForm.get('package_phase_desc_malay').hasError('required')\">\n                                                {{'PACKAGE.LIST.PACKAGE-PHASE-DESC-MALAY' | translate}} is required\n                                        </mat-error>\n                                    </div>\n                                </div>\n                                \n                                <div class=\"row\">\n                                    <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                                        <button class=\"btn-space\" [disabled]=\"!addPackageForm.valid || license_selected.length == 0\" mat-raised-button\n                                            color=\"primary\" (click)=\"setPackageDetails()\"> {{'BUTTON.ADD-BTN' | translate}}</button>\n                                        <button type=\"button\" mat-button (click)=\"goBack()\">{{'BUTTON.CANCEL-BTN' | translate}}</button>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>","import { Component, OnInit,ViewChild,ChangeDetectorRef,ElementRef } from '@angular/core';\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport {  FormBuilder, FormGroup, Validators,FormControl, AbstractControl, ValidatorFn } from '@angular/forms';\nimport { Observable,map, startWith,debounceTime,switchMap,of } from 'rxjs';\nimport { LanguageService } from '../../../core/service/language.service';\nimport { ToastrService } from 'ngx-toastr';\nimport * as ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport {PackageService} from '../package.service';\nimport {Router,ActivatedRoute} from '@angular/router';\nimport {MatAutocompleteSelectedEvent, MatAutocomplete, MatAutocompleteTrigger} from '@angular/material/autocomplete';\nimport {MatChipInputEvent} from '@angular/material/chips';\n\n\nfunction autocompleteObjectValidator(): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: any } | null => {\n    if (typeof control.value === 'string') {\n      return { 'invalidAutocompleteObject': { value: control.value } }\n    }\n    return null  /* valid option selected */\n  }\n}\n\n@Component({\n  selector: 'app-add-package',\n  templateUrl: './add-package.component.html',\n  styleUrls: ['./add-package.component.scss']\n})\nexport class AddPackageComponent implements OnInit {\n\n  @ViewChild('autocompleteTrigger') matACTrigger: MatAutocompleteTrigger;\n  @ViewChild('licenceInput') licenceInput: ElementRef<HTMLInputElement>;\n\n  selectable = true;\n  removable = true;\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n  license_selected= [];\n  show2Phase=false;\n  show3Phase=false;\n  clientCode;\n\n  addPackageForm:FormGroup;\n  translateVal=(localStorage.lang == 'ml' ? 'malay' : 'english');\n  \n  licenseTypeData:any;\n  packageTypeData:any;\n  paymentPhaseData:any;\n\n  license_type = new FormControl('', { validators: [autocompleteObjectValidator(), Validators.required] }); \n  package_type= new FormControl('', { validators: [autocompleteObjectValidator(), Validators.required] });  \n  payment_phase= new FormControl('', { validators: [autocompleteObjectValidator(), Validators.required] });  \n\n  licenseTypeList: Observable<string[]>;\n  packageTypeList: Observable<string[]>;\n  paymentPhaseList: Observable<string[]>;\n\n  public Editor = ClassicEditor;\n  constructor(private cdRef:ChangeDetectorRef,private fb: FormBuilder,\n    private languageService:LanguageService,private toastrService: ToastrService,private packageService:PackageService,\n    private router:Router) { }\n\n  ngOnInit(): void {\n      this.getPackageTypeList();\n      this.getLicenseClassList();\n      this.getPaymentPhases();\n      this.packageService.getClientCodeForFolder(sessionStorage.client)\n    .subscribe((res)=>{\n        this.clientCode=res['data'][0].client_code;\n    })\n    this.addPackageForm = this.fb.group({\n      package_price: ['', Validators.required],\n      package_offers:['', Validators.required],\n      package_english: ['', Validators.required],\n      package_malay: ['', Validators.required],\n      promo_discount: ['', Validators.required],\n      package_desc_english: ['', Validators.required],\n      package_desc_malay:['', Validators.required],\n      final_package_price:['', Validators.required],\n      first_phase_amount:[''],\n      second_phase_amount:[''],\n      third_phase_amount:[''],\n      package_phase_desc_english:['', Validators.required],\n      package_phase_desc_malay:['', Validators.required],\n      package_image:['', Validators.required],  \n      package_image_name:['', Validators.required],\n      global_view:[''],\n    });\n\n    this.languageService.languageChanged.subscribe(value => {\n      this.translateVal=(localStorage.lang == 'ml' ? 'malay' : 'english');\n      this.getPackageTypeList();\n      this.getLicenseClassList();\n      this.getPaymentPhases();\n    })\n  }\n  \n\n  getPackageTypeList(){\n    this.packageService.getPakageTypeList()\n    .subscribe(res=>{\n      this.packageTypeData=res['data'];\n      this.packageTypeList = this.package_type.valueChanges.pipe(\n        startWith(''),\n        map(value => (typeof value === 'string' ? value : value[this.translateVal])),\n        map(name => (name ? this._filterPackageType(name) : this.packageTypeData.slice())),\n      );\n    })\n  }\n  \n\n  getLicenseClassList(){\n    this.packageService.getLicenseClassList(sessionStorage.client)\n    .subscribe(res=>{\n      this.licenseTypeData=res['data'];\n      console.log(\"this.this.license_type=========\",this.license_type);\n      this.licenseTypeList = this.license_type.valueChanges.pipe(\n        startWith(''),\n        map((fruit: string | null) => fruit ? this._filterLicenseType(fruit) : this.licenseTypeData.slice()));\n    })\n  }\n\n  getPaymentPhases(){\n    this.packageService.getPaymentPhases()\n    .subscribe(res=>{\n      console.log(\"res['data']===0\",res['data']);\n      this.paymentPhaseData=res['data'];\n      this.paymentPhaseList = this.payment_phase.valueChanges.pipe(\n        startWith(''),\n        map(value => (typeof value === 'string' ? value : value[this.translateVal])),\n        map(name => (name ? this._filterpaymentPhase(name) : this.paymentPhaseData.slice())),\n      );\n    })\n  }\n\n  displayFn(user): string {\n    return user && user.license_class ? user.license_class : '';\n  }\n\n  displayFnPackageType(user): string {\n    return user && user[(localStorage.lang == 'ml' ? 'malay' : 'english')] ? user[(localStorage.lang == 'ml' ? 'malay' : 'english')] : '';\n  }\n\n  displayFnPaymentPhase(user): string {\n    return user && user[(localStorage.lang == 'ml' ? 'malay' : 'english')] ? user[(localStorage.lang == 'ml' ? 'malay' : 'english')] : '';\n  }\n\n  private _filterLicenseType(name): [] {\n    console.log(\"name=====\",name);\n    const filterValue = name.toLowerCase();\n    return this.licenseTypeData.filter(option => option.license_class.toLowerCase().includes(filterValue));\n  }\n\n  private _filterPackageType(name: string): [] {\n    const filterValue = name.toLowerCase();\n    return this.packageTypeData.filter(option => option[this.translateVal].toLowerCase().includes(filterValue));\n  }\n\n  \n  private _filterpaymentPhase(name: string): [] {\n    const filterValue = name.toLowerCase();\n    return this.paymentPhaseData.filter(option => option[this.translateVal].toLowerCase().includes(filterValue));\n  }\n\n  add(event: MatChipInputEvent): void {\n    const input = event.input;\n    const value = event.value;\n    console.log(\"------------\",value)\n    // Add our fruit\n    if ((value || '').trim()) {\n      this.license_selected.push(value);\n    }\n\n    // Reset the input value\n    if (input) {\n      input.value = '';\n    }\n\n    this.license_type.setValue(null);\n  }\n\n  remove(license: string): void {\n    const index = this.license_selected.indexOf(license);\n\n    if (index >= 0) {\n      this.license_selected.splice(index, 1);\n    }    \n  }\n\n  selectedListType(event: MatAutocompleteSelectedEvent): void {\n    const newValue = event.option.viewValue;\n    console.log(\"newValue=======\",event.option.viewValue);\n    if (this.license_selected.includes(newValue)) {\n      this.license_selected = [...this.license_selected.filter(fruit=>fruit !== newValue)];\n    } else {\n      this.license_selected.push(event.option.viewValue);\n    }\n    this.licenceInput.nativeElement.value = '';\n    this.license_type.setValue(null);\n\n\n    if(this.license_selected.length > 1){\n      var packageObj=this.packageTypeData.filter((elem)=>{return elem.id==1});\n      this.package_type.setValue(packageObj[0])\n    }else{\n      var packageObj=this.packageTypeData.filter((elem)=>{return elem.id==2});\n      this.package_type.setValue(packageObj[0])\n    }\n    // keep the autocomplete opened after each item is picked.\n    requestAnimationFrame(()=>{\n      this.openAuto(this.matACTrigger);\n    })\n\n  }\n\n  selectedPaymentPhase(){\n    if(this.payment_phase.value.id == 2){\n      this.show2Phase=true;\n      this.show3Phase=false;\n    }else if(this.payment_phase.value.id == 3){\n      this.show2Phase=true;\n      this.show3Phase=true;\n    }else{\n      this.show2Phase=false;\n      this.show3Phase=false;\n    }\n  }\n\n  openAuto(trigger: MatAutocompleteTrigger) {\n    trigger.openPanel();\n    this.licenceInput.nativeElement.focus();\n    console.log(trigger);\n  }\n\n\n\n  public validation_msgs = {\n    'license_type': [\n      { type: 'invalidAutocompleteObject', message: 'License Type not recognized. Click one of the options.' },\n      { type: 'required', message: 'License Type is required.' }\n    ],\n    'package_type': [\n      { type: 'invalidAutocompleteObject', message: 'Package Type not recognized. Click one of the options.' },\n      { type: 'required', message: 'Package Type is required.' }\n    ],\n    'payment_phase': [\n      { type: 'invalidAutocompleteObject', message: 'Payment Phase not recognized. Click one of the options.' },\n      { type: 'required', message: 'Payment Phase is required.' }\n    ],\n  }\n\n  setPackageDetails(){\n    console.log(\"this.addPackageForm.value====\",this.addPackageForm.value,this.package_type,this.license_selected)\n    const formData = new FormData();\n    formData.append('baseRoot','root/'+this.clientCode+'/Package/'+this.addPackageForm.value.package_english);\n    formData.append('PackageFormData',JSON.stringify(this.addPackageForm.value));\n    formData.append('package_type',JSON.stringify(this.package_type.value));\n    formData.append('license_type',JSON.stringify(this.license_selected));\n    formData.append('payment_phase',this.payment_phase.value.id);\n    formData.append('authToken',sessionStorage.currentUser);\n    formData.append('client',sessionStorage.client);\n    formData.append('file',this.addPackageForm.value.package_image);\n    if(this.payment_phase.value.id == 2){\n      if(this.addPackageForm.value.first_phase_amount != '' && this.addPackageForm.value.second_phase_amount != ''){\n        this.packageService.setPackageDetails(formData)\n        .subscribe(res=>{\n          if(res['status'] == 'Success'){\n            this.toastrService.success(\"Registered Successfully!!\");\n            this.addPackageForm.reset();\n            this.router.navigate(['/admin/package/package-list']);\n          }else{\n            this.toastrService.error(res['status']);\n          }\n        })\n      }else{\n        this.toastrService.error(\"Please provide Phase Amounts\");\n      }\n    }else if(this.payment_phase.value.id == 3){\n      if(this.addPackageForm.value.first_phase_amount != '' && this.addPackageForm.value.second_phase_amount != '' && this.addPackageForm.value.third_phase_amount != ''){\n        this.packageService.setPackageDetails(formData)\n        .subscribe(res=>{\n          if(res['status'] == 'Success'){\n            this.toastrService.success(\"Registered Successfully!!\");\n            this.addPackageForm.reset();\n            this.router.navigate(['/admin/package/package-list']);\n          }else{\n            this.toastrService.error(res['status']);\n          }\n        })\n      }else{\n        this.toastrService.error(\"Please provide Phase Amounts\");\n      }\n    }else{\n      this.packageService.setPackageDetails(formData)\n      .subscribe(res=>{\n        if(res['status'] == 'Success'){\n          this.toastrService.success(\"Registered Successfully!!\");\n          this.addPackageForm.reset();\n          this.router.navigate(['/admin/package/package-list']);\n        }else{\n          this.toastrService.error(res['status']);\n        }\n      })\n    }\n   \n  }\n\n  onFileChangePackageImage(event){\n    const reader = new FileReader();\n    if (event.target.files && event.target.files.length) {\n      const [file] = event.target.files;\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        this.addPackageForm.patchValue({\n          package_image:file\n        })\n        console.log(\"this.documentForm===\",this.addPackageForm)\n      }\n    }\n  }\n\n  goBack(){\n    this.router.navigate(['/admin/package/package-list']);\n  }\n\n}\n","<section class=\"content\">\n        <div class=\"container-fluid\">\n            <div class=\"block-header\">\n                <div class=\"row\">\n                    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                        <ul class=\"breadcrumb breadcrumb-style \">\n                            <li class=\"breadcrumb-item\">\n                                <h4 class=\"page-title\">{{'PACKAGE.EDITTITLE' | translate}}</h4>\n                            </li>\n                           \n                        </ul>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row clearfix\">\n                <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12\">\n                    <div class=\"card\">\n                        <div class=\"header\">\n                            <h2>{{'PACKAGE.EDITTITLE' | translate}}</h2>\n                            \n                        </div>\n                        <div class=\"body\">\n                            <form class=\"m-4\" [formGroup]=\"editPackageForm\">\n                                <div class=\"row\">\n                                    <div class=\"col-4\">\n                                            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                                    <mat-chip-list #chipList aria-label=\"Fruit selection\">\n                                                            <mat-chip\n                                                                *ngFor=\"let licenseDt of license_selected\"\n                                                                [selectable]=\"selectable\"\n                                                                [removable]=\"removable\"\n                                                                (removed)=\"remove(licenseDt)\">\n                                                                {{licenseDt}}\n                                                                <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon> \n                                                            </mat-chip> \n                                                            <mat-label>{{'PACKAGE.LIST.LICENSE-TYPE' | translate}}*</mat-label>\n                                                            <input type=\"text\" matInput \n                                                            #licenceInput\n                                                            #autocompleteTrigger=\"matAutocompleteTrigger\"\n                                                            [matChipInputFor]=\"chipList\"\n                                                            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n                                                            (matChipInputTokenEnd)=\"add($event)\"\n                                                            [formControl]=\"license_type\" [matAutocomplete]=\"autoLicense\">\n                                                    </mat-chip-list>\n                                                    <mat-autocomplete #autoLicense=\"matAutocomplete\" (optionSelected)=\"selectedListType($event)\" autoActiveFirstOption>\n                                                    <mat-option *ngFor=\"let option of licenseTypeList | async\" [value]=\"option.license_class\">\n                                                            <mat-checkbox color=\"primary\" style=\"padding: 0 12px;\" [checked]=\"license_selected.indexOf(option.license_class) >= 0\"></mat-checkbox>\n                                                        {{option.license_class}}\n                                                    </mat-option>\n                                                    </mat-autocomplete>\n                                                    <button mat-icon-button matSuffix style=\"width: 34px; height: 34px;\" (click)=\"openAuto(autocompleteTrigger)\"> <mat-icon style=\"width: 34px;\">expand_more</mat-icon></button>\n                                                    <mat-error *ngIf=\"license_selected.length == 0\">\n                                                                {{'PACKAGE.LIST.LICENSE-TYPE' | translate}} is required\n                                                    </mat-error>\n                                                </mat-form-field>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PACKAGE-TYPE' | translate}}*</mat-label>\n                                            <input type=\"text\" matInput [formControl]=\"package_type\" [matAutocomplete]=\"autoPackage\">                                            \n                                            <mat-autocomplete #autoPackage=\"matAutocomplete\" [displayWith]=\"displayFnPackageType\">\n                                                <mat-option *ngFor=\"let option of packageTypeList | async\" [value]=\"option\">\n                                                    {{option[translateVal]}}\n                                                </mat-option>\n                                                </mat-autocomplete>\n                                                <mat-error *ngFor=\"let validation of validation_msgs.package_type\">\n                                                    <div *ngIf=\"package_type.hasError(validation.type)\">\n                                                      {{validation.message}}\n                                                    </div>\n                                                </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <div class=\"row\">\n                                            <div class=\"col-6\">\n                                                    <img src=\"{{package_preview ? package_preview :editPackageForm.value.package_image}}\"  style=\"width:100%;height:50%\">\n                                            </div>\n                                            <div class=\"col-6\">\n                                               <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                                    <mat-label>{{'PACKAGE.LIST.PACKAGE-IMAGE' | translate}}</mat-label>\n                                                        <ngx-mat-file-input formControlName=\"package_image_name\"  (change)=\"onFileChangePackageImage($event)\" required>\n                                                        </ngx-mat-file-input>\n                                                        <mat-icon matSuffix>cloud_upload</mat-icon>\n                                                    <mat-error *ngIf=\"editPackageForm.get('package_image_name').hasError('required')\">\n                                                            {{'PACKAGE.LIST.PACKAGE-IMAGE' | translate}} is required\n                                                    </mat-error>\n                                                </mat-form-field>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-4\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PACKAGE-OFFERS' | translate}}</mat-label>\n                                            <!-- <input matInput formControlName=\"package_offers\">     \n                                                                                    -->\n                                            <mat-select formControlName=\"package_offers\" required>\n                                                <mat-option value=\"Affordable\">{{'PACKAGE.LIST.AFFORDABLE' | translate}}</mat-option>\n                                                <mat-option value=\"Premium\">{{'PACKAGE.LIST.PREMIUM' | translate}}</mat-option>\n                                            </mat-select> \n                                            <mat-error *ngIf=\"editPackageForm.get('package_offers').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PACKAGE-OFFERS' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div> \n                                        <div class=\"col-4\">\n                                            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                                <mat-label>{{'PACKAGE.LIST.PACKAGE-ENG' | translate}}*</mat-label>\n                                                <input matInput formControlName=\"package_english\">                                            \n                                                <mat-error *ngIf=\"editPackageForm.get('package_english').hasError('required')\">\n                                                        {{'PACKAGE.LIST.PACKAGE-ENG' | translate}} is required\n                                                </mat-error>\n                                            </mat-form-field>\n                                        </div> \n                                        <div class=\"col-4\">\n                                            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                                <mat-label>{{'PACKAGE.LIST.PACKAGE-MALAY' | translate}}*</mat-label>\n                                                <input matInput formControlName=\"package_malay\">                                            \n                                                <mat-error *ngIf=\"editPackageForm.get('package_malay').hasError('required')\">\n                                                        {{'PACKAGE.LIST.PACKAGE-MALAY' | translate}} is required\n                                                </mat-error>\n                                            </mat-form-field>\n                                        </div>\n                                    </div>\n                                <div class=\"row\">\n                                    <div class=\"col-3\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PACKAGE-PRICE' | translate}}*</mat-label>\n                                            <input matInput formControlName=\"package_price\">                                            \n                                            <mat-error *ngIf=\"editPackageForm.get('package_price').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PACKAGE-PRICE' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div> \n                                    <div class=\"col-3\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PROMO-DIS' | translate}}*</mat-label>\n                                            <input matInput formControlName=\"promo_discount\">                                            \n                                            <mat-error *ngIf=\"editPackageForm.get('promo_discount').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PROMO-DIS' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-3\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.FIANL-PACKAGE-PRICE' | translate}}*</mat-label>\n                                            <input matInput formControlName=\"final_package_price\">                                            \n                                            <mat-error *ngIf=\"editPackageForm.get('final_package_price').hasError('required')\">\n                                                    {{'PACKAGE.LIST.FIANL-PACKAGE-PRICE' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-3\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PAYMENT-PHASE' | translate}}*</mat-label>\n                                            <input type=\"text\" matInput [formControl]=\"payment_phase\" [matAutocomplete]=\"autoPaymentPhase\">                                            \n                                            <mat-autocomplete #autoPaymentPhase=\"matAutocomplete\"  (optionSelected)=\"selectedPaymentPhase()\" [displayWith]=\"displayFnPaymentPhase\">\n                                                <mat-option *ngFor=\"let option of paymentPhaseList | async\" [value]=\"option\">\n                                                    {{option[translateVal]}}\n                                                </mat-option>\n                                                </mat-autocomplete>\n                                            <mat-error *ngFor=\"let validation of validation_msgs.payment_phase\">\n                                                <div *ngIf=\"payment_phase.hasError(validation.type)\">\n                                                  {{validation.message}}\n                                                </div>\n                                            </mat-error>  \n                                        </mat-form-field>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-3\" *ngIf=\"show2Phase\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PAYMENT-PHASE-AMT-1' | translate}}*</mat-label>\n                                            <input matInput formControlName=\"first_phase_amount\">                                            \n                                            <mat-error *ngIf=\"editPackageForm.get('first_phase_amount').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PAYMENT-PHASE-AMT-1' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-3\" *ngIf=\"show2Phase\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PAYMENT-PHASE-AMT-2' | translate}}*</mat-label>\n                                            <input matInput formControlName=\"second_phase_amount\">                                            \n                                            <mat-error *ngIf=\"editPackageForm.get('second_phase_amount').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PAYMENT-PHASE-AMT-2' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-3\" *ngIf=\"show3Phase\">\n                                        <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n                                            <mat-label>{{'PACKAGE.LIST.PAYMENT-PHASE-AMT-3' | translate}}*</mat-label>\n                                            <input matInput formControlName=\"third_phase_amount\">                                            \n                                            <mat-error *ngIf=\"editPackageForm.get('third_phase_amount').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PAYMENT-PHASE-AMT-3' | translate}} is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-3\">\n                                        <mat-checkbox class=\"example-margin\" formControlName=\"global_view\">{{'PACKAGE.LIST.GLOBAL-VIEW' | translate}}</mat-checkbox>     \n                                    </div>\n                                </div>\n                                 <div class=\"row\">\n                                    <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n                                            <mat-label>{{'PACKAGE.LIST.PACKAGE-DESC-ENG' | translate}}*</mat-label>\n                                            <ckeditor [editor]=\"Editor\" formControlName=\"package_desc_english\"></ckeditor>\n                                            <mat-error *ngIf=\"editPackageForm.get('package_desc_english').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PACKAGE-DESC-ENG' | translate}} is required\n                                            </mat-error>\n                                    </div>\n                                    <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n                                        <mat-label>{{'PACKAGE.LIST.PACKAGE-DESC-MALAY' | translate}}*</mat-label>\n                                        <ckeditor [editor]=\"Editor\" formControlName=\"package_desc_malay\"></ckeditor>\n                                        <mat-error *ngIf=\"editPackageForm.get('package_desc_malay').hasError('required')\">\n                                                {{'PACKAGE.LIST.PACKAGE-DESC-MALAY' | translate}} is required\n                                        </mat-error>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n                                            <mat-label>{{'PACKAGE.LIST.PACKAGE-PHASE-DESC-ENG' | translate}}*</mat-label>\n                                            <ckeditor [editor]=\"Editor\" formControlName=\"package_phase_desc_english\"></ckeditor>\n                                            <mat-error *ngIf=\"editPackageForm.get('package_phase_desc_english').hasError('required')\">\n                                                    {{'PACKAGE.LIST.PACKAGE-PHASE-DESC-ENG' | translate}} is required\n                                            </mat-error>\n                                    </div>\n                                    <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n                                        <mat-label>{{'PACKAGE.LIST.PACKAGE-PHASE-DESC-MALAY' | translate}}*</mat-label>\n                                        <ckeditor [editor]=\"Editor\" formControlName=\"package_phase_desc_malay\"></ckeditor>\n                                        <mat-error *ngIf=\"editPackageForm.get('package_phase_desc_malay').hasError('required')\">\n                                                {{'PACKAGE.LIST.PACKAGE-PHASE-DESC-MALAY' | translate}} is required\n                                        </mat-error>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                                        <button class=\"btn-space\" [disabled]=\"!editPackageForm.valid || license_selected.length == 0\" mat-raised-button\n                                            color=\"primary\" (click)=\"updatePackageDetails()\">{{'BUTTON.EDIT-BTN' | translate}}</button>\n                                        <button type=\"button\" mat-button (click)=\"goBack()\">{{'BUTTON.CANCEL-BTN' | translate}}</button>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>","import { Component, OnInit,ViewChild,ChangeDetectorRef,ElementRef } from '@angular/core';\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport {  FormBuilder, FormGroup, Validators,FormControl, AbstractControl, ValidatorFn } from '@angular/forms';\nimport { Observable,map, startWith,debounceTime,switchMap,of } from 'rxjs';\nimport { LanguageService } from '../../../core/service/language.service';\nimport { ToastrService } from 'ngx-toastr';\nimport * as ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport {PackageService} from '../package.service';\nimport {Router,ActivatedRoute} from '@angular/router'\nimport {MatAutocompleteSelectedEvent, MatAutocomplete, MatAutocompleteTrigger} from '@angular/material/autocomplete';\nimport {MatChipInputEvent} from '@angular/material/chips';\n\n\nfunction autocompleteObjectValidator(): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: any } | null => {\n    if (typeof control.value === 'string') {\n      return { 'invalidAutocompleteObject': { value: control.value } }\n    }\n    return null  /* valid option selected */\n  }\n}\n\n@Component({\n  selector: 'app-edit-package',\n  templateUrl: './edit-package.component.html',\n  styleUrls: ['./edit-package.component.scss']\n})\nexport class EditPackageComponent implements OnInit {\n\n  @ViewChild('autocompleteTrigger') matACTrigger: MatAutocompleteTrigger;\n  @ViewChild('licenceInput') licenceInput: ElementRef<HTMLInputElement>;\n\n  public Editor = ClassicEditor;\n\n  selectable = true;\n  removable = true;\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n  license_selected= [];\n  show2Phase=false;\n  show3Phase=false;\n  clientCode;\n  package_preview;\n\n  packageId; \n  editPackageForm:FormGroup;\n  translateVal=(localStorage.lang == 'ml' ? 'malay' : 'english');\n  \n  licenseTypeData:any;\n  packageTypeData:any;\n  paymentPhaseData:any;\n\n  license_type = new FormControl('', { validators: [autocompleteObjectValidator()] }); \n  package_type= new FormControl('', { validators: [autocompleteObjectValidator(), Validators.required] });  \n  payment_phase= new FormControl('', { validators: [autocompleteObjectValidator(), Validators.required] });  \n\n  licenseTypeList: Observable<string[]>;\n  packageTypeList: Observable<string[]>;\n  paymentPhaseList: Observable<string[]>;\n\n  constructor(private cdRef:ChangeDetectorRef,private fb: FormBuilder,\n    private languageService:LanguageService,private toastrService: ToastrService,private router: Router,private route: ActivatedRoute,\n    private packageService:PackageService\n  ) {\n     this.packageId=this.route.snapshot.paramMap.get('id');\n     this.editPackageForm = this.fb.group({\n       id:[''],\n       package_offers:['',Validators.required],\n      package_price: ['', Validators.required],\n      prev_package_english: ['', Validators.required],\n      prev_package_malay: ['', Validators.required],\n      package_english: ['', Validators.required],\n      package_malay: ['', Validators.required],\n      promo_discount: ['', Validators.required],\n      package_desc_english: ['', Validators.required],\n      package_desc_malay:['', Validators.required],\n      final_package_price:['', Validators.required],\n      first_phase_amount:[''],\n      second_phase_amount:[''],\n      third_phase_amount:[''],\n      package_phase_desc_english:['', Validators.required],\n      package_phase_desc_malay:['', Validators.required],\n      package_image:['', Validators.required],\n      package_image_name:['', Validators.required],\n      global_view:[''],\n    });\n   }\n\n   \n\n  ngOnInit(): void {\n    \n    this.getPackageTypeList();\n    this.getLicenseClassList();\n   this.getPaymentPhases();\n   this.packageService.getClientCodeForFolder(sessionStorage.client)\n   .subscribe((res)=>{\n       this.clientCode=res['data'][0].client_code;\n   })\n    this.languageService.languageChanged.subscribe(value => {\n      this.translateVal=(localStorage.lang == 'ml' ? 'malay' : 'english');\n      this.getPackageTypeList();\n      this.getLicenseClassList();\n      this.getPaymentPhases();\n    })\n\n    this.packageService.getPackageToEdit(this.packageId,sessionStorage.client)\n    .subscribe(res=>{\n      let resObj=res['data'][0]\n        this.editPackageForm.patchValue({\n          id:resObj.id,\n          package_price: resObj.package_price,\n          prev_package_english: resObj.package_english,\n          prev_package_malay: resObj.package_malay,\n          package_english: resObj.package_english,\n          package_malay: resObj.package_malay,\n          promo_discount: resObj.promo_discount,\n          package_desc_english: resObj.package_desc_english,\n          package_desc_malay:resObj.package_desc_malay,\n          package_offers:resObj.package_offers,\n          final_package_price:resObj.final_package_price,\n          first_phase_amount:resObj.first_phase_amount,\n          second_phase_amount:resObj.second_phase_amount,\n          third_phase_amount:resObj.third_phase_amount,\n          package_phase_desc_english:resObj.package_phase_desc_english,\n          package_phase_desc_malay:resObj.package_phase_desc_malay,\n          package_image:resObj.package_image,\n          package_image_name:resObj.package_image,\n          global_view:resObj.global_view == 1 ? true : false,\n        });\n        var licenseObj=resObj.license_data;\n        var packageObj=this.packageTypeData.filter((elem)=>{return elem.id==resObj.package_type_id});\n        var paymentObj=this.paymentPhaseData.filter((elem)=>{return elem.id==resObj.payment_phase});\n        console.log(\"licenseObj--------\",licenseObj);\n        this.license_selected=resObj.license_list;\n        this.license_type.setValue(licenseObj);\n        this.package_type.setValue(packageObj[0]);\n        this.payment_phase.setValue(paymentObj[0]);\n        if(this.payment_phase.value.id == 2){\n          this.show2Phase=true;\n          this.show3Phase=false;\n        }else if(this.payment_phase.value.id == 3){\n          this.show2Phase=true;\n          this.show3Phase=true;\n        }else{\n          this.show2Phase=false;\n          this.show3Phase=false;\n        }\n    });\n  }\n\n  getPackageTypeList(){\n    this.packageService.getPakageTypeList()\n    .subscribe(res=>{\n      this.packageTypeData=res['data'];\n      this.packageTypeList = this.package_type.valueChanges.pipe(\n        startWith(''),\n        map(value => (typeof value === 'string' ? value : value[this.translateVal])),\n        map(name => (name ? this._filterPackageType(name) : this.packageTypeData.slice())),\n      );\n    })\n  }\n  \n  getPaymentPhases(){\n    this.packageService.getPaymentPhases()\n    .subscribe(res=>{\n      console.log(\"res['data']===0\",res['data']);\n      this.paymentPhaseData=res['data'];\n      this.paymentPhaseList = this.payment_phase.valueChanges.pipe(\n        startWith(''),\n        map(value => (typeof value === 'string' ? value : value[this.translateVal])),\n        map(name => (name ? this._filterpaymentPhase(name) : this.paymentPhaseData.slice())),\n      );\n    })\n  }\n  \n  getLicenseClassList(){\n    this.packageService.getLicenseClassList(sessionStorage.client)\n    .subscribe(res=>{\n      this.licenseTypeData=res['data'];\n      console.log(\"this.this.license_type=========\",this.license_type);\n      this.licenseTypeList = this.license_type.valueChanges.pipe(\n        startWith(''),\n        map((fruit: string | null) => fruit ? this._filterLicenseType(fruit) : this.licenseTypeData.slice()));\n    })\n  }\n\n  displayFn(user): string {\n    return user && user.license_class ? user.license_class : '';\n  }\n\n  displayFnPackageType(user): string {\n    return user && user[(localStorage.lang == 'ml' ? 'malay' : 'english')] ? user[(localStorage.lang == 'ml' ? 'malay' : 'english')] : '';\n  }\n\n  displayFnPaymentPhase(user): string {\n    return user && user[(localStorage.lang == 'ml' ? 'malay' : 'english')] ? user[(localStorage.lang == 'ml' ? 'malay' : 'english')] : '';\n  }\n\n  private _filterLicenseType(name): [] {\n    console.log(\"name=====\",name);\n    const filterValue = name.toLowerCase();\n    return this.licenseTypeData.filter(option => option.license_class.toLowerCase().includes(filterValue));\n  }\n\n  private _filterPackageType(name: string): [] {\n    const filterValue = name.toLowerCase();\n    return this.packageTypeData.filter(option => option[this.translateVal].toLowerCase().includes(filterValue));\n  }\n\n  private _filterpaymentPhase(name: string): [] {\n    const filterValue = name.toLowerCase();\n    return this.paymentPhaseData.filter(option => option[this.translateVal].toLowerCase().includes(filterValue));\n  }\n\n  add(event: MatChipInputEvent): void {\n    const input = event.input;\n    const value = event.value;\n    console.log(\"------------\",value)\n    // Add our fruit\n    if ((value || '').trim()) {\n      this.license_selected.push(value);\n    }\n\n    // Reset the input value\n    if (input) {\n      input.value = '';\n    }\n\n    this.license_type.setValue(null);\n  }\n\n  remove(license: string): void {\n    const index = this.license_selected.indexOf(license);\n\n    if (index >= 0) {\n      this.license_selected.splice(index, 1);\n    }    \n  }\n\n  selectedListType(event: MatAutocompleteSelectedEvent): void {\n    const newValue = event.option.viewValue;\n    console.log(\"newValue=======\",event.option.viewValue);\n    if (this.license_selected.includes(newValue)) {\n      this.license_selected = [...this.license_selected.filter(fruit=>fruit !== newValue)];\n    } else {\n      this.license_selected.push(event.option.viewValue);\n    }\n    this.licenceInput.nativeElement.value = '';\n    this.license_type.setValue(null);\n\n\n    if(this.license_selected.length > 1){\n      var packageObj=this.packageTypeData.filter((elem)=>{return elem.id==1});\n      this.package_type.setValue(packageObj[0])\n    }else{\n      var packageObj=this.packageTypeData.filter((elem)=>{return elem.id==2});\n      this.package_type.setValue(packageObj[0])\n    }\n    // keep the autocomplete opened after each item is picked.\n    requestAnimationFrame(()=>{\n      this.openAuto(this.matACTrigger);\n    })\n\n  }\n\n  \n  selectedPaymentPhase(){\n    if(this.payment_phase.value.id == 2){\n      this.show2Phase=true;\n      this.show3Phase=false;\n    }else if(this.payment_phase.value.id == 3){\n      this.show2Phase=true;\n      this.show3Phase=true;\n    }else{\n      this.show2Phase=false;\n      this.show3Phase=false;\n    }\n  }\n\n  openAuto(trigger: MatAutocompleteTrigger) {\n    trigger.openPanel();\n    this.licenceInput.nativeElement.focus();\n    console.log(trigger);\n  }\n\n\n  public validation_msgs = {\n    'license_type': [\n      { type: 'invalidAutocompleteObject', message: 'License Type not recognized. Click one of the options.' },\n      { type: 'required', message: 'License Type is required.' }\n    ],\n    'package_type': [\n      { type: 'invalidAutocompleteObject', message: 'Package Type not recognized. Click one of the options.' },\n      { type: 'required', message: 'Package is required.' }\n    ],\n    'payment_phase': [\n      { type: 'invalidAutocompleteObject', message: 'Payment Phase not recognized. Click one of the options.' },\n      { type: 'required', message: 'Payment Phase is required.' }\n    ],\n  }\n\n  onFileChangePackageImage(event){\n    const reader = new FileReader();\n    if (event.target.files && event.target.files.length) {\n      const [file] = event.target.files;\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        this.package_preview=reader.result;\n        this.editPackageForm.patchValue({\n          package_image:file\n        })\n        console.log(\"this.documentForm===\",this.editPackageForm)\n      }\n    }\n  }\n\n  goBack(){\n    this.router.navigate(['/admin/package/package-list']);\n  }\n\n  updatePackageDetails(){\n    const formData = new FormData();\n    formData.append('baseRoot','root/'+this.clientCode+'/Package/'+this.editPackageForm.value.package_english);\n    formData.append('PackageFormData',JSON.stringify(this.editPackageForm.value));\n    formData.append('package_type',JSON.stringify(this.package_type.value));\n    formData.append('license_type',JSON.stringify(this.license_selected));\n    formData.append('payment_phase',this.payment_phase.value.id);\n    formData.append('authToken',sessionStorage.currentUser);\n    formData.append('client',sessionStorage.client);\n    formData.append('file',this.editPackageForm.value.package_image);\n    this.packageService.updatePackageDetails(formData)\n    .subscribe(res=>{\n      if(res['status'] == 'Success'){\n        this.toastrService.success(\"Updated Successfully!!\");\n        this.router.navigate(['/admin/package/package-list']);\n      }\n    })\n  }\n\n}\n","<section class=\"content\">\n        <div class=\"container-fluid\">\n          <div class=\"block-header\">\n            <div class=\"row\">\n              <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                <ul class=\"breadcrumb breadcrumb-style \">\n                  <li class=\"breadcrumb-item\">\n                    <h4 class=\"page-title\">{{'PACKAGE.LISTTITLE' | translate}}</h4>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n                  <div class=\"mt-5\">\n                    <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                      <div class=\"card\">\n                        <div class=\"body\">\n                          <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                              <div class=\"row\">\n                                <div class=\"col-8\">\n                                  <ul class=\"header-buttons-left ml-0\">\n                                    <li class=\"dropdown\">\n                                      <h2>\n                                        <strong>{{'PACKAGE.LISTTITLE' | translate}}</strong></h2>\n                                    </li>\n                                    <li class=\"dropdown m-l-20\">\n                                        <label for=\"search-input\"><i class=\"material-icons search-icon\">search</i></label>\n                                        <input placeholder=\"Search\" type=\"text\" class=\"browser-default search-field\"\n                                        (keyup)='filterDatatable($event)' aria-label=\"Search box\">\n                                    </li>\n                                    <li>\n                                      <!-- <div class=\"icon-button-demo m-l-10\" [hidden]=!selection.hasValue()>\n                                        <button mat-mini-fab color=\"warn\" (click)=\"removeSelectedRows()\">\n                                          <mat-icon class=\"col-white\">delete\n                                          </mat-icon>\n                                        </button>\n                                      </div> -->\n                                    </li>\n                                  </ul>\n                                </div>\n                                <div class=\"col-4\">\n                                  <ul class=\"header-buttons\">\n                                    <li>\n                                      <div class=\"icon-button-demo\">\n                                        <button mat-mini-fab color=\"primary\" (click)=\"addNewPackage()\">\n                                          <mat-icon class=\"col-white\">add</mat-icon>\n                                        </button>\n                                      </div>\n                                    </li>\n                                    <li>\n                                      <div class=\"icon-button-demo\">\n                                        <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                          <mat-icon class=\"col-white\">refresh\n                                          </mat-icon>\n                                        </button>\n                                      </div>\n                                    </li>\n                                  </ul>\n                                </div>\n                              </div>\n                            </div>\n                            <ngx-datatable #table class=\"material\" [rows]=\"data\" [columns]=\"columns\" [sortType]=\"'multi'\"\n                            [columnMode]=\"'force'\" [headerHeight]=\"50\" [footerHeight]=\"50\" [rowHeight]=\"'60'\" [limit]=\"10\">\n                            <!-- user image -->\n                            <ngx-datatable-column name=\"Image\" sortable=\"false\" prop=\"package_image\" [width]=\"100\">\n                            <ng-template let-row=\"data\" let-value=\"value\" let-i=\"index\" ngx-datatable-cell-template>\n                                <td class=\"table-img padding-0\">\n                                <img width=\"40\" src=\"{{ value ? value : 'assets/images/nologo.png' }}\" />\n                                </td>\n                            </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name=\"{{'PACKAGE.LIST.LICENSE-TYPE' | translate}}\" prop=\"license_data\" [width]=\"130\"></ngx-datatable-column>\n                            <ngx-datatable-column name=\"{{'PACKAGE.LIST.PACKAGE-TYPE' | translate}}\" prop=\"package_type\" [width]=\"130\"></ngx-datatable-column>\n                            <ngx-datatable-column name=\"{{'PACKAGE.LIST.FIANL-PACKAGE-PRICE' | translate}}\" prop=\"final_package_price\" [width]=\"200\"></ngx-datatable-column>\n                            <ngx-datatable-column name=\"{{'PACKAGE.LIST.PAYMENT-PHASE' | translate}}\" prop=\"payment_phase\" [width]=\"200\"></ngx-datatable-column>\n                            <ngx-datatable-column name=\"{{'PACKAGE.LIST.GLOBAL-VIEW' | translate}}\" prop=\"global_view\" [width]=\"200\"></ngx-datatable-column>\n                            \n                            <!-- <ngx-datatable-column *ngFor=\"let col of columns\" [name]=\"col.name\">\n                                            </ngx-datatable-column> -->\n                            <!-- action buttons -->\n                            <ngx-datatable-column name=\"{{'PACKAGE.ACTION' | translate}}\" sortable=\"false\" [width]=\"120\">\n                            <ng-template let-value=\"value\" let-row=\"row\" let-rowIndex=\"rowIndex\" ngx-datatable-cell-template>\n                                <span>\n                                <button mat-icon-button color=\"accent\" class=\"btn-tbl-edit\" (click)='editPackage(row, rowIndex)'>\n                                    <mat-icon aria-label=\"Edit\" class=\"col-white\">edit\n                                    </mat-icon>\n                                </button>\n                                <button mat-icon-button color=\"accent\" class=\"btn-tbl-delete\" (click)='deletePackage(row,rowIndex,deleteRecord)'>\n                                    <mat-icon aria-label=\"Delete\" class=\"col-white\">delete\n                                    </mat-icon>\n                                </button>\n                                </span>\n                            </ng-template>\n                            </ngx-datatable-column>\n                        </ngx-datatable>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <ng-template #deleteRecord let-modal>\n          <div class=\"modal-header deleteRowModal\">\n          <h4 class=\"modal-title\" id=\"modal-basic-title\"> <div class=\"modal-header \">\n              <div class=\"modal-about\">\n                  <div class=\"font-weight-bold p-t-10 font-17\">\n                    {{'PACKAGE.DELETETITLE' | translate}}</div>\n              </div>\n              </div>\n          </h4>\n          <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\">\n              <span aria-hidden=\"true\"><i class=\"material-icons\">close</i></span>\n          </button>\n          </div>\n          <div class=\"modal-body\">\n              <p>{{'BUTTON.CONFIRMATION' | translate}}</p>\n              <div class=\"modal-footer\">\n              <div class=\"button-demo\">\n                  <button mat-raised-button type=\"submit\" color=\"primary\" (click)=\"deletePackageDetails()\">{{'BUTTON.DEL-BTN' | translate}}</button>\n                  <button mat-button type=\"button\" (click)=\"modal.close()\">{{'BUTTON.CANCEL-BTN' | translate}}</button>\n              </div>\n              </div>\n          </div>\n      </ng-template>","import { Component, OnInit, ViewChild  } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { BehaviorSubject, fromEvent, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { UnsubscribeOnDestroyAdapter } from 'src/app/shared/UnsubscribeOnDestroyAdapter';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport {PackageService} from '../package.service'\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-package-list',\n  templateUrl: './package-list.component.html',\n  styleUrls: ['./package-list.component.sass']\n})\n\n\n\nexport class PackageListComponent implements OnInit {\n\n  columns = [\n    { name: 'License Type' },\n    { name: 'Package Type' },\n    { name: 'Final Package Price' },\n    {name: 'Payment Phase'},\n    {name: 'Global View'},\n  ]; \n  data=[];\n  filteredData = [];\n  translateVal=(localStorage.lang == 'ml' ? 'malay' : 'english');\n  rowToDelete;\n  \n  constructor(  public httpClient: HttpClient,\n    public dialog: MatDialog,\n    public packageService: PackageService,\n    private snackBar: MatSnackBar,private router: Router, private modalService: NgbModal,\n  private toastrService:ToastrService) { }\n\n    @ViewChild(DatatableComponent, { static: false }) table: DatatableComponent;\n    \n    \n    ngOnInit() {\n      this.loadData();\n    }\n    refresh() {\n      this.loadData();\n    }\n    addNewPackage() {\n      this.router.navigate(['/admin/package/add-package'])\n    }\n\n    loadData(){\n        this.packageService.getPackageListPerClient(sessionStorage.client)\n        .subscribe(res=>{\n          console.log(\"Pack data!!!!!!!!\",res['data'])\n          for(let i=0;i<res['data'].length;i++){\n            res['data'][i].global_view = res['data'][i]['global_view'] == 1 ? true : false;\n            res['data'][i].package_type = res['data'][i][this.translateVal];\n            res['data'][i].payment_phase = res['data'][i]['phase_'+this.translateVal];\n          }\n          this.data=res['data'];\n          this.filteredData=res['data'];\n        })\n    }\n\n    filterDatatable(event) {\n      // get the value of the key pressed and make it lowercase\n      const val = event.target.value.toLowerCase();\n      // get the amount of columns in the table\n      const colsAmt = this.columns.length;\n      // get the key names of each column in the dataset\n      const keys = Object.keys(this.filteredData[0]);\n      // assign filtered matches to the active datatable\n      this.data = this.filteredData.filter(function (item) {\n        // iterate through each row's column data\n        for (let i = 0; i < colsAmt; i++) {\n          // check for a match\n          if (\n            item[keys[i]].toString().toLowerCase().indexOf(val) !== -1 ||\n            !val\n          ) {\n            // found match, return true to add to result set\n            return true;\n          }\n        }\n      });\n      // whenever the filter changes, always go back to the first page\n      this.table.offset = 0;\n  }\n\n  editPackage(row, rowIndex){\n      console.log(\"rowww===\",row);\n      this.router.navigate(['/admin/package/edit-package',row.id]);\n  }\n\n  deletePackage(row, rowIndex,deleteRecord){\n    this.modalService.open(deleteRecord, { ariaLabelledBy: 'modal-basic-title' });\n    this.rowToDelete=row;\n  }\n\n  deletePackageDetails(){\n    this.packageService.deletePackageDetails(this.rowToDelete,sessionStorage.currentUser,sessionStorage.client)\n    .subscribe(res=>{\n      if(res['status'] == 'Success'){\n        this.toastrService.success('Deleted Successfully!!!');\n        this.modalService.dismissAll();\n        this.loadData();\n      }\n    })\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { PackageListComponent } from './package-list/package-list.component';\r\nimport { AddPackageComponent } from './add-package/add-package.component';\r\nimport { EditPackageComponent } from './edit-package/edit-package.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'package-list',\r\n    component: PackageListComponent\r\n  },\r\n  {\r\n    path: 'add-package',\r\n    component: AddPackageComponent\r\n  },\r\n  {\r\n    path: 'edit-package/:id',\r\n    component: EditPackageComponent\r\n  },\r\n  // {\r\n  //   path: 'about-student',\r\n  //   component: AboutStudentComponent\r\n  // }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class PackageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { NgxMaskModule } from 'ngx-mask';\r\nimport { PackageRoutingModule } from './package-routing.module';\r\n// import { DeleteDialogComponent } from './all-students/dialogs/delete/delete.component';\r\n// import { FormDialogComponent } from './all-students/dialogs/form-dialog/form-dialog.component';\r\nimport { PackageService } from './package.service';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { PackageListComponent } from './package-list/package-list.component';\r\nimport { AddPackageComponent } from './add-package/add-package.component';\r\nimport { EditPackageComponent } from './edit-package/edit-package.component';\r\nimport { CKEditorModule } from '@ckeditor/ckeditor5-angular';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    // DeleteDialogComponent,\r\n    // FormDialogComponent,\r\n  \r\n    PackageListComponent,\r\n    AddPackageComponent,\r\n    EditPackageComponent\r\n  ],\r\n  imports: [NgxDatatableModule,MatChipsModule,\r\n    CKEditorModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSnackBarModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatDialogModule,\r\n    MatSortModule,  \r\n    MatToolbarModule,\r\n    MatSelectModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatTabsModule,\r\n    MatMenuModule,\r\n    MaterialFileInputModule,\r\n    PackageRoutingModule,\r\n    MatProgressSpinnerModule,MatStepperModule,\r\n    NgxMaskModule,TranslateModule,\r\n    MatAutocompleteModule\r\n  ],\r\n  providers: [PackageService],\r\n})\r\nexport class PackageModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment'\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PackageService {\r\n\r\n  constructor(private http: HttpClient) {\r\n   \r\n  }\r\n\r\n  setLicenseDetails(licenseData,authToken,client){\r\n    return this.http\r\n    .post<any>(`${environment.apiUrl}/webRoutes/setLicenseDetails`,{licenseData,authToken,client})\r\n    .pipe(\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n  getLicenseListPerClient(client){\r\n    return this.http\r\n    .post<any>(`${environment.apiUrl}/webRoutes/getLicenseListPerClient`,{client})\r\n    .pipe(\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n  getLicenseClassList(client){\r\n    return this.http\r\n    .post<any>(`${environment.apiUrl}/webRoutes/getLicenseClassList`,{client})\r\n    .pipe(\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n  getPakageTypeList(){\r\n    return this.http\r\n    .get<any>(`${environment.apiUrl}/webRoutes/getPakageTypeList`)\r\n    .pipe(\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n  getPaymentPhases(){\r\n    return this.http\r\n    .get<any>(`${environment.apiUrl}/webRoutes/getPaymentPhases`)\r\n    .pipe(\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n\r\n  setPackageDetails(formData){\r\n    return this.http\r\n    .post<any>(`${environment.apiUrl}/webRoutes/setPackageDetails`,formData)\r\n    .pipe(\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n  getPackageListPerClient(client){\r\n    return this.http\r\n    .post<any>(`${environment.apiUrl}/webRoutes/getPackageListPerClient`,{client})\r\n    .pipe(\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n  getPackageToEdit(packageId,client){\r\n    return this.http\r\n    .post<any>(`${environment.apiUrl}/webRoutes/getPackageToEdit`,{packageId,client})\r\n    .pipe(\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n  updatePackageDetails(formData){\r\n    return this.http\r\n    .post<any>(`${environment.apiUrl}/webRoutes/updatePackageDetails`,formData)\r\n    .pipe(\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n  deletePackageDetails(rowToDelete,authToken,client){\r\n    return this.http\r\n    .post<any>(`${environment.apiUrl}/webRoutes/deletePackageDetails`,{rowToDelete,authToken,client})\r\n    .pipe(\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n  getClientCodeForFolder(client){\r\n    return this.http\r\n    .post<any>(`${environment.apiUrl}/webRoutes/getClientCodeForFolder`,{client})\r\n    .pipe(\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n"]}
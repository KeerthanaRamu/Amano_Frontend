{"version":3,"sources":["webpack:///src/app/admin/reports/registration-report/registration-report.component.html","webpack:///src/app/admin/reports/registration-report/registration-report.component.ts","webpack:///src/app/admin/reports/reports-routing.module.ts","webpack:///src/app/admin/reports/reports.module.ts","webpack:///src/app/admin/reports/reports.service.ts","webpack:///src/app/admin/reports/revenue-report/revenue-report.component.html","webpack:///src/app/admin/reports/revenue-report/revenue-report.component.ts"],"names":["RegistrationReportComponent","reportService","toastrService","fb","columns","name","data","filteredData","translateVal","localStorage","lang","regReportForm","group","from_date","Date","to_date","getRegistrationReportForAdmin","console","log","value","sessionStorage","client","subscribe","res","i","length","nric_english","placebirth_english","race_english","pref_english","english","event","val","target","toLowerCase","colsAmt","keys","Object","filter","item","toString","indexOf","table","offset","options","fieldSeparator","quoteStrings","decimalseparator","showLabels","showTitle","title","format","useBom","noDownload","headers","fileName","result","map","id","profile_img","nric_malay","placebirth_malay","race_malay","pref_malay","rest","ngxCsv","DatatableComponent","getRegistrationReport","exportToExcel","refresh","routes","path","component","RevenueReportComponent","ReportsRoutingModule","RouterModule","ReportsModule","ReportsService","NgxSpinnerModule","MatCardModule","MatRadioModule","NgxDatatableModule","CommonModule","FormsModule","ReactiveFormsModule","MatTableModule","MatPaginatorModule","MatFormFieldModule","MatInputModule","MatButtonModule","MatIconModule","MatDialogModule","MatSortModule","MatDatepickerModule","MatCheckboxModule","MatMenuModule","MatProgressSpinnerModule","TranslateModule","MatAutocompleteModule","http","dateObj","post","environment","pipe","getRevenueReportForAdmin","package_english","malay","package_malay","getRevenueReport"],"mappings":"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","file":"src_app_admin_reports_reports_module_ts-es5.js","sourcesContent":["<section class=\"content\">\n    <div class=\"container-fluid\">\n      <div class=\"block-header\">\n        <div class=\"row\">\n          <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n            <ul class=\"breadcrumb breadcrumb-style \">\n              <li class=\"breadcrumb-item\">\n                <h4 class=\"page-title\">{{'REGISTRATION-REPORT.TITLE' | translate}}</h4>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n              <div class=\"mt-5\">\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                  <div class=\"card\">\n                    <div class=\"body\">\n                      <div class=\"table-responsive\">\n                        <div class=\"materialTableHeader\">\n                          <form  [formGroup]=\"regReportForm\">\n                            <div class=\"row\">\n                              <div class=\"col-4\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                      <mat-label>{{'REGISTRATION-REPORT.LIST.FROMDATE' | translate}}*</mat-label>\n                                      <input matInput [matDatepicker]=\"picker\" formControlName=\"from_date\">\n                                      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                                      <mat-datepicker #picker></mat-datepicker>\n                                      <mat-error *ngIf=\"regReportForm.get('from_date').hasError('required')\">\n                                              {{'REGISTRATION-REPORT.LIST.FROMDATE' | translate}} is required \n                                      </mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-4\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                      <mat-label>{{'REGISTRATION-REPORT.LIST.TODATE' | translate}}*</mat-label>\n                                      <input matInput [matDatepicker]=\"topicker\" formControlName=\"to_date\">\n                                      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                                      <mat-datepicker #topicker></mat-datepicker>\n                                      <mat-error *ngIf=\"regReportForm.get('to_date').hasError('required')\">\n                                              {{'REGISTRATION-REPORT.LIST.TODATE' | translate}} is required \n                                      </mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-2\" style=\"padding: 10px;\">\n                                  <button mat-raised-button  color=\"primary\" (click)=\"getRegistrationReport()\">{{'BUTTON.SEARCH-BTN' | translate}}</button>\n                                </div>\n                                <div class=\"col-1\" style=\"padding: 10px;\">\n                                  <button mat-raised-button (click)=\"exportToExcel()\" class=\"btn btn-success\">{{'BUTTON.EXCEL-BTN' | translate}}\n                                    <i class=\"fas fa-file-excel\"></i>\n                                  </button>                                \n                                </div>\n                                <div class=\"col-1\">\n                                  <ul class=\"header-buttons\">\n                                    <li>\n                                      <div class=\"icon-button-demo\">\n                                        <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                          <mat-icon class=\"col-white\">refresh\n                                          </mat-icon>\n                                        </button>\n                                      </div>\n                                    </li>\n                                  </ul>\n                                </div>\n                            </div>\n                        </form>\n                        </div>\n                        <ngx-datatable #table class=\"material\" [rows]=\"data\" [columns]=\"columns\" [sortType]=\"'multi'\"\n                        [columnMode]=\"'force'\" [headerHeight]=\"50\" [footerHeight]=\"50\" [rowHeight]=\"'60'\" [limit]=\"10\">\n                        <!-- user image -->\n                        <ngx-datatable-column name=\"Image\" sortable=\"false\" prop=\"profile_img\" [width]=\"100\">\n                        <ng-template let-row=\"data\" let-value=\"value\" let-i=\"index\" ngx-datatable-cell-template>\n                            <td class=\"table-img padding-0\">\n                            <img width=\"40\" src=\"{{ value ? value : 'assets/images/nologo.png' }}\" />\n                            </td>\n                        </ng-template>\n                        </ngx-datatable-column>\n                        <ngx-datatable-column name=\"{{'STUDENT-REGISTRATION.LIST.NAME' | translate}}\" prop=\"name\" [width]=\"130\"></ngx-datatable-column>\n                        <ngx-datatable-column name=\"{{'STUDENT-REGISTRATION.LIST.NRIC' | translate}}\" prop=\"nric_number\" [width]=\"130\"></ngx-datatable-column>\n                        <ngx-datatable-column name=\"{{'STUDENT-REGISTRATION.LIST.PASSPORT' | translate}}\" prop=\"passport_number\" [width]=\"200\"></ngx-datatable-column>\n                        <ngx-datatable-column name=\"{{'STUDENT-REGISTRATION.LIST.MOBILENO' | translate}}\" prop=\"mobile_number\" [width]=\"200\"></ngx-datatable-column>\n                        <ngx-datatable-column name=\"{{'STUDENT-REGISTRATION.LIST.EMAIL' | translate}}\" prop=\"email_id\" [width]=\"200\"></ngx-datatable-column>\n                        <ngx-datatable-column name=\"{{'STUDENT-REGISTRATION.LIST.STATUS' | translate}}\" prop=\"status\" [width]=\"200\"></ngx-datatable-column>\n\n                        <!-- action buttons -->\n                        <!-- <ngx-datatable-column name=\"{{'STUDENT-REGISTRATION.ACTIONS' | translate}}\" sortable=\"false\" [width]=\"120\">\n                        <ng-template let-value=\"value\" let-row=\"row\" let-rowIndex=\"rowIndex\" ngx-datatable-cell-template>\n                            <span>\n                            <button mat-icon-button color=\"accent\" class=\"btn-tbl-edit\" (click)='viewStudent(row, rowIndex)'>\n                                <mat-icon aria-label=\"View\" class=\"col-white\">visibility\n                                </mat-icon>\n                            </button>\n                            <button mat-icon-button color=\"accent\" class=\"btn-tbl-edit\" (click)='editStudent(row, rowIndex)'>\n                                <mat-icon aria-label=\"Edit\" class=\"col-white\">edit\n                                </mat-icon>\n                            </button>\n                            <button mat-icon-button color=\"accent\" class=\"btn-tbl-delete\" (click)='deleteStudent(row,rowIndex, deleteRecord)'>\n                                <mat-icon aria-label=\"Delete\" class=\"col-white\">delete\n                                </mat-icon>\n                            </button>\n                            </span>\n                        </ng-template>\n                        </ngx-datatable-column> -->\n                    </ngx-datatable>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n        </div>\n      </div>\n    </div>\n  </section>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ReportsService } from '../reports.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\nimport {  FormBuilder, FormGroup, Validators,FormControl, AbstractControl, ValidatorFn } from '@angular/forms';\nimport { ngxCsv } from 'ngx-csv/ngx-csv';\nimport * as moment from 'moment';\n\n\n@Component({\n  selector: 'app-registration-report',\n  templateUrl: './registration-report.component.html',\n  styleUrls: ['./registration-report.component.sass']\n})\nexport class RegistrationReportComponent implements OnInit {\n\n  regReportForm: FormGroup;\n\n  constructor(private reportService:ReportsService,private toastrService:ToastrService,private fb: FormBuilder,) {\n\n    this.regReportForm = this.fb.group({\n      from_date: [new Date()],\n      to_date: [new Date()],\n    });\n   }\n\n  @ViewChild(DatatableComponent, { static: false }) table: DatatableComponent;\n\n \n\n\n  columns = [\n    { name: 'Name' },\n    { name: 'NRIC Number' },\n    { name: 'Passport Number' },\n    {name: 'Gender'},\n    {name: 'Mobile'},\n    {name: 'Email'},\n    {name: 'Status'},\n  ]; \n  data=[];\n  filteredData = [];\n  translateVal=(localStorage.lang == 'ml' ? 'malay' : 'english');\n\n  ngOnInit(): void {\n    this.getRegistrationReportForAdmin();\n  }\n\n  refresh() {\n    this.getRegistrationReportForAdmin();\n  }\n\n  getRegistrationReportForAdmin(){\n    console.log(\"this.regReportForm.value===\",this.regReportForm.value)\n      this.reportService.getRegistrationReportForAdmin(this.regReportForm.value,sessionStorage.client)\n      .subscribe((res)=>{\n        for(let i=0;i<res['data'].length;i++){\n          res['data'][i].nric_english = res['data'][i]['nric_'+this.translateVal];\n          res['data'][i].placebirth_english = res['data'][i]['placebirth_'+this.translateVal];\n          res['data'][i].race_english = res['data'][i]['race_'+this.translateVal];\n          res['data'][i].pref_english = res['data'][i]['pref_'+this.translateVal];\n          res['data'][i].english = res['data'][i][this.translateVal];\n        }\n        this.data=res['data'];\n        this.filteredData=res['data'];\n      })\n  }\n\n  getRegistrationReport(){\n    this.getRegistrationReportForAdmin();\n  }\n\n  filterDatatable(event) {\n    // get the value of the key pressed and make it lowercase\n    const val = event.target.value.toLowerCase();\n    // get the amount of columns in the table\n    const colsAmt = this.columns.length;\n    // get the key names of each column in the dataset\n    const keys = Object.keys(this.filteredData[0]);\n    // assign filtered matches to the active datatable\n    this.data = this.filteredData.filter(function (item) {\n      // iterate through each row's column data\n      for (let i = 0; i < colsAmt; i++) {\n        // check for a match\n        if (\n          item[keys[i]].toString().toLowerCase().indexOf(val) !== -1 ||\n          !val\n        ) {\n          // found match, return true to add to result set\n          return true;\n        }\n      }\n    });\n    // whenever the filter changes, always go back to the first page\n    this.table.offset = 0;\n  }\n\n  exportToExcel(){\n    if(this.filteredData.length > 0){\n      var options = { \n        fieldSeparator: ',',\n        quoteStrings: '\"',\n        decimalseparator: '.',\n        showLabels: true, \n        showTitle: true,\n        title: 'Registration Report - '+moment(new Date()).format('YYYY-MM-DD'),\n        useBom: true,\n        noDownload: false,\n        headers: [\"Student Name\",\"NRIC Type\",\"NRIC Number\", \"Passport Number\",\"Date Of Birth\",\"Gender\",\"Place Of Birth\",\"Nationality\",\"NRIC Address\",\"Address 1\",\"Address 2\",\"Postal Code\",\"City\",\"State\",\"Email Address\",\"Moile Number\",\"Race\",\"Other Race\",\"Prefered Language\",\"Emergency Contact Name\",\"Emergency Contact Number\",\"Username\",\"Password\",\"Status\"]\n      };\n      let fileName='Registration_Report_'+moment(new Date()).format('YYYY-MM-DD');\n      console.log(\"this.filteredData========\",this.filteredData,fileName);\n      const result = this.filteredData.map(({id,profile_img,nric_malay,placebirth_malay,race_malay,pref_malay,english,...rest}) => ({...rest}));\n      new ngxCsv(result, fileName, options);\n    }\n    \n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { RevenueReportComponent } from './revenue-report/revenue-report.component';\r\nimport { RegistrationReportComponent } from './registration-report/registration-report.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'revenue-report',\r\n    component: RevenueReportComponent\r\n  },\r\n  {\r\n    path: 'registration-report',\r\n    component: RegistrationReportComponent\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ReportsRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport {ReportsService} from './reports.service';\r\nimport {ReportsRoutingModule} from './reports-routing.module';\r\nimport { RevenueReportComponent } from './revenue-report/revenue-report.component';\r\nimport { RegistrationReportComponent } from './registration-report/registration-report.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n  \r\n    RevenueReportComponent,\r\n       RegistrationReportComponent\r\n  ],\r\n  imports: [\r\n    NgxSpinnerModule,MatCardModule,MatRadioModule,\r\n    NgxDatatableModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatDialogModule,\r\n    MatSortModule,  \r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatMenuModule,\r\n    MatProgressSpinnerModule\r\n  ,TranslateModule,\r\n    MatAutocompleteModule,ReportsRoutingModule\r\n  ],\r\n  providers: [ReportsService],\r\n})\r\nexport class ReportsModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment'\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ReportsService {\r\n\r\n\r\n  constructor(private http: HttpClient) {\r\n   \r\n  }\r\n\r\n  \r\n\r\n  getRegistrationReportForAdmin(dateObj,client){\r\n    return this.http\r\n    .post<any>(`${environment.apiUrl}/report/getRegistrationReportForAdmin`,{dateObj,client})\r\n    .pipe(\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n  getRevenueReportForAdmin(dateObj,client){\r\n    return this.http\r\n    .post<any>(`${environment.apiUrl}/report/getRevenueReportForAdmin`,{dateObj,client})\r\n    .pipe(\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<section class=\"content\">\n    <div class=\"container-fluid\">\n      <div class=\"block-header\">\n        <div class=\"row\">\n          <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n            <ul class=\"breadcrumb breadcrumb-style \">\n              <li class=\"breadcrumb-item\">\n                <h4 class=\"page-title\">{{'REVENUE-REPORT.TITLE' | translate}}</h4>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n              <div class=\"mt-5\">\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                  <div class=\"card\">\n                    <div class=\"body\">\n                      <div class=\"table-responsive\">\n                        <div class=\"materialTableHeader\">\n                          <form  [formGroup]=\"regReportForm\">\n                            <div class=\"row\">\n                              <div class=\"col-4\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                      <mat-label>{{'REVENUE-REPORT.LIST.FROMDATE' | translate}}*</mat-label>\n                                      <input matInput [matDatepicker]=\"picker\" formControlName=\"from_date\">\n                                      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                                      <mat-datepicker #picker></mat-datepicker>\n                                      <mat-error *ngIf=\"regReportForm.get('from_date').hasError('required')\">\n                                              {{'REVENUE-REPORT.LIST.FROMDATE' | translate}} is required \n                                      </mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-4\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                      <mat-label>{{'REVENUE-REPORT.LIST.TODATE' | translate}}*</mat-label>\n                                      <input matInput [matDatepicker]=\"topicker\" formControlName=\"to_date\">\n                                      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                                      <mat-datepicker #topicker></mat-datepicker>\n                                      <mat-error *ngIf=\"regReportForm.get('to_date').hasError('required')\">\n                                              {{'REVENUE-REPORT.LIST.TODATE' | translate}} is required \n                                      </mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-2\" style=\"padding: 10px;\">\n                                  <button mat-raised-button  color=\"primary\" (click)=\"getRevenueReport()\">{{'BUTTON.SEARCH-BTN' | translate}}</button>\n                                </div>\n                                <div class=\"col-1\" style=\"padding: 10px;\">\n                                  <button mat-raised-button (click)=\"exportToExcel()\" class=\"btn btn-success\">{{'BUTTON.EXCEL-BTN' | translate}}\n                                    <i class=\"fas fa-file-excel\"></i>\n                                  </button>                                \n                                </div>\n                                <div class=\"col-1\">\n                                  <ul class=\"header-buttons\">\n                                    <li>\n                                      <div class=\"icon-button-demo\">\n                                        <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                          <mat-icon class=\"col-white\">refresh\n                                          </mat-icon>\n                                        </button>\n                                      </div>\n                                    </li>\n                                  </ul>\n                                </div>\n                            </div>\n                        </form>\n                        </div>\n                        <ngx-datatable #table class=\"material\" [rows]=\"data\" [columns]=\"columns\" [sortType]=\"'multi'\"\n                        [columnMode]=\"'force'\" [headerHeight]=\"50\" [footerHeight]=\"50\" [rowHeight]=\"'60'\" [limit]=\"10\">\n                        <!-- user image -->\n                       \n                        <ngx-datatable-column name=\"{{'REVENUE-REPORT.LIST.STUDENT-NAME' | translate}}\" prop=\"name\" [width]=\"130\"></ngx-datatable-column>\n                        <ngx-datatable-column name=\"{{'REVENUE-REPORT.LIST.TRAN-NO' | translate}}\" prop=\"registration_no\" [width]=\"130\"></ngx-datatable-column>\n                        <ngx-datatable-column name=\"{{'REVENUE-REPORT.LIST.PACKAGE' | translate}}\" prop=\"package_english\" [width]=\"200\"></ngx-datatable-column>\n                        <ngx-datatable-column name=\"{{'REVENUE-REPORT.LIST.PACKAGE-TYPE' | translate}}\" prop=\"english\" [width]=\"200\"></ngx-datatable-column>\n                        <ngx-datatable-column name=\"{{'REVENUE-REPORT.LIST.PACKAGE-AMOUNT' | translate}}\" prop=\"final_package_price\" [width]=\"200\"></ngx-datatable-column>\n                        <ngx-datatable-column name=\"{{'REVENUE-REPORT.LIST.PAYMENT-STATUS' | translate}}\" prop=\"payment_status\" [width]=\"200\"></ngx-datatable-column>\n                        <ngx-datatable-column name=\"{{'REVENUE-REPORT.LIST.AMOUNT-PAID' | translate}}\" prop=\"amountPaid\" [width]=\"200\"></ngx-datatable-column>\n                        <ngx-datatable-column name=\"{{'REVENUE-REPORT.LIST.STATUS' | translate}}\" prop=\"status\" [width]=\"200\"></ngx-datatable-column>\n\n                        <!-- action buttons -->\n                        <!-- <ngx-datatable-column name=\"{{'REVENUE-REPORT.ACTIONS' | translate}}\" sortable=\"false\" [width]=\"120\">\n                        <ng-template let-value=\"value\" let-row=\"row\" let-rowIndex=\"rowIndex\" ngx-datatable-cell-template>\n                            <span>\n                            <button mat-icon-button color=\"accent\" class=\"btn-tbl-edit\" (click)='viewStudent(row, rowIndex)'>\n                                <mat-icon aria-label=\"View\" class=\"col-white\">visibility\n                                </mat-icon>\n                            </button>\n                            <button mat-icon-button color=\"accent\" class=\"btn-tbl-edit\" (click)='editStudent(row, rowIndex)'>\n                                <mat-icon aria-label=\"Edit\" class=\"col-white\">edit\n                                </mat-icon>\n                            </button>\n                            <button mat-icon-button color=\"accent\" class=\"btn-tbl-delete\" (click)='deleteStudent(row,rowIndex, deleteRecord)'>\n                                <mat-icon aria-label=\"Delete\" class=\"col-white\">delete\n                                </mat-icon>\n                            </button>\n                            </span>\n                        </ng-template>\n                        </ngx-datatable-column> -->\n                    </ngx-datatable>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n        </div>\n      </div>\n    </div>\n  </section>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ReportsService } from '../reports.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\nimport {  FormBuilder, FormGroup, Validators,FormControl, AbstractControl, ValidatorFn } from '@angular/forms';\nimport { ngxCsv } from 'ngx-csv/ngx-csv';\nimport * as moment from 'moment';\n\n\n@Component({\n  selector: 'app-revenue-report',\n  templateUrl: './revenue-report.component.html',\n  styleUrls: ['./revenue-report.component.sass']\n})\nexport class RevenueReportComponent implements OnInit {\n\n  regReportForm: FormGroup;\n\n  constructor(private reportService:ReportsService,private toastrService:ToastrService,private fb: FormBuilder,) {\n\n    this.regReportForm = this.fb.group({\n      from_date: [new Date()],\n      to_date: [new Date()],\n    });\n   }\n\n  @ViewChild(DatatableComponent, { static: false }) table: DatatableComponent;\n\n  columns = [\n    { name: 'Student Name' },\n    { name: 'Transaction Number' },\n    { name: 'Package' },\n    {name: 'Package Type'},\n    {name: 'Package Amount'},\n    {name: 'Payment Status'},\n    {name: 'Amount Paid'},\n    {name: 'Status'},\n  ]; \n  data=[];\n  filteredData = [];\n  translateVal=(localStorage.lang == 'ml' ? 'malay' : 'english');\n\n  ngOnInit(): void {\n    this.getRevenueReportForAdmin();\n  }\n\n  refresh() {\n    this.getRevenueReportForAdmin();\n  }\n\n  getRevenueReportForAdmin(){\n    console.log(\"this.regReportForm.value===\",this.regReportForm.value)\n      this.reportService.getRevenueReportForAdmin(this.regReportForm.value,sessionStorage.client)\n      .subscribe((res)=>{\n        for(let i=0;i<res['data'].length;i++){\n          res['data'][i].package_english = res['data'][i]['package_'+this.translateVal];\n          res['data'][i].english = res['data'][i][this.translateVal];\n        }\n        this.data=res['data'];\n        this.filteredData=res['data'];\n      })\n  }\n\n  getRevenueReport(){\n    this.getRevenueReportForAdmin();\n  }\n\n  filterDatatable(event) {\n    // get the value of the key pressed and make it lowercase\n    const val = event.target.value.toLowerCase();\n    // get the amount of columns in the table\n    const colsAmt = this.columns.length;\n    // get the key names of each column in the dataset\n    const keys = Object.keys(this.filteredData[0]);\n    // assign filtered matches to the active datatable\n    this.data = this.filteredData.filter(function (item) {\n      // iterate through each row's column data\n      for (let i = 0; i < colsAmt; i++) {\n        // check for a match\n        if (\n          item[keys[i]].toString().toLowerCase().indexOf(val) !== -1 ||\n          !val\n        ) {\n          // found match, return true to add to result set\n          return true;\n        }\n      }\n    });\n    // whenever the filter changes, always go back to the first page\n    this.table.offset = 0;\n  }\n\n\n  exportToExcel(){\n    if(this.filteredData.length > 0){\n      var options = { \n        fieldSeparator: ',',\n        quoteStrings: '\"',\n        decimalseparator: '.',\n        showLabels: true, \n        showTitle: true,\n        title: 'Revenue Report - '+moment(new Date()).format('YYYY-MM-DD'),\n        useBom: true,\n        noDownload: false,\n        headers: [\"Student Name\", \"Transaction No\", \"Package\",\"Payment Phase\",\"Package Amount\",\"Payment Status\",\"Amount Paid\",\"Status\"]\n      };\n      let fileName='Revenue_Report_'+moment(new Date()).format('YYYY-MM-DD');\n      console.log(\"this.filteredData========\",this.filteredData,fileName);\n      const result = this.filteredData.map(({id,malay,package_malay,...rest}) => ({...rest}));\n      console.log(\"result======\",result)\n      new ngxCsv(result, fileName, options);\n    }\n\n  }\n\n}\n"]}
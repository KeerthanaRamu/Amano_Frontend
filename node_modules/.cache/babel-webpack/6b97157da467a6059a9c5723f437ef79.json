{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, HostBinding, NgModule } from '@angular/core';\nimport * as i1 from '@angular/platform-browser';\n\nconst isJsons = array => Array.isArray(array) && array.every(row => typeof row === 'object' && !(row instanceof Array));\n\nconst isArrays = array => Array.isArray(array) && array.every(row => Array.isArray(row));\n\nfunction jsonsHeaders(array) {\n  return Array.from(new Set(array.map(item => Object.keys(item)).reduce((a, b) => [...a, ...b], [])));\n}\n\nfunction jsons2arrays(jsons, headers) {\n  headers = headers || jsonsHeaders(jsons); // allow headers to have custom labels, defaulting to having the header data key be the label\n\n  let headerLabels = headers;\n  let headerKeys = headers;\n\n  if (isJsons(headers)) {\n    headerLabels = headers.map(header => header.label);\n    headerKeys = headers.map(header => header.key);\n  }\n\n  const data = jsons.map(object => headerKeys.map(header => header in object ? object[header] : ''));\n  return [headerLabels, ...data];\n}\n\nconst elementOrEmpty = element => element || element === 0 ? element : '';\n\nfunction joiner(data, delimiter = ',') {\n  return data.map((row, index) => row.map(element => '\"' + elementOrEmpty(element) + '\"').join(delimiter)).join(`\\n`);\n}\n\nfunction arrays2csv(data, headers, delimiter) {\n  return joiner(headers ? [headers, ...data] : data, delimiter);\n}\n\nfunction jsons2csv(data, headers, delimiter) {\n  return joiner(jsons2arrays(data, headers), delimiter);\n}\n\nfunction string2csv(data, headers, delimiter) {\n  return headers ? `${headers.join(delimiter)}\\n${data}` : data;\n}\n\nfunction toCSV(data, headers, delimiter) {\n  if (isJsons(data)) {\n    return jsons2csv(data, headers, delimiter);\n  }\n\n  if (isArrays(data)) {\n    return arrays2csv(data, headers, delimiter);\n  }\n\n  if (typeof data === 'string') {\n    return string2csv(data, headers, delimiter);\n  }\n\n  throw new TypeError(`Data should be a \"String\", \"Array of arrays\" OR \"Array of objects\" `);\n}\n\nfunction blob(data, uFEFF = true, headers, delimiter) {\n  const csv = toCSV(data, headers, delimiter);\n  return new Blob([uFEFF ? '\\uFEFF' : '', csv], {\n    type: 'text/csv'\n  });\n}\n\nfunction buildURI(data, uFEFF = true, headers, delimiter) {\n  return URL.createObjectURL(blob(data, uFEFF, headers, delimiter));\n}\n\nclass CsvDirective {\n  constructor(sanitizer) {\n    this.sanitizer = sanitizer;\n    /** the body of the csv */\n\n    this.data = [];\n    /** Set the seperator between values */\n\n    this.delimiter = ',';\n    /** adds a Byte order mark to setup the csv as UTF-8  */\n\n    this.uFEFF = true;\n    /** filename */\n\n    this.download = 'data.csv';\n    this.target = '_blank';\n  }\n  /** Set the filename of the csv. Default is `data.csv` */\n\n\n  set filename(a) {\n    this.download = a;\n  }\n\n  ngOnChanges() {\n    this.href = this.sanitizer.bypassSecurityTrustResourceUrl(buildURI(this.data, this.uFEFF, this.headers, this.delimiter));\n  }\n\n}\n\nCsvDirective.ɵfac = function CsvDirective_Factory(t) {\n  return new (t || CsvDirective)(i0.ɵɵdirectiveInject(i1.DomSanitizer));\n};\n\nCsvDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CsvDirective,\n  selectors: [[\"\", \"csvLink\", \"\"]],\n  hostVars: 3,\n  hostBindings: function CsvDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"href\", ctx.href, i0.ɵɵsanitizeUrlOrResourceUrl)(\"download\", ctx.download)(\"target\", ctx.target);\n    }\n  },\n  inputs: {\n    data: \"data\",\n    headers: \"headers\",\n    delimiter: \"delimiter\",\n    filename: \"filename\",\n    uFEFF: \"uFEFF\",\n    target: \"target\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CsvDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[csvLink]'\n    }]\n  }], function () {\n    return [{\n      type: i1.DomSanitizer\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    headers: [{\n      type: Input\n    }],\n    delimiter: [{\n      type: Input\n    }],\n    filename: [{\n      type: Input\n    }],\n    uFEFF: [{\n      type: Input\n    }],\n    href: [{\n      type: HostBinding\n    }],\n    download: [{\n      type: HostBinding\n    }],\n    target: [{\n      type: Input\n    }, {\n      type: HostBinding\n    }]\n  });\n})();\n\nclass CsvModule {}\n\nCsvModule.ɵfac = function CsvModule_Factory(t) {\n  return new (t || CsvModule)();\n};\n\nCsvModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CsvModule\n});\nCsvModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CsvModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CsvDirective],\n      exports: [CsvDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CsvDirective, CsvModule, arrays2csv, blob, buildURI, elementOrEmpty, isArrays, isJsons, joiner, jsons2arrays, jsons2csv, jsonsHeaders, string2csv, toCSV }; //# sourceMappingURL=ctrl-ngx-csv.mjs.map","map":{"version":3,"sources":["D:/CDTS/miniSeDIA/Application_12-02-21/node_modules/@ctrl/ngx-csv/fesm2020/ctrl-ngx-csv.mjs"],"names":["i0","Directive","Input","HostBinding","NgModule","i1","isJsons","array","Array","isArray","every","row","isArrays","jsonsHeaders","from","Set","map","item","Object","keys","reduce","a","b","jsons2arrays","jsons","headers","headerLabels","headerKeys","header","label","key","data","object","elementOrEmpty","element","joiner","delimiter","index","join","arrays2csv","jsons2csv","string2csv","toCSV","TypeError","blob","uFEFF","csv","Blob","type","buildURI","URL","createObjectURL","CsvDirective","constructor","sanitizer","download","target","filename","ngOnChanges","href","bypassSecurityTrustResourceUrl","ɵfac","DomSanitizer","ɵdir","args","selector","CsvModule","ɵmod","ɵinj","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Input, HostBinding, NgModule } from '@angular/core';\nimport * as i1 from '@angular/platform-browser';\n\nconst isJsons = (array) => Array.isArray(array) &&\n    array.every(row => typeof row === 'object' && !(row instanceof Array));\nconst isArrays = (array) => Array.isArray(array) && array.every(row => Array.isArray(row));\nfunction jsonsHeaders(array) {\n    return Array.from(new Set(array.map(item => Object.keys(item)).reduce((a, b) => [...a, ...b], [])));\n}\nfunction jsons2arrays(jsons, headers) {\n    headers = headers || jsonsHeaders(jsons);\n    // allow headers to have custom labels, defaulting to having the header data key be the label\n    let headerLabels = headers;\n    let headerKeys = headers;\n    if (isJsons(headers)) {\n        headerLabels = headers.map(header => header.label);\n        headerKeys = headers.map(header => header.key);\n    }\n    const data = jsons.map(object => headerKeys.map(header => (header in object ? object[header] : '')));\n    return [headerLabels, ...data];\n}\nconst elementOrEmpty = (element) => element || element === 0 ? element : '';\nfunction joiner(data, delimiter = ',') {\n    return data\n        .map((row, index) => row.map((element) => '\"' + elementOrEmpty(element) + '\"').join(delimiter))\n        .join(`\\n`);\n}\nfunction arrays2csv(data, headers, delimiter) {\n    return joiner(headers ? [headers, ...data] : data, delimiter);\n}\nfunction jsons2csv(data, headers, delimiter) {\n    return joiner(jsons2arrays(data, headers), delimiter);\n}\nfunction string2csv(data, headers, delimiter) {\n    return headers ? `${headers.join(delimiter)}\\n${data}` : data;\n}\nfunction toCSV(data, headers, delimiter) {\n    if (isJsons(data)) {\n        return jsons2csv(data, headers, delimiter);\n    }\n    if (isArrays(data)) {\n        return arrays2csv(data, headers, delimiter);\n    }\n    if (typeof data === 'string') {\n        return string2csv(data, headers, delimiter);\n    }\n    throw new TypeError(`Data should be a \"String\", \"Array of arrays\" OR \"Array of objects\" `);\n}\nfunction blob(data, uFEFF = true, headers, delimiter) {\n    const csv = toCSV(data, headers, delimiter);\n    return new Blob([uFEFF ? '\\uFEFF' : '', csv], { type: 'text/csv' });\n}\nfunction buildURI(data, uFEFF = true, headers, delimiter) {\n    return URL.createObjectURL(blob(data, uFEFF, headers, delimiter));\n}\n\nclass CsvDirective {\n    constructor(sanitizer) {\n        this.sanitizer = sanitizer;\n        /** the body of the csv */\n        this.data = [];\n        /** Set the seperator between values */\n        this.delimiter = ',';\n        /** adds a Byte order mark to setup the csv as UTF-8  */\n        this.uFEFF = true;\n        /** filename */\n        this.download = 'data.csv';\n        this.target = '_blank';\n    }\n    /** Set the filename of the csv. Default is `data.csv` */\n    set filename(a) {\n        this.download = a;\n    }\n    ngOnChanges() {\n        this.href = this.sanitizer.bypassSecurityTrustResourceUrl(buildURI(this.data, this.uFEFF, this.headers, this.delimiter));\n    }\n}\nCsvDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CsvDirective, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Directive });\nCsvDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: CsvDirective, selector: \"[csvLink]\", inputs: { data: \"data\", headers: \"headers\", delimiter: \"delimiter\", filename: \"filename\", uFEFF: \"uFEFF\", target: \"target\" }, host: { properties: { \"href\": \"this.href\", \"download\": \"this.download\", \"target\": \"this.target\" } }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CsvDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[csvLink]' }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; }, propDecorators: { data: [{\n                type: Input\n            }], headers: [{\n                type: Input\n            }], delimiter: [{\n                type: Input\n            }], filename: [{\n                type: Input\n            }], uFEFF: [{\n                type: Input\n            }], href: [{\n                type: HostBinding\n            }], download: [{\n                type: HostBinding\n            }], target: [{\n                type: Input\n            }, {\n                type: HostBinding\n            }] } });\n\nclass CsvModule {\n}\nCsvModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CsvModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCsvModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CsvModule, declarations: [CsvDirective], exports: [CsvDirective] });\nCsvModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CsvModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CsvModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CsvDirective],\n                    exports: [CsvDirective],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CsvDirective, CsvModule, arrays2csv, blob, buildURI, elementOrEmpty, isArrays, isJsons, joiner, jsons2arrays, jsons2csv, jsonsHeaders, string2csv, toCSV };\n//# sourceMappingURL=ctrl-ngx-csv.mjs.map\n"]},"metadata":{},"sourceType":"module"}